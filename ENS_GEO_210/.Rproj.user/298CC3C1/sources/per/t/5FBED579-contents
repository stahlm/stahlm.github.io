---
title: "Water table variations (timing)"
author: "Mason Stahl"
date: "2-Aug-2020"
output:
  html_document:
    df_print: paged
    theme: spacelab
    toc: no
    toc_float: no
    code_folding: hide
---

```{r message=FALSE, warning=FALSE} 
library(tidyverse)
library(data.table)
library(lubridate)
library(leaflet)
library(tmap)
library(sf)
library(vroom)
library(spData)
library(geofacet)
```

410316071535501

```{r}
deg2rad <- function(x) {
  x * pi/180
}
 
rad2deg <- function(x) {
  x * 180/pi
}
 
deg2vec <- function(x) {
  c(sin(deg2rad(x)), cos(deg2rad(x)))
}
 
vec2deg <- function(x) {
  res <- rad2deg(atan2(x[1], x[2]))
  if (res < 0) {
    360 + res
  } else {
    res
  }
}
 
mean_vec <- function(x) {
  y <- lapply(x, deg2vec)
  Reduce(`+`, y)/length(y)
}
 
mean_deg <- function(x) {
  vec2deg(mean_vec(x))
}
 
mean_deg(c(350, 10))
mean_deg(c(90, 180, 270, 360))
mean_deg(c(10, 20, 30))
```


```{r message=T}
data_waterlevels <- vroom("./data/WATERLEVEL.csv")
```
410316071535501




```{r}
data_waterlevels <- as.data.table(data_waterlevels)
```

```{r}
data_waterlevels <- data_waterlevels %>% 
  select(-...15) %>% 
  select(-Comment)
```


```{r eval = F}
colnames(data_waterlevels)   
```



```{r}
data_waterlevels <- data_waterlevels %>% 
  rename(Original_Parameter = `Original Parameter`,
         Original_Direction = `Original Direction`, 
         Original_Unit = `Original Unit`, 
         Original_Value = `Original Value`,
         Accuracy_Unit = `Accuracy Unit`,
         Accuracy_Value = `Accuracy Value`, 
         Depth_to_WT_ft = `Depth to Water Below Land Surface in ft.`,
         Water_Level_ft = `Water level in feet relative to NAVD88`,
         Obs_Method = `Observation Method`,
         Data_Provider = `Data Provided by`)
```



```{r}
data_up <- data_waterlevels %>% 
  filter(Original_Direction == "up") %>%
  filter(Original_Value == Water_Level_ft)
```


```{r}
data_down <- data_waterlevels %>% 
  filter(Original_Direction == "down") %>%
  filter(Original_Value == Depth_to_WT_ft)
```


```{r}
data_na <- data_waterlevels %>% 
  filter(is.na(Original_Direction)) %>%
  filter(Original_Value == Depth_to_WT_ft)
```


```{r}
data_waterlevels <- bind_rows(data_up,
                              data_down,
                              data_na) %>% 
  as.data.table()
```

136486
```{r}
rm(data_down, data_up, data_na)
```



```{r message= F, warning=FALSE}
data_siteinfo <- read_csv("./data/SITE_INFO.csv") %>% 
  as.data.table()
```

```{r}
data_siteinfo <- data_siteinfo %>% 
  mutate(WellDepth = if_else(WellDepthUnitsNm == "Meters", WellDepth * 3.28084, WellDepth)) %>% 
  mutate(WellDepthUnitsNm = if_else(WellDepthUnitsNm == "Meters", "Feet", WellDepthUnitsNm)) %>% 
  
  mutate(AltVa__ft = if_else(AltUnitsNm == "Meters", AltVa * 3.28084, AltVa)) %>% 
  mutate(AltUnitsNm = if_else(AltUnitsNm == "Meters", "Feet", AltUnitsNm)) 
```


```{r}
data_siteinfo <- data_siteinfo %>% 
  rename(WellDepth__ft = WellDepth)
```


```{r}
data_siteinfo %>% 
  ggplot(aes(x = WellDepth__ft)) +
  geom_histogram()
```

```{r eval = F}
summary(data_siteinfo)
```








## Map of all sites (unconfined wells that are considered "background" wells)
Background wells are those that the USGS (or other agencies) consider to be minimally impacted by pumping
```{r}
data_siteinfo %>% 
  leaflet() %>% 
  addProviderTiles(providers$Esri.NatGeoWorldMap) %>% 
  addCircles(~DecLongVa, ~DecLatVa)
```



```{r eval = F}
data_siteinfo %>% 
  filter(WellDepth__ft <= 150) %>% 
  leaflet() %>% 
  addProviderTiles(providers$Esri.NatGeoWorldMap) %>% 
  addCircles(~DecLongVa, ~DecLatVa)
```


```{r}
data_siteinfo_select_params <- data_siteinfo %>% 
  select(SiteNo, AgencyCd, WellDepth__ft, AltVa__ft, DecLatVa, DecLongVa, StateNm, StateCd, NatAqfrDesc)
```



```{r}
data_waterlevels <- data_waterlevels %>% 
  left_join(data_siteinfo_select_params) 
```
136486

For locations where the measurement direection was "up", we need to calculate the Depth_to_WT_ft using the reported well altitude and the reported water level (elevation).  The issue is that the "reported" Depth_to_WT_ft in the original data for the "up" wells has a precision that matches the altitude's precision which is typically much much lower than the water level's precision
```{r}
data_waterlevels <- data_waterlevels %>% 
  mutate(Depth_to_WT_ft = case_when(Original_Direction == "up" ~ AltVa__ft - Water_Level_ft,
                                    Original_Direction =="down" ~ Depth_to_WT_ft,
                                    is.na(Original_Direction) ~ Depth_to_WT_ft)
         )

```



```{r}
site_summary <- data_waterlevels %>% 
  group_by(AgencyCd, SiteNo) %>% 
  summarize(WT_depth_mean = mean(Depth_to_WT_ft, na.rm = T),
            WT_depth_std = sd(Depth_to_WT_ft, na.rm = T),
            first_date = first(Time),
            last_date = last(Time),
            StateNm = first(StateNm),
            DecLatVa = first(DecLatVa),
            DecLongVa = first(DecLongVa),
            n_samples = n(),
            WellDepth__ft = first(WellDepth__ft)) %>% 
  ungroup()

```


```{r}
site_summary_select <- site_summary %>% 
  select(SiteNo, AgencyCd, n_samples)
```


Join summary info about each site to the dataset
```{r}
data_waterlevels <- data_waterlevels %>% 
  left_join(site_summary_select)
```

Write csv files for Tyler
```{r eval = F}
data_waterlevels_tyler <- data_waterlevels %>% 
  filter(Original_Unit != "m") %>% 
  select(-Accuracy_Unit, -Accuracy_Value, -Obs_Method, -Data_Provider,
         -Original_Unit, -Original_Parameter, -Original_Direction, -Original_Value)

write_csv(x = data_waterlevels_tyler, path = "./data/for_tyler/data_waterlevels.csv")
write_csv(x = data_siteinfo, path = "./data/for_tyler/site_info.csv")
```



Computate anomaly values (relative to annual mean or median for a given site and given year) for all Depth to WT observations 
```{r}
data_waterlevels <- data_waterlevels %>%   
  mutate(Year = year(Time),
         Month = month(Time)) %>% 
  
  group_by(AgencyCd, SiteNo, Year) %>% 
  mutate(Depth_to_WT_anomaly_ft = Depth_to_WT_ft - mean(Depth_to_WT_ft)) %>% 
  mutate(Depth_to_WT_anomaly_normalized = Depth_to_WT_anomaly_ft/max(abs(Depth_to_WT_anomaly_ft))) %>% 
  mutate(Depth_to_WT_median_anomaly_ft = Depth_to_WT_ft - median(Depth_to_WT_ft)) %>% 
  ungroup()
```




```{r eval = T}
state2use <- c("Massachusetts", "Florida", "Nebraska", "Montana", "Oregon", "South Carolina",
               "New York", "North Carolina", "North Dakota", "Maine", "Virginia",
               "New Jersey", "Vermont")

site_list <- site_summary %>% 
  filter(WellDepth__ft <= 100) %>% 
  filter(StateNm %in% state2use) %>% 
  group_by(StateNm) %>% 
  top_n(1, wt = n_samples) %>% 
  ungroup()

site_ids <- site_list$SiteNo

fig_a <- data_waterlevels %>% 
  filter(SiteNo %in% site_ids) %>% 
  mutate(Time = as_date(Time)) %>% 
  mutate(Month = as.factor(lubridate::month(Time))) %>% 
  ggplot(aes(x = Month, y = Depth_to_WT_anomaly_ft, group = Month, fill = Month)) +
  geom_hline(yintercept = 0, linetype = 2, color = "blue") +
  geom_boxplot(outlier.shape = NA) +
  scale_y_reverse() +
  theme_bw() +
  theme(legend.position = "none") + 
  facet_wrap(~ SiteNo, scales = "free_y")

fig_a

site_list %>% 
  select(SiteNo, StateNm)
```


```{r eval = T}
fig_a <- data_waterlevels %>% 
  filter(SiteNo %in% site_ids) %>% 
  mutate(Time = as_date(Time)) %>% 
  mutate(Month = as.factor(lubridate::month(Time))) %>% 
  ggplot(aes(x = Month, y = Depth_to_WT_anomaly_normalized, group = Month, fill = Month)) +
  geom_hline(yintercept = 0, linetype = 2, color = "blue") +
  geom_boxplot(outlier.shape = NA) +
  scale_y_reverse() +
  theme_bw() +
  theme(legend.position = "none") + 
  facet_wrap(~ SiteNo, scales = "free_y")

fig_a
```



```{r eval = T}
data_waterlevels %>% 
  filter(SiteNo %in% site_ids) %>% 
  mutate(Year = year(Time),
         day_of_year = yday(Time)) %>% 
  ggplot() +
  geom_line(aes(x = day_of_year, y = Depth_to_WT_anomaly_ft, group = Year), color = "grey") +
  geom_smooth(aes(x = day_of_year, y = Depth_to_WT_anomaly_ft), span = 1/12, method = "auto") +
  geom_vline(xintercept = 365/2, linetype = 2) + 
  scale_y_reverse() +
  theme_bw() +
  facet_wrap(~ SiteNo, scales = "free_y")
```


```{r eval = T}
data_waterlevels %>% 
  filter(SiteNo %in% site_ids) %>% 
  mutate(Year = year(Time),
         day_of_year = yday(Time)) %>% 
  ggplot() +
  geom_line(aes(x = day_of_year, y = Depth_to_WT_anomaly_normalized, group = Year), color = "grey") +
  geom_smooth(aes(x = day_of_year, y = Depth_to_WT_anomaly_normalized), span = 1/12, method = "auto") +
  geom_vline(xintercept = 365/2, linetype = 2) + 
  scale_y_reverse() +
  theme_bw() +
  facet_wrap(~ SiteNo, scales = "free_y")
```



```{r eval=FALSE}
data_waterlevels %>% 
  filter(SiteNo %in% site_ids) %>% 
  ggplot() +
  geom_line(aes(x = Time, y = Depth_to_WT_ft), color = "black") +
  #geom_smooth(aes(x = day_of_year, y = Depth_to_WT_ft), span = 1/12) +
  scale_y_reverse() +
  theme_bw() +
  facet_wrap(~ SiteNo, scales = "free_y")
```

Date of max and min WT by year (by site)
```{r eval = F}


data_waterlevels %>% 
  filter(SiteNo %in% site_ids) %>% 
  mutate(day_of_year = yday(Time)) %>% 
  group_by(AgencyCd, SiteNo, Year) %>%
  

  mutate(WT_max = min(Depth_to_WT_ft),
         WT_min = max(Depth_to_WT_ft),
         n_months = length(unique(Month)),
         n_days = length(unique(day_of_year))) %>% 
  filter(Depth_to_WT_ft == WT_max,
         n_months > 11) %>% 
  
  #mutate(day_normalized = if_else(day_of_year > 365/2, 365 - day_of_year, day_of_year),
  #       early_late = if_else(day_of_year > 365/2 , "Late", "Early")) %>% 
  
  #ggplot(aes(x = Year, y = day_normalized, fill = early_late)) +
  ggplot(aes(x = Year, y = day_of_year)) +
  geom_point(shape = 21, fill = "grey") + 
  theme_bw() +
  facet_wrap(~ SiteNo) # comment
  
```



```{r eval = F}
data_waterlevels %>% 
  filter(SiteNo %in% site_ids) %>% 
  mutate(day_of_year = yday(Time)) %>% 
  group_by(AgencyCd, SiteNo, Year) %>%
  
  mutate(WT_max = min(Depth_to_WT_ft),
         WT_min = max(Depth_to_WT_ft),
         n_months = length(unique(Month)),
         n_days = length(unique(day_of_year))) %>% 
  filter(Depth_to_WT_ft == WT_max,
         n_months > 11) %>% 
  ggplot(aes(x = as.factor(Month))) +
  geom_bar() +
  facet_wrap(~ SiteNo, scales = "free_y") 
  
```



```{r eval = F}
site_list %>% 
  leaflet() %>% 
  addProviderTiles(providers$Esri.NatGeoWorldMap) %>% 
  addMarkers(~DecLongVa, ~DecLatVa, label = ~SiteNo)
```




```{r eval = F}
table_WT_max <- data_waterlevels %>% 
  filter(SiteNo %in% site_ids) %>% 
  mutate(day_of_year = yday(Time)) %>% 
  group_by(AgencyCd, SiteNo, Year) %>%
  
  mutate(WT_max = min(Depth_to_WT_ft),
         WT_min = max(Depth_to_WT_ft),
         n_months = length(unique(Month)),
         n_days = length(unique(day_of_year))) %>% 
  filter(Depth_to_WT_ft == WT_max,
         n_months > 11) %>% 
  ungroup() %>% 
  
  group_by(AgencyCd, SiteNo) %>% 
  mutate(prop_winter = sum(Month %in% c(12,1,2))/n(),
         prop_spring = sum(Month %in% c(3,4,5))/n(),
         prop_summer = sum(Month %in% c(6,7,8))/n(),
         prop_fall = sum(Month %in% c(9,10,11))/n()
         
         ) %>% 
  summarize(prop_winter = first(prop_winter),
            prop_spring = first(prop_spring),
            prop_summer = first(prop_summer),
            prop_fall = first(prop_fall),
            num_years = n() 
            ) %>% 
  pivot_longer(cols = c(prop_winter,prop_spring,prop_fall,prop_summer),
               names_to = "Season", 
               values_to = "Proportion") %>% 
  arrange(AgencyCd, SiteNo, -Proportion) %>% 
  group_by(AgencyCd, SiteNo) %>%
  top_n(n = 1, wt = Proportion) %>% 
  mutate(season_numeric = case_when(Season == "prop_winter" ~ 1,
                                    Season == "prop_spring" ~ 2,
                                    Season == "prop_summer" ~ 3,
                                    Season == "prop_fall" ~ 4)
         )
  
```



## Compute the dominant season for the min and max water table values 
```{r}
table_WT_max_all <- data_waterlevels %>% 
  mutate(day_of_year = yday(Time)) %>% 
  group_by(AgencyCd, SiteNo, Year) %>%
  
  mutate(WT_max = min(Depth_to_WT_ft),
         WT_min = max(Depth_to_WT_ft),
         n_months = length(unique(Month)),
         n_days = length(unique(day_of_year))) %>% 
  filter(Depth_to_WT_ft == WT_max,
         n_months > 11) %>% 
  ungroup() %>% 
  
  
  group_by(AgencyCd, SiteNo) %>% 
  mutate(date_angle = (day_of_year/365)*360 ) %>% 
  mutate(mean_angle = mean_deg(date_angle)) %>% 
         
  
  mutate(prop_winter = sum(Month %in% c(12,1,2))/n(),
         prop_spring = sum(Month %in% c(3,4,5))/n(),
         prop_summer = sum(Month %in% c(6,7,8))/n(),
         prop_fall = sum(Month %in% c(9,10,11))/n()
         
         ) %>% 
  summarize(prop_winter = first(prop_winter),
            prop_spring = first(prop_spring),
            prop_summer = first(prop_summer),
            prop_fall = first(prop_fall),
            mean_angle = first(mean_angle),
            num_years = length(unique(Year)) 
            ) %>% 
  mutate(mean_angle_collapsed = if_else(mean_angle >= 180, abs(360 - mean_angle), mean_angle),
         shape_val = if_else(mean_angle >= 180, 2,1)
         ) %>% 
  
  filter(num_years > 2) %>% 
  pivot_longer(cols = c(prop_winter,prop_spring,prop_fall,prop_summer),
               names_to = "Season", 
               values_to = "Proportion") %>% 
  arrange(AgencyCd, SiteNo, -Proportion) %>% 
  group_by(AgencyCd, SiteNo) %>%
  top_n(n = 1, wt = Proportion) %>% 
  mutate(season_numeric = case_when(Season == "prop_winter" ~ 1,
                                    Season == "prop_spring" ~ 2,
                                    Season == "prop_summer" ~ 3,
                                    Season == "prop_fall" ~ 4)
         )


##
## MIN

table_WT_min_all <- data_waterlevels %>% 
  mutate(day_of_year = yday(Time)) %>% 
  group_by(AgencyCd, SiteNo, Year) %>%
  
  mutate(WT_max = min(Depth_to_WT_ft),
         WT_min = max(Depth_to_WT_ft),
         n_months = length(unique(Month)),
         n_days = length(unique(day_of_year))) %>% 
  filter(Depth_to_WT_ft == WT_min,
         n_months > 11) %>% 
  ungroup() %>% 
  
  
  group_by(AgencyCd, SiteNo) %>% 
  mutate(date_angle = (day_of_year/365)*360 ) %>% 
  mutate(mean_angle = mean_deg(date_angle)) %>% 
         
  
  mutate(prop_winter = sum(Month %in% c(12,1,2))/n(),
         prop_spring = sum(Month %in% c(3,4,5))/n(),
         prop_summer = sum(Month %in% c(6,7,8))/n(),
         prop_fall = sum(Month %in% c(9,10,11))/n()
         
         ) %>% 
  summarize(prop_winter = first(prop_winter),
            prop_spring = first(prop_spring),
            prop_summer = first(prop_summer),
            prop_fall = first(prop_fall),
            mean_angle = first(mean_angle),
            num_years = length(unique(Year)) 
            ) %>% 
  mutate(mean_angle_collapsed = if_else(mean_angle >= 180, abs(360 - mean_angle), mean_angle),
         shape_val = if_else(mean_angle >= 180, 2,1)
         ) %>% 
  
  filter(num_years > 2) %>% 
  pivot_longer(cols = c(prop_winter,prop_spring,prop_fall,prop_summer),
               names_to = "Season", 
               values_to = "Proportion") %>% 
  arrange(AgencyCd, SiteNo, -Proportion) %>% 
  group_by(AgencyCd, SiteNo) %>%
  top_n(n = 1, wt = Proportion) %>% 
  mutate(season_numeric = case_when(Season == "prop_winter" ~ 1,
                                    Season == "prop_spring" ~ 2,
                                    Season == "prop_summer" ~ 3,
                                    Season == "prop_fall" ~ 4)
         )


```




```{r}
table_WT_max_all <- table_WT_max_all %>% 
  left_join(data_siteinfo_select_params) %>% 
  filter(!is.na(DecLatVa), !is.na(DecLongVa)) %>% 
  st_as_sf(coords = c("DecLongVa", "DecLatVa"))

table_WT_min_all <- table_WT_min_all %>% 
  left_join(data_siteinfo_select_params) %>% 
  filter(!is.na(DecLatVa), !is.na(DecLongVa)) %>% 
  st_as_sf(coords = c("DecLongVa", "DecLatVa"))
```


## Maps of the timing of the water table minimum and maximum

The `mean_angle` indicates the mean time of year when the max (min) occurs.  For instance January would be from 0-30 degrees; Feb (30-60); Mar (60-90),..., Dec (330-360)

*Top map is water table max*  

*Top map is water table min*

```{r}
shape_aquifers <- st_read("./data/spatial_data/principal_aquifers/aquifrp025.shp", stringsAsFactors = FALSE) 
```

```{r}
shape_aquifers <- shape_aquifers %>% 
  mutate(ROCK_NAME = if_else(is.na(ROCK_NAME), AQ_NAME, ROCK_NAME) )
```



```{r}
tmap_mode("view") 

month_palette <- c("blue","lightblue","olivedrab",
                   "green4","olivedrab","lightcoral",
                   "red","lightcoral","orange",
                   "darkorange3","lightblue","blue")

map_max <- us_states %>% 
  tm_shape(projection = 2163) +
  tm_borders() +
  tm_shape(shape_aquifers) +
  tm_fill(col = "ROCK_NAME", alpha = 0.5, legend.show = F) +

  tm_shape(table_WT_max_all) +
  tm_dots(col = "mean_angle", size = 0.05, border.col = "black", border.lwd = 0.5, style = "fixed", 
          palette = month_palette, 
          breaks = seq(0,360, by = 360/12),
          popup.vars = c("mean_angle", "num_years", "WellDepth__ft")
             ) +
  tm_layout(title = "WT Max")

#breaks = c(0,45,90,135,180,225,270,315,360)/2


map_min <- us_states %>% 
  tm_shape(projection = 2163) +
  tm_borders() +
  tm_shape(shape_aquifers) +
  tm_fill(col = "ROCK_NAME", alpha = 0.5) +
  
  tm_shape(table_WT_min_all) +
  tm_dots(col = "mean_angle", size = 0.05, border.col = "black", border.lwd = 0.5, style = "fixed", 
          palette = month_palette, 
          breaks = seq(0,360, by = 360/12),
          popup.vars = c("mean_angle", "num_years", "WellDepth__ft")
             ) +
  tm_layout(title = "WT Min")

tmap_arrange(map_max,map_min,
             nrow = 2,
             sync = T)  
```

<br/>



```{r}
fig_table_max <- table_WT_max_all %>% 
  select(AgencyCd, SiteNo, StateNm, mean_angle, -geometry) %>% 
  rename(max_mean_angle = mean_angle) %>% 
  as.data.table() %>% 
  select(-geometry)

fig_table_min <- table_WT_min_all %>% 
  select(AgencyCd, SiteNo, StateNm, mean_angle) %>% 
  rename(min_mean_angle = mean_angle) %>% 
  as.data.table() %>% 
  select(-geometry)

fig_table_max_min <- fig_table_max %>% 
  left_join(fig_table_min) 
```







```{r}
State_List <- c("New York", "Florida", "North Dakota", "Massachusetts",
                "North Carolina", "Maryland")

fig_table_max_min %>% 
  filter(StateNm %in% State_List) %>% 
  ggplot() +
  geom_histogram(aes(x = min_mean_angle, y = stat(width*density)),
             fill = "red", shape = 21, color = "black", 
             alpha = 0.5) +
  geom_histogram(aes(x = max_mean_angle, y = stat(width*density)), 
             fill = "blue", shape = 21, color = "black",
             alpha = 0.5) +
  coord_polar(theta = "x") + 
  scale_x_continuous(breaks = c(90,180,270,360), limits = c(0,360)) +
  theme(axis.text.y = element_blank()) +
  labs(x = "Angle", y = "") +
  facet_wrap(~ StateNm)
```



```{r fig.width= 8, message= F}

fig_table_max_min %>% 
  #filter(StateNm %in% State_List) %>% 
  ggplot() +
  geom_histogram(aes(x = min_mean_angle,
                     y = ..ncount..
                     ),
             fill = "red", color = "black", 
             alpha = 0.5) +
  geom_histogram(aes(x = max_mean_angle,
                     y = ..ncount..
                     ), 
             fill = "blue", color = "black",
             alpha = 0.5) +
  coord_polar(theta = "x") + 
  scale_x_continuous(breaks = c(90,180,270,360), limits = c(0,360)) +
  labs(x = "Angle", y = "") +
  theme_bw() +
  theme(strip.text.x = element_text(size = 5)) +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank()) +
  facet_geo(~ StateNm)

```


## Map of WT min and max values
```{r}
table_WT_stats <- data_waterlevels %>% 
  ungroup() %>% 
  group_by(AgencyCd, SiteNo, Year) %>%
  summarize(WT_min = max(Depth_to_WT_ft),
            WT_max = min(Depth_to_WT_ft),
            WT_mean = mean(Depth_to_WT_ft),
            WT_range = abs(WT_max - WT_min),
            n_months = length(unique(Month))
            ) %>% 
  filter(n_months > 11) %>% 
  ungroup() %>% 
  
  group_by(AgencyCd, SiteNo) %>% 
  summarize(across(starts_with("WT"), mean, .names = "mean_{col}"),
            n_years = length(unique(Year)))
```

```{r}
table_WT_stats <- table_WT_stats %>% 
  left_join(data_siteinfo_select_params) %>% 
  filter(!is.na(DecLatVa), !is.na(DecLongVa)) %>% 
  st_as_sf(coords = c("DecLongVa", "DecLatVa"))
```



```{r}
map_max <- us_states %>% 
  tm_shape(projection = 2163) +
  tm_borders() +
  #tm_shape(shape_aquifers) +
  #tm_fill(col = "ROCK_NAME", alpha = 0.5, legend.show = F) +

  tm_shape(table_WT_stats) +
  tm_dots(col = "mean_WT_range", size = 0.05, border.col = "black", border.lwd = 0.5, style = "fixed", 
          palette = "-RdBu", 
          popup.vars = c("mean_WT_range", "n_years", "WellDepth__ft"),
          breaks = c(0,2,5,10,15,20,30),
          midpoint = 10
        
             ) +
  tm_layout(title = "WT Range")

map_max
```




```{r}
map_max <- us_states %>% 
  tm_shape(projection = 2163) +
  tm_borders() +
  #tm_shape(shape_aquifers) +
  #tm_fill(col = "ROCK_NAME", alpha = 0.5, legend.show = F) +

  tm_shape(table_WT_stats) +
  tm_dots(col = "mean_WT_max", size = 0.05, border.col = "black", border.lwd = 0.5, style = "fixed", 
          palette = "-RdBu", 
          popup.vars = c("mean_WT_max", "n_years", "WellDepth__ft"),
          breaks = c(-10,0,2,5,10,15,20),
          midpoint = 10
        
             ) +
  tm_layout(title = "WT max")

map_max
```



```{r}
table_WT_stats %>% 
  ggplot(aes(x = AltVa__ft, y = WellDepth__ft, fill = mean_WT_max)) +
  geom_point(shape = 21) +
  scale_fill_gradient(low = "blue", high = "red", oob = scales::squish,
                       limits = c(0,50)) +
  scale_x_log10() +
  scale_y_log10() +
  theme_bw()


table_WT_stats %>% 
  ggplot(aes(x = WellDepth__ft, y = mean_WT_max, fill = AltVa__ft)) +
  geom_point(shape = 21) +
  scale_fill_gradient(low = "blue", high = "red", oob = scales::squish,
                       limits = c(0,5000)) +
  scale_x_log10() +
  scale_y_log10() +
  theme_bw()



table_WT_stats %>% 
  ggplot(aes(y = mean_WT_range, x = WellDepth__ft, fill = AltVa__ft)) +
  geom_point(shape = 21) +
  scale_fill_gradient(low = "blue", high = "red", oob = scales::squish,
                       limits = c(0,5000)) +
  scale_x_log10() +
  #scale_y_log10() +
  theme_bw()


table_WT_stats %>% 
  ggplot(aes(y = mean_WT_range, x = WellDepth__ft, fill = AltVa__ft)) +
  geom_point(shape = 21) +
  scale_fill_gradient(low = "blue", high = "red", oob = scales::squish,
                       limits = c(0,5000)) +
  scale_x_log10() +
  scale_y_log10() +
  theme_bw()


table_WT_stats %>% 
  ggplot(aes(y = mean_WT_range, x = WellDepth__ft, fill = AltVa__ft)) +
  geom_point(shape = 21) +
  scale_fill_gradient(low = "blue", high = "red", oob = scales::squish,
                       limits = c(0,5000)) +
  scale_x_log10() +
  scale_y_log10() +
  theme_bw()


table_WT_stats %>% 
  ggplot(aes(y = mean_WT_range, x = mean_WT_mean, fill = AltVa__ft)) +
  geom_point(shape = 21) +
  scale_fill_gradient(low = "blue", high = "red", oob = scales::squish,
                       limits = c(0,5000)) +
  scale_x_log10() +
  scale_y_log10() +
  theme_bw()
```


```{r}
table_WT_stats %>% 
  ggplot(aes(y = mean_WT_max, x = mean_WT_min, fill = AltVa__ft)) +
  geom_point(shape = 21) +
  scale_fill_gradient(low = "blue", high = "red", oob = scales::squish,
                       limits = c(0,5000)) +
  scale_x_log10() +
  scale_y_log10() +
  theme_bw()
```




```{r eval = T}
data_waterlevels %>% 
  filter(SiteNo %in% c("433112075091501","404618098504401",
                       "260545080082001","282202081384602","422745073112001", "423058071025401")) %>% 
  ggplot(aes(x = Depth_to_WT_median_anomaly_ft, y = ..ncount.., fill = StateNm)) +
  geom_histogram() +
  theme_bw() +
  facet_wrap(~ SiteNo, scales = "free_x")
```


```{r eval = T}
data_waterlevels %>% 
  filter(SiteNo %in% c("433112075091501","404618098504401",
                       "260545080082001","282202081384602","422745073112001", "423058071025401")) %>% 
  ggplot(aes(x = Depth_to_WT_ft, y = ..ncount.., fill = StateNm)) +
  geom_histogram() +
  theme_bw() +
  facet_wrap(~ SiteNo, scales = "free_x")
```



```{r eval = T}
test_list <- c("433112075091501","404618098504401",
                       "260545080082001","282202081384602","422745073112001","385607077381101",
                       "404343099272901","353135080524202")

data_waterlevels %>% 
  filter(SiteNo %in% test_list) %>% 
  ggplot(aes(x = Depth_to_WT_median_anomaly_ft, group = SiteNo, color = StateNm)) +
  stat_ecdf(size = 1) +
  geom_vline(xintercept = 0, linetype = 2) +
  xlim(-15,15) +
  theme_bw()
  
#Depth_to_WT_median_anomaly_ft

data_waterlevels %>% 
  filter(SiteNo %in% test_list) %>% 
  ggplot(aes(x = Depth_to_WT_median_anomaly_ft, group = SiteNo, fill = StateNm)) +
  geom_histogram(alpha = 0.75,aes(y = ..ncount..)) +
  geom_vline(xintercept = 0, linetype = 2) +
  xlim(-7,7) +
  theme_bw() +
  facet_wrap(~ SiteNo)


data_waterlevels %>% 
  filter(SiteNo %in% test_list) %>% 
  mutate(Year = year(Time),
         day_of_year = yday(Time)) %>% 
  ggplot() +
  geom_line(aes(x = day_of_year, y = Depth_to_WT_median_anomaly_ft, group = Year), color = "grey") +
  geom_smooth(aes(x = day_of_year, y = Depth_to_WT_median_anomaly_ft, color = StateNm),
              span = 1/12, method = "auto") +
  geom_vline(xintercept = 365/2, linetype = 2) + 
  scale_y_reverse() +
  theme_bw() +
  facet_wrap(~ SiteNo, scales = "free_y")
```


## Extra

```{r eval =F}
table_WT_min_annual <- data_waterlevels %>% 
  mutate(day_of_year = yday(Time)) %>% 
  group_by(AgencyCd, SiteNo, Year) %>%
  
  mutate(WT_max = min(Depth_to_WT_ft),
         WT_min = max(Depth_to_WT_ft),
         n_months = length(unique(Month)),
         n_days = length(unique(day_of_year))) %>% 
  filter(Depth_to_WT_ft == WT_min,
         n_months > 11) %>% 
  ungroup() %>% 
  
  
  group_by(AgencyCd, SiteNo) %>% 
  mutate(date_angle = (day_of_year/365)*360 ) %>% 
  mutate(mean_angle = mean_deg(date_angle),
         n_years = length(unique(Year))) 
```



```{r eval =F}
table_test <- table_WT_min_annual %>% 
  left_join(data_siteinfo_select_params) %>% 
  filter(!is.na(DecLatVa), !is.na(DecLongVa)) %>% 
  st_as_sf(coords = c("DecLongVa", "DecLatVa"))
  
```

```{r eval =F}
table_test %>% 
  filter(SiteNo == "404618098504401") %>% 
  arrange(Year) %>% 
  ggplot() +
  geom_point(aes(x = Year, y = date_angle, fill = Year), shape = 21, size = 2) +
  scale_fill_viridis_c() +
  #geom_smooth(aes(x = Year, y = date_angle)) +
  #geom_line(aes(x = Year, y = date_angle)) +
  coord_polar(theta = "y") + 
  scale_y_continuous(breaks = c(90,180,270,360), limits = c(0,360)) +
  labs(x = "Angle", y = "") +
  theme_bw() 
  
  #filter(n_years >= 20) %>% 
  #filter(StateNm == "Massachusetts")
```


```{r eval =F}
data_waterlevels %>% 
  filter(SiteNo == "404618098504401") %>% 
  ggplot(aes(x = Time, y = Depth_to_WT_ft)) +
  geom_line() +
  geom_smooth(span = 1/75, method = "loess") + 
  scale_y_reverse()


data_waterlevels %>% 
  filter(SiteNo == "404618098504401") %>% 
  ggplot(aes(x = , y = Depth_to_WT_anomaly_ft, group = Year)) +
  geom_line() +
  #geom_smooth(span = 1/75, method = "loess") + 
  scale_y_reverse()
```

```{r eval =F}
test_a <- data_waterlevels %>% 
  filter(SiteNo == "404618098504401")
```

```{r eval =F}
data_waterlevels %>% 
  filter(SiteNo %in% c("433112075091501","404618098504401",
                       "260545080082001","282202081384602","422745073112001")) %>% 
  mutate(Year = year(Time),
         day_of_year = yday(Time)) %>% 
  ggplot() +
  geom_line(aes(x = day_of_year, y = Depth_to_WT_anomaly_ft, group = Year), color = "grey") +
  geom_smooth(aes(x = day_of_year, y = Depth_to_WT_anomaly_ft, color = StateNm),
              span = 1/12, method = "auto") +
  geom_vline(xintercept = 365/2, linetype = 2) + 
  scale_y_reverse() +
  theme_bw() +
  facet_wrap(~ SiteNo, scales = "free_y")
```



```{r eval =F}
data_waterlevels %>% 
  filter(SiteNo %in% c("433112075091501","404618098504401",
                       "260545080082001","282202081384602","422745073112001")) %>% 
  mutate(Year = year(Time),
         day_of_year = yday(Time)) %>% 
  ggplot() +
  geom_violin(aes(x = 1, y = Depth, fill = StateNm), color = "grey", alpha = 0.5) +
  geom_hline(yintercept = 0) +
  scale_y_reverse() +
  theme_bw() +
  facet_wrap(~ SiteNo)
```

```{r eval =F}
sites_test <- site_summary %>% 
  group_by(StateNm) %>% 
  top_n(n = 2, wt = n_samples) %>% 
  filter(StateNm %in% c("Massachusetts", "New York", "Florida", "Nebraska", "North Dakota"))
```



```{r eval =F}
test_list <- c("433112075091501","404618098504401",
                       "260545080082001","282202081384602","422745073112001","385607077381101",
                       "404343099272901","353135080524202")

data_waterlevels %>% 
  filter(SiteNo %in% sites_test$SiteNo) %>% 
  ggplot(aes(x = Depth_to_WT_median_anomaly_ft, group = SiteNo, color = StateNm)) +
  stat_ecdf(size = 1) +
  geom_vline(xintercept = 0, linetype = 2) +
  xlim(-15,15) +
  theme_bw()
  
#Depth_to_WT_median_anomaly_ft

data_waterlevels %>% 
  filter(SiteNo %in% sites_test$SiteNo) %>% 
  ggplot(aes(x = Depth_to_WT_median_anomaly_ft, group = SiteNo, fill = StateNm)) +
  geom_histogram(alpha = 0.75,aes(y = ..ncount..)) +
  geom_vline(xintercept = 0, linetype = 2) +
  xlim(-7,7) +
  theme_bw() +
  facet_wrap(~ SiteNo)


data_waterlevels %>% 
  filter(SiteNo %in% sites_test$SiteNo) %>% 
  mutate(Year = year(Time),
         day_of_year = yday(Time)) %>% 
  ggplot() +
  geom_line(aes(x = day_of_year, y = Depth_to_WT_median_anomaly_ft, group = Year), color = "grey") +
  geom_smooth(aes(x = day_of_year, y = Depth_to_WT_median_anomaly_ft, color = StateNm),
              span = 1/12, method = "auto") +
  geom_vline(xintercept = 365/2, linetype = 2) + 
  scale_y_reverse() +
  theme_bw() +
  facet_wrap(~ SiteNo, scales = "free_y")
```

```{r eval =F}
a <- data_waterlevels %>% 
  filter(SiteNo == "255600080270001")
```




```{r eval =F}

data_waterlevels %>% 
  filter(SiteNo %in% c("433112075091501","404618098504401",
                       "260545080082001","282202081384602")) %>% 
  mutate(Year = year(Time),
         day_of_year = yday(Time)) %>% 
  ggplot() +
  geom_line(aes(x = day_of_year, y = Depth_to_WT_median_anomaly_ft, group = Year), color = "grey") +
  geom_smooth(aes(x = day_of_year, y = Depth_to_WT_median_anomaly_ft), span = 1/12, method = "auto") +
  coord_polar(theta = "x") + 
  scale_x_continuous(breaks = c(90,180,270,360), limits = c(0,365)) +
  #geom_vline(xintercept = 365/2, linetype = 2) + 
  scale_y_reverse() +
  theme_bw() +
  facet_wrap(~ SiteNo)
```


```{r eval =F}
data_waterlevels %>% 
  filter(SiteNo %in% c("433112075091501","404618098504401",
                       "260545080082001","282202081384602","422745073112001", "423058071025401")) %>% 
  ggplot(aes(x = Depth_to_WT_median_anomaly_ft, y = ..ncount.., fill = StateNm)) +
  geom_histogram() +
  theme_bw() +
  facet_wrap(~ SiteNo, scales = "free_x")
```


```{r eval =F}
data_waterlevels %>% 
  filter(SiteNo %in% c("433112075091501","404618098504401",
                       "260545080082001","282202081384602","422745073112001", "423058071025401")) %>% 
  ggplot(aes(x = Depth_to_WT_ft, y = ..ncount.., fill = StateNm)) +
  geom_histogram() +
  theme_bw() +
  facet_wrap(~ SiteNo, scales = "free_x")
```


```{r eval =F}
stats::decompose(test_a)
```

