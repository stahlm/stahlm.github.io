---
title: "R Notebook"
output: html_notebook
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo=T, warning=FALSE, message=FALSE)
```


## Load in required packages
First let's load in the packages that we'll use in our analysis.  These packages provide us with tools and additional functionality that will make it easier to conduct our analysis.
```{r}
library(tidyverse)
library(tigris)
library(leaflet)
library(sf)
```

<br/>

## Load in dataset
Today we are going to use data on lead (Pb) in drinking water in New York State schools.  The data is from the New York State Department of Health and can be [accessed here](https://health.data.ny.gov/Health/Lead-Testing-in-School-Drinking-Water-Sampling-and/rkyy-fsv9).  We've also added some additional data (income and racial/ethnic breakdown of the population) from the US Census Bureau.  

Now let's load in the data that we will use in our analysis.  

The code below loads in a **csv** file (essentially an Excel file) with the data and converts it into a data table in R.
```{r}
Pb_data <- read_csv("https://github.com/stahlm/Hackathon_2020/raw/master/data/Lead_schools_hackathon_dataset.csv") 
```


In the above code the function `read_csv()` reads in the specified file and then assigns it to a data object that we are calling `Pb_data`.  Note that the `<-` is essentially acting as an equals sign.  


<<br/>

## Let's take a look at the data
Before we do any analysis we should take a look at the data to make sure it loaded in correctly and that we understand the general contents of the dataset.  The `head()` function allows us to preview the first few rows of the dataset.  
```{r}
head(Pb_data)
```

You can see that each of the columns stores a variable (e.g. School, County,...) and each row stores an observation (i.e. data on an individual school).  

We can also get some basic info and statistics for each of the columns (variables) by using the `summary()` function.  
```{r}
summary(Pb_data)
```

Below is a quick overview of what each of the columns (variables) represents  

+ **School**: School's name
+ **Type_of_Organization**: Whether the school is a vocational (BOCES School) or traditional/non-vocational (Public School)
+ **County**: County school is located in
+ **School_District**: School district school is located in 
+ **School_City**: City school is located in
+ **School_Zip_Code**: School's zip code
+ **School_Street**: School's street address
+ **Number_of_Outlets_LT_15_ppb**: The number of outlets (i.e. faucets/fountains) that had lead concentrations less than 15 ppb
+ **Number_of_Outlets_GT_15_ppb**: The number of outlets (i.e. faucets/fountains) that had lead concentrations greater than 15 ppb
+ **Any_Buildings_with_Lead_Free_Plumbing**: Does the school building have pipes that are lead free (if yes = "This school has one or more lead-free buildings"; if no = "No")
+ **Out_of_Service**: Are the outlets that test greater than 15 ppb lead still being used (if yes = "Yes"; if no = "No")
+ **Latitude**: The latitude of the county the school is located in
+ **Longitude**: The longitude of the county the school is located in
+ **Median_HH_income**: The median household income for the zip-code that the school is located in
+ **County_population**: The total population of the county the school is located in
+ **County_White**: The population of people who identify as White in the school's county
+ **County_Black_AfAm**: The population of people who identify as Black/African-American in the school's county
+ **County_Asian**: The population of people who identify as Asian in the school's county
+ **County_Hispanic_Latino**: The population of people who identify as Hispanic/Latino in the school's county


<br/>


## Let's add some additional columns (variables)
Let's create a few new columns (variables) that will likely be useful in your analysis.  The `mutate()` function allows us to add a new variable.  

We'll add a variable that reports the total number of outlets tested in each school.  This is simply the sum of the number of outlets that tested below 15 ppb (`Number_of_Outlets_LT_15_ppb`) and the number of outlets that tested above 15 ppb lead (`Number_of_Outlets_GT_15_ppb`).

### Total number of outlets in each school
```{r}
Pb_data <- Pb_data %>% 
  mutate(Total_Outlets = Number_of_Outlets_LT_15_ppb + Number_of_Outlets_GT_15_ppb)
```

Let's examine the code above to better understand what is going on.  First we send the dataset `Pb_data` to the `mutate()` function - this allows us to perform operations on the `Pb_data` dataset using the `mutate()` function.  We used the **pipe** operator `%>%`, which is R code for sending data to a function.  

Within the `mutate()` function you can see that we defined our new variable `Total_Outlets` as a funtion of existing variables from the `Pb_data` dataset.  

It is also important to note that we saved the changes that we made by reassigning the dataset (using `<-`) to the `Pb_data` object.  

<br/>

### Percent of outlets above 15 ppb Pb (in each school)
Let's also compute the percentage of outlets that exceed 15 ppb lead for each of the schools.  This will be a great variable to use to compare between schools and to see which schools are "worse off" with respect to lead contamination in their drinking water.  We'll call this new variable `Percent_Outlets_GT_15_ppb`.  

```{r}
Pb_data <- Pb_data %>% 
  mutate(Percent_Outlets_GT_15_ppb = 100*(Number_of_Outlets_GT_15_ppb/Total_Outlets))
```



<br/>

### County racial/ethnic demographics (each group expressed as percent of total population)
Let's also compute the racial/ethnic percentages for the counties that each of the schools are located in.  This might be useful info when examining if certain groups of people are disproportionately affected by lead in their drinking water.   
```{r}
Pb_data <- Pb_data %>% 
  mutate(Percent_White = 100*County_White/County_population,
         Percent_AfAm = 100*County_Black_AfAm/County_population,
         Percent_Asian = 100*County_Asian/County_population,
         Percent_Latino = 100*County_Hispanic_Latino/County_population)
```



<br/> 

## Initial analysis 
Let's begin with some exploratory analysis, which will help us identify interesting features of the data.  A great way to explore data is by creating plots (figures).  We'll use the `ggplot` package and its associated functions to create figures.  
First let's have a quick look at how `ggplot` works

When we construct a graph in `ggplot` the three essential components of a graphic are:

1. `data`: dataset containing the mapped variables
2. `geom`: geometric object that the data is mapped to (_e.g._ point, lines, bars, ...)
3. `aes`: aesthetic attributes of the geometric object.  The aesthetics control how the data variables are mapped to the geometric objects (e.g. x/y position, size, shape, color, ...)  


The basic template for creating a graphic in `ggplot2` is 

```{r eval = FALSE}
ggplot(data = DATASET) + GEOM_FUNCTION(mapping = aes(MAPPINGS) )
```

<br/>


- Where:  
    - **DATASET** is the name of the data object where your data is stored  
    - **GEOM_FUNCTION** is the `geom` function you want to use (_e.g._ `geom_point()`)  
    - **MAPPINGS** are the specifications for how you want to map your data to the `geom` (_e.g._ `x = Percent_Outlets_GT_15_ppb, y = Median_HH_income, color = County`)  
 
<br/> 

You can also set the `aes`thetic to be **global** (_i.e._ will apply to all of the `geoms` associated with that `ggplot` call) by defining the `aes` right in the `ggplot` call.  For instance
```{r eval = FALSE}
ggplot(data = DATASET, mapping = aes(MAPPINGS)) + GEOM_FUNCTION()
```


### Make your first plot

#### Histogram
A nice plot to make is a histogram that shows us the distribution (i.e. how many schools) of the percent of outlets that exceed 15 ppb lead.  

We'll use the `ggplot()` function to create our figure.  In the `ggplot()` function we specify the variable we would like to plot.  This is done in the 

```{r}
Pb_data %>% 
  ggplot(aes(x = Percent_Outlets_GT_15_ppb)) +
  geom_histogram() +
  theme_bw()
```

<br/>

From the figure above we can see that many of the schools have ~ 0% of their faucets/fountains that exceed 15 ppb lead.  We can also see that only a very small proportion of schools have more than 25% of their faucets/fountains in exceedence of 15 ppb lead.  

<br/>

#### Scatter plot
Now let's make a scatter plot.  Since it is reasonable to hypothesize that the wealth of a school district might influence the likelihood of lead contamination in the water, let's create a scatter plot of the median household income (for the zip-code area of each school) vs. the percent of outlets that exceed 15 ppb lead.  

You can see that we defined the mapping of each variable in the `aes()` portion of the code.  We specified that we wanted to create a scatter plot by using the `geom_point()` function.  

```{r}
Pb_data %>% 
  #filter(County %in% c("Schenectady", "Albany", "Montgomery", "Rensselaer", "Kings", "Bronx")) %>% 
  ggplot(aes(x = Median_HH_income, y = Percent_Outlets_GT_15_ppb)) +
  geom_point() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) 
  #facet_wrap(~ County)
```

<br/>

In the above graphic each point represents an individual school.  Based on the figure it does not look like there is a straightforward relationship between income level of the community around the school and the degree of lead contamination in a school's drinking water.  However, there are lots of data on the above figure and it is possible that there could be a relationship in some areas/counties but it is hidden when we look at all of the data at once.

Let's focus on just a few counties.  To do this we will `filter()` the data.  The `filter()` function allows us to select subsets of the data to work with.  In this case will will only select observations (schools) that are within the counties we are interested in.  

In the code below we `filter()` the data based on the `County` variable.  Here we only look at Schenectady, Albany, Montgomery, Rensselaer, Kings, and Bronx counties.  You could change the code below to select other counties of interest if you so choose.  You can also see that we used the `facet_wrap()` function.  This function creates a separate figure by group (in this case we will create a separate figure for each `County`).  


```{r}
Pb_data %>% 
  filter(County %in% c("Schenectady", "Albany", "Montgomery", "Rensselaer", "Kings", "Bronx")) %>% 
  ggplot(aes(x = Median_HH_income, y = Percent_Outlets_GT_15_ppb, color = County)) +
  geom_point() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
  facet_wrap(~ County)
```

<br/>

This figure is really helpful.  For example, it shows us that there may be a slight negative relationship between income level and degree of contamination within Schenectady county.  We also see that in Bronx county, the level of lead contamination is uniformly low across all levels of income.  

<br/>

### Summary tables
Summarizing your data by groups is a particularly useful exercise and often helps to reveal interesting patterns and allows for you to distill a large dataset down into a format more amenable to gaining an overall understanding of the data.  For instance, you might be interested in which counties are the most (and least) heavily impacted by lead contamination in school drinking water.  

In the dataset we are using each observation (row) is an individual school.  It would be helpful to group the schools by county and then summarize the data by county.  This way we can see the proportion of faucets/fountains that exceed 15 ppb lead for each of the counties in New York state.  

We can easily do this.  First we will use the `group_by()` function and specify that we want to group by the `County` variable.  Once this grouping has been done, then all subsequent operations will be performed group-wise.  

Next, we will use the `summarize()` function, which will allow us to specify the new variables (columns) we would like to create (based on the grouped data).  We will create a column with the total number of outlets in each county `Total_Outlets` and a column with the percent of outlets that exceed 15 ppb lead in each county `Percent_Outlets_GT_15_ppb`.  We'll use the `arrange()` function to sort our summary table from highest-to-lowest county based on the percent of outlets that exceed 15 ppb.  

We will assign this new dataset to an object called `County_Summary`.  

```{r}
County_Summary <- Pb_data %>% 
  group_by(County) %>% 
  summarize(Total_Outlets = sum(Number_of_Outlets_LT_15_ppb, Number_of_Outlets_GT_15_ppb, na.rm = T),
            Percent_Outlets_GT_15_ppb = round(100*sum(Number_of_Outlets_GT_15_ppb, na.rm = T)/Total_Outlets, 2)) %>% 
  arrange(desc(Percent_Outlets_GT_15_ppb))
  #ggplot(aes(x = reorder(County, Percent_Outlets_GT_15_ppb) , y = Percent_Outlets_GT_15_ppb)) +
  #geom_point() +
  #theme_bw() +
  #theme(axis.text.x = element_text(angle = 60, hjust = 1)) 

County_Summary
  
```

<br/>

This table is really useful.  We have identified the most and least affected counties.  This type of information would be helpful to the local and state government when thinking about where to focus resources for improving water quality in schools.  

Now that you have your summary table saved to the data object `County_Summary` you can create figures with and perform additional analysis on this table.  


```{r}
#ri <- counties("NY")
ri20 <- counties("NY", cb = TRUE, resolution = "20m")
plot(ri20)
plot(ri20, border = "red", add = TRUE)
```

```{r}
a <- st_as_sf(ri20) %>% 
  rename(County = NAME)
```


```{r}
a_test <- Pb_data %>% 
  group_by(County) %>% 
  summarize(Total_Outlets = sum(Number_of_Outlets_LT_15_ppb, Number_of_Outlets_GT_15_ppb, na.rm = T),
            Percent_Outlets_GT_15_ppb = 100*sum(Number_of_Outlets_GT_15_ppb, na.rm = T)/Total_Outlets,
            Latitude = first(Latitude),
            Longitude = first(Longitude),
            HH_Income = median(Median_HH_income, na.rm = T))
```

```{r}
a <- left_join(a, a_test)
```



```{r}
Pb_data %>% 
  group_by(County) %>% 
  summarize(Total_Outlets = sum(Number_of_Outlets_LT_15_ppb, Number_of_Outlets_GT_15_ppb, na.rm = T),
            Percent_Outlets_GT_15_ppb = 100*sum(Number_of_Outlets_GT_15_ppb, na.rm = T)/Total_Outlets,
            Latitude = first(Latitude),
            Longitude = first(Longitude)) %>% 
  
  leaflet() %>% 
  addTiles() %>% 
  addMarkers(lng = ~Longitude, lat = ~Latitude)
  
```



```{r}
leaflet(a) %>%
  addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5, popup = ~ paste(County, round(HH_Income,2)),
    opacity = 1.0, fillOpacity = 0.5,
    fillColor = ~colorQuantile("YlOrRd", HH_Income)(HH_Income),
    highlightOptions = highlightOptions(color = "white", weight = 2,
      bringToFront = TRUE)) %>% 
  addTiles()
```



```{r}
leaflet(a) %>%
  addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5, popup = ~ paste(County, round(Percent_Outlets_GT_15_ppb,2)),
    opacity = 1.0, fillOpacity = 0.5,
    fillColor = ~colorQuantile("YlOrRd", Percent_Outlets_GT_15_ppb)(Percent_Outlets_GT_15_ppb),
    highlightOptions = highlightOptions(color = "white", weight = 2,
      bringToFront = TRUE)) %>% 
  addTiles()
```


