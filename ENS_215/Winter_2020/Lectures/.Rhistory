group_by(Year, Month) %>%
summarize(flow_stat = min(flow_cfs, na.rm = T)) %>%
ungroup() %>%
mutate(Year = 1 + Year - min(Year)) %>%
ggplot(aes(x = Year, y = flow_stat)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw() +
facet_wrap(~ Month, scales = "free_y")
streamflows <- read_csv("https://stahlm.github.io/ENS_215/Data/Hud_Mow_streamflow_data.csv") %>%
filter(flow_cfs >= 0,
lubridate::year(dateTime) >= 1950) %>%
mutate(Month = lubridate::month(dateTime),
Year = lubridate::year(dateTime)) %>%
select(dateTime, Year, Month, site_no, flow_cfs)
streamflows %>%
filter(site_no == "01357500") %>%
group_by(Year, Month) %>%
summarize(flow_stat = max(flow_cfs, na.rm = T)) %>%
ungroup() %>%
mutate(Year = 1 + Year - min(Year)) %>%
ggplot(aes(x = Year, y = flow_stat)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw() +
facet_wrap(~ Month, scales = "free_y")
streamflows <- read_csv("https://stahlm.github.io/ENS_215/Data/Hud_Mow_streamflow_data.csv") %>%
filter(flow_cfs >= 0,
lubridate::year(dateTime) >= 1950) %>%
mutate(Month = lubridate::month(dateTime),
Year = lubridate::year(dateTime)) %>%
select(dateTime, Year, Month, site_no, flow_cfs)
streamflows %>%
filter(site_no == "01357500") %>%
group_by(Year, Month) %>%
summarize(flow_stat = mean(flow_cfs, na.rm = T)) %>%
ungroup() %>%
mutate(Year = 1 + Year - min(Year)) %>%
ggplot(aes(x = Year, y = flow_stat)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw() +
facet_wrap(~ Month, scales = "free_y")
library(tidyverse)
precip_MA <- read_csv("https://stahlm.github.io/ENS_215/Data/precip_MA.csv")
precip_NY <- read_csv("https://stahlm.github.io/ENS_215/Data/precip_NY.csv")
precip_combined <- bind_rows(precip_MA, precip_NY)
# Your code here
# Your code here
dates_EPA <- read_csv("https://stahlm.github.io/ENS_215/Data/Sampling_dates_EPA_fish_tissue.csv")
dates_USGS <- read_csv("https://stahlm.github.io/ENS_215/Data/Sampling_dates_USGS_water_quality.csv")
dates_common <- intersect(dates_EPA, dates_USGS)
dates_only_USGS <- setdiff(dates_USGS, dates_EPA)
# Your code here
dates_USGS_EPA <- union(dates_USGS, dates_EPA)
years_USGS <- select(dates_USGS, Year)
months_days_USGS <- select(dates_USGS, Month, Day)
bind_example <- bind_cols(years_USGS, months_days_USGS)
head(bind_example)
temperature_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
temperature_data <- filter(temperature_data, !(Year == 2016 & state_cd == "NY")) # remove datas for NY in year 2016
library(kableExtra)
head(precip_combined) %>%
kable() %>%
kable_styling(bootstrap_options = "condensed", position = "center") %>%
column_spec(column = c(1,2,4), background = "yellow") %>%
column_spec(column = c(3), background = "lightgrey")
head(temperature_data) %>%
kable() %>%
kable_styling(bootstrap_options = "condensed", position = "center") %>%
column_spec(column = c(1,2,4), background = "yellow") %>%
column_spec(column = c(3), background = "lightgrey")
climate_data <- inner_join(precip_combined, temperature_data)
head(climate_data)  %>%
kable() %>%
kable_styling(bootstrap_options = "condensed", position = "center")
climate_data <- left_join(precip_combined, temperature_data)
regions_data <- read_csv("https://stahlm.github.io/ENS_215/Data/state_regions.csv")
regions_data <- mutate(regions_data, state_cd = State_abb)
a<- left_join(climate_data, regions_data)
# Your code here
# Your code here
library(gapminder)
my_gap <- gapminder
dams_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Dams_FAO_SelectCols_LabData.csv")
dams_data <- rename(dams_data, country = Country)
my_gap <- filter(my_gap, year == 2007) %>%
select(-lifeExp, -continent, -year)
dams_enhanced <- left_join(dams_data, my_gap)
View(dams_enhanced)
glimpse(dams_data)
library(tidyverse)
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Precip_LabData.csv")
ny_precip <- filter(precip_data, state_cd == "NY")
# Your code here
ny_precip <- ny_precip %>%
mutate(time_period = if_else(Year >= 1950,"Post-1950","Pre-1950"))
quantile(ny_precip$Precip_inches, probs = c(0.001, 0.25, 0.50, 0.75, 0.95))
ny_precip %>%
mutate(frac = cume_dist(Precip_inches))
#arrange(Precip_inches) %>%
#mutate(quant = (seq(1,nrow(ny_precip)) - 0.5)/nrow(ny_precip))
var_example <- tibble(A = rnorm(200, 5, 0.10), B = rnorm(200, 5, 0.75)) %>%
gather(`A`,`B`, key = "Group", value = "Measurement")
var_example %>% ggplot(aes(x = Group, y = Measurement, fill = Group)) +
geom_jitter(height = 0, width = 0.2, shape = 21, size = 2) +
theme_classic()
quantile(ny_precip$Precip_inches, probs = 0.75) - quantile(ny_precip$Precip_inches, probs = 0.25) # using quantile
IQR(ny_precip$Precip_inches) # using IQR function
shape_symm <- tibble(x= rnorm(5*10^5, mean = 0, sd = 1))
shape_symm %>% ggplot(aes(x)) +
geom_density(fill = "gray") +
theme_classic() +
labs(title = "Unimodal distribution",
x = "",
y = ""
)
shape_symm <- tibble(x= c(rnorm(5*10^5, mean = -2, sd = 0.75), rnorm(5*10^5, mean = 2, sd = 0.75)) )
shape_symm %>% ggplot(aes(x)) +
geom_density(fill = "gray") +
theme_classic() +
labs(title = "Bimodal distribution",
x = "",
y = ""
)
shape_symm <- tibble(x= rnorm(5*10^5, mean = 0, sd = 1))
shape_symm %>% ggplot(aes(x)) +
geom_density(fill = "gray") +
theme_classic() +
labs(title = "Symmetric distribution",
x = "",
y = ""
)
shape_right <- tibble(x = rgamma(5*10^5, shape = 2, rate = 10))
shape_right %>% ggplot(aes(x)) +
geom_density(fill = "gray") +
theme_classic() +
labs(title = "Right-skewed",
x = "",
y = ""
)
shape_left <- tibble(x = rgamma(5*10^5, shape = 2, rate = 10))
shape_left %>% ggplot(aes(-x)) +
geom_density(fill = "gray") +
theme_classic() +
labs(title = "Left-skewed",
x = "",
y = ""
)
ny_precip %>%
ggplot(aes(group = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "lightblue") +
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.25, width = 0.15, height = 0) +
theme_classic()
ny_precip %>%
ggplot(aes(x = time_period, y = Precip_inches)) +
geom_boxplot(fill = "lightblue", notch = TRUE) +
theme_classic()
precip_data %>% group_by(state_cd) %>%
summarize(p_25 = quantile(Precip_inches, probs = 0.25), p_50 = median(Precip_inches),
p_75 = quantile(Precip_inches, probs = 0.75)) %>%
ggplot() +
geom_point(aes(y = reorder(state_cd, p_50), x = p_50 )) +
geom_point(aes(y = state_cd, x = p_25), shape = 21, fill = "red") +
geom_point(aes(y = state_cd, x = p_75), shape = 21, fill = "blue") +
theme_classic() +
labs(title = "US states precipition quartiles",
y = "",
x = "Monthly precipitation (inches)",
caption = "25th (red), 50th (black), 75th (blue)")
precip_data %>% group_by(state_cd) %>%
summarize(p_25 = quantile(Precip_inches, probs = 0.25), p_50 = median(Precip_inches),
p_75 = quantile(Precip_inches, probs = 0.75)) %>%
ggplot() +
geom_point(aes(y = reorder(state_cd, p_50), x = p_50 )) +
geom_point(aes(y = state_cd, x = p_25), shape = 21, fill = "red") +
geom_point(aes(y = state_cd, x = p_75), shape = 21, fill = "blue") +
theme_classic() +
labs(title = "US states precipition quartiles",
y = "",
x = "Monthly precipitation (inches)",
caption = "25th (red), 50th (black), 75th (blue)")
precip_data %>% group_by(state_cd) %>%
summarize(p_25 = quantile(Precip_inches, probs = 0.25), p_50 = median(Precip_inches),
p_75 = quantile(Precip_inches, probs = 0.75)) %>%
ggplot() +
geom_point(aes(y = reorder(state_cd, p_50), x = p_50 )) +
geom_point(aes(y = state_cd, x = p_25), shape = 21, fill = "red") +
geom_point(aes(y = state_cd, x = p_75), shape = 21, fill = "blue") +
theme_classic() +
labs(title = "US states precipition quartiles",
y = "",
x = "Monthly precipitation (inches)",
caption = "25th (red), 50th (black), 75th (blue)")
precip_data %>% group_by(state_cd) %>%
summarize(p_25 = quantile(Precip_inches, probs = 0.25), p_50 = median(Precip_inches),
p_75 = quantile(Precip_inches, probs = 0.75)) %>%
ggplot() +
geom_point(aes(y = reorder(state_cd, p_50), x = p_50 )) +
geom_point(aes(y = state_cd, x = p_25), shape = 21, fill = "red") +
geom_point(aes(y = state_cd, x = p_75), shape = 21, fill = "blue") +
theme_classic() +
labs(title = "US states precipition quartiles",
y = "",
x = "Monthly precipitation (inches)",
caption = "25th (red), 50th (black), 75th (blue)")
precip_data %>% group_by(state_cd) %>%
summarize(p_25 = quantile(Precip_inches, probs = 0.25), p_50 = median(Precip_inches),
p_75 = quantile(Precip_inches, probs = 0.75)) %>%
ggplot() +
geom_point(aes(y = reorder(state_cd, p_50), x = p_50 )) +
geom_point(aes(y = state_cd, x = p_25), shape = 21, fill = "red") +
geom_point(aes(y = state_cd, x = p_75), shape = 21, fill = "blue") +
theme_classic() +
xlim()
precip_data %>% group_by(state_cd) %>%
summarize(p_25 = quantile(Precip_inches, probs = 0.25), p_50 = median(Precip_inches),
p_75 = quantile(Precip_inches, probs = 0.75)) %>%
ggplot() +
geom_point(aes(y = reorder(state_cd, p_50), x = p_50 )) +
geom_point(aes(y = state_cd, x = p_25), shape = 21, fill = "red") +
geom_point(aes(y = state_cd, x = p_75), shape = 21, fill = "blue") +
theme_classic() +
xlim() +
labs(title = "Monthly Precipition Quartiles",
subtitle = "US States",
y = "",
x = "Monthly precipitation (inches)",
caption = "25th (red), 50th (black), 75th (blue)")
precip_data %>% group_by(state_cd) %>%
summarize(p_25 = quantile(Precip_inches, probs = 0.25), p_50 = median(Precip_inches),
p_75 = quantile(Precip_inches, probs = 0.75)) %>%
ggplot() +
geom_point(aes(y = reorder(state_cd, p_50), x = p_50 )) +
geom_point(aes(y = state_cd, x = p_25), shape = 21, fill = "red") +
geom_point(aes(y = state_cd, x = p_75), shape = 21, fill = "blue") +
theme_classic() +
xlim(0,6) +
labs(title = "Monthly Precipition Quartiles",
subtitle = "US States",
y = "",
x = "Monthly precipitation (inches)",
caption = "25th (red), 50th (black), 75th (blue)")
precip_data %>% group_by(state_cd) %>%
summarize(p_25 = quantile(Precip_inches, probs = 0.25), p_50 = median(Precip_inches),
p_75 = quantile(Precip_inches, probs = 0.75)) %>%
ggplot() +
geom_point(aes(y = reorder(state_cd, p_50), x = p_50 )) +
geom_point(aes(y = state_cd, x = p_25), shape = 21, fill = "red") +
geom_point(aes(y = state_cd, x = p_75), shape = 21, fill = "blue") +
theme_classic() +
xlim(0,7) +
labs(title = "Monthly Precipition Quartiles",
subtitle = "US States",
y = "",
x = "Monthly precipitation (inches)",
caption = "25th (red), 50th (black), 75th (blue)")
library(tidyverse)
library(stats)
# packages for code used to generate content in this lecture
library(ggExtra)
library(gridExtra)
library(ggrepel)
batch_A <- rnorm(500, mean = 8, sd = 2)
batch_B <- rnorm(1000, mean = 12, sd = 1)
q_v <- seq(0.05,1, by = 0.05)
q_v2 <- seq(0.1,1, by = 0.1)
fig_A <- ggplot() +
geom_point(aes(x = q_v, y = quantile(batch_A, probs = q_v)), size = 2 ) +
geom_text_repel(aes(x = q_v2, y = quantile(batch_A, probs = q_v2),label = q_v2),
nudge_y      = 1,
direction = "y",
hjust        = 1,
segment.size = 0.2) +
theme_classic() +
labs(x = "f-value",
y = "Observed value",
title = "Quantile plot: Batch A") +
xlim(0,1) +
ylim(4,16)
fig_B <- ggplot() +
geom_point(aes(x = q_v, y = quantile(batch_B, probs = q_v)), size = 2 ) +
geom_text_repel(aes(x = q_v2, y = quantile(batch_B, probs = q_v2),label = q_v2),
nudge_y      = 1,
direction = "y",
hjust        = 1,
segment.size = 0.2) +
theme_classic() +
labs(x = "f-value",
y = "Observed value",
title = "Quantile plot: Batch B") +
xlim(0,1) +
ylim(4,16)
grid.arrange(fig_A, fig_B, ncol = 2)
ggplot() +
geom_point(aes(x = quantile(batch_A, probs = q_v), y = quantile(batch_B, probs = q_v)), size = 2) +
geom_text_repel(aes(x = quantile(batch_A, probs = q_v2), y = quantile(batch_B, probs = q_v2), label = q_v2),
nudge_y      = 1,
direction = "y",
hjust        = 1,
segment.size = 0.2) +
geom_abline(slope = 1, intercept = 0) +
xlim(4,16) +
ylim(4,16) +
coord_equal() +
theme_classic() +
labs(title = "Q-Q Plot",
subtitle = "Batches A and B",
x = "Batch A: Observed Value",
y = "Batch B: Observed Value")
vec_a <- rnorm(5000, mean = 0, sd = 1)
vec_b <- rnorm(5000, mean = 0, sd = 1)
p <- ggplot() +
geom_point(aes(x = vec_a, y = vec_b), alpha = 0.15) +
theme_classic() +
coord_equal()
grid.arrange(ggMarginal(p, type="density", fill = "grey") , ncol = 1)
q_v <- seq(0,1, by = 0.05) # vector of f-values that we will use to specify quantiles to compute in code below
ggplot() +
geom_point(aes(x = quantile(vec_a, probs = q_v), y = quantile(vec_b, probs = q_v)), size = 2) +
geom_abline(slope = 1, intercept = 0) +
theme_classic() +
labs(title = "Q-Q plot",
x = "A",
y = "B") +
coord_equal() # sets the axis scales equal, which makes Q-Q plot easier to read
vec_a <- rnorm(500, mean = 0, sd = 1)
vec_b <- rnorm(500, mean = 0, sd = 1)
q_v <- seq(0,1, by = 0.05) # vector of f-values that we will use to specify quantiles to compute in code below
ggplot() +
geom_point(aes(x = quantile(vec_a, probs = q_v), y = quantile(vec_b + 2, probs = q_v)), size = 2) +
geom_abline(slope = 1, intercept = 0) +
theme_classic() +
labs(title = "Q-Q plot",
x = "A",
y = "B") +
coord_equal() # sets the axis scales equal, which makes Q-Q plot easier to read
vec_a <- rnorm(500, mean = 0, sd = 1)
vec_b <- rnorm(500, mean = 0, sd = 1)
q_v <- seq(0,1, by = 0.05) # vector of f-values that we will use to specify quantiles to compute in code below
ggplot() +
geom_point(aes(x = quantile(vec_a, probs = q_v), y = quantile(vec_b * 2, probs = q_v)), size = 2) +
geom_abline(slope = 1, intercept = 0) +
theme_classic() +
labs(title = "Q-Q plot",
x = "A",
y = "B") +
xlim(-8,8) +
ylim(-8,8) +
coord_equal() # sets the axis scales equal, which makes Q-Q plot easier to read
vec_a <- rnorm(500, mean = 0, sd = 0.5)
vec_b <- rexp(500, rate = 2)
q_v <- seq(0,1, by = 0.05) # vector of f-values that we will use to specify quantiles to compute in code below
ggplot() +
geom_point(aes(x = quantile(vec_a, probs = q_v), y = quantile(vec_b, probs = q_v)), size = 2) +
geom_abline(slope = 1, intercept = 0) +
theme_classic() +
labs(title = "Q-Q plot",
x = "A",
y = "B") +
xlim(-3,3) +
ylim(-3,3) +
coord_equal() # sets the axis scales equal, which makes Q-Q plot easier to read
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Precip_LabData.csv")
precip_NY_RI <- precip_data %>%
filter(state_cd %in% c("NY", "RI"))
precip_NY_RI %>%
ggplot(aes(x = Precip_inches, fill = state_cd)) +
geom_density(alpha = 0.4) +
theme_classic()
precip_NY_RI %>%
group_by(state_cd) %>%
summarise_at(vars(Precip_inches), funs(mean, sd, p25 = quantile(.,probs = 0.25), p50 = median, p75= quantile(.,probs = 0.75)))
p <- seq(0, 1, by = 0.05) # f-values to use in our quantile calculations
precip_RI <- filter(precip_NY_RI, state_cd == "RI") # Rhode Island data
precip_NY <- filter(precip_NY_RI, state_cd == "NY") # NY data
q_RI <- quantile(precip_RI$Precip_inches, probs = p) # RI quantile data
q_NY <- quantile(precip_NY$Precip_inches, probs = p) # NY quantile data
ggplot() +
geom_point(aes(x = q_RI, y= q_NY)) +
geom_abline(slope = 1, intercept = 0) +
theme_classic() +
xlim(0, 16) +
ylim(0,16) +
coord_equal() +
labs(title = "Precipitation Q-Q plot",
subtitle = "New York and Rhode Island",
x = "Rhode Island Precipitation (inches)",
y = "New York Precipitation (inches)")
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
division_1 <- bangladesh_gw %>%
filter(DIVISION == "Khulna")
division_2 <- bangladesh_gw %>%
filter(DIVISION == "Dhaka")
# Your code here
q_vec <- seq(0, 1, by = 0.05)
ggplot() +
geom_point(aes(x = quantile(division_1$As_ugL, probs = q_vec), y = quantile(division_2$As_ugL, probs = q_vec)), size = 2) +
geom_abline(slope = 1, intercept = 0) +
theme_classic() +
scale_y_log10() +
scale_x_log10() +
coord_equal() +
labs(x = "Dhaka As (ug/L)",
y = "Khulna As (ug/L)",
title = "Q-Q Plot: Arsenic Data",
subtitle = "Dhaka and Khulna Divisions",
caption = "data source: BGS")
#library(gridExtra)
library(patchwork)
q_vec <- seq(-10,10, by = 10^-2)
dist_weib <- tibble(x = q_vec, y = dweibull(q_vec, shape = 2, scale = 1), dist = "Weibull")
dist_norm <- tibble(x = q_vec, y = dnorm(q_vec, mean = 0, sd = 1), dist = "Normal")
dist_exp <- tibble(x = q_vec, y = dexp(q_vec, rate = 1), dist = "Exponential")
#dists <- bind_rows(dist_norm, dist_exp)
#
#ggplot(dists, aes(x = x, y = y)) +
#  geom_area(fill = "grey") +
#  facet_wrap(~dist, ncol = 2) +
#  theme_classic()
p1 <- dist_norm %>%
ggplot(aes(x = x, y = y)) +
geom_area(fill = "grey", color = "black") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
labs(title = "Normal",
x = "",
y = "") +
xlim(-6,6)
p2 <- dist_exp %>%
ggplot(aes(x = x, y = y)) +
geom_area(fill = "grey", color = "black") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
labs(title = "Exponential",
x = "",
y = "") +
xlim(0,10)
p3 <- dist_weib %>%
ggplot(aes(x = x, y = y)) +
geom_area(fill = "grey", color = "black") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
labs(title = "Weibull",
x = "",
y = "") +
xlim(0,5)
#grid.arrange(p1, p2, p3, ncol = 3)
p1 + p2 + p3
#library(gridExtra)
library(patchwork)
q_vec <- seq(-10,10, by = 10^-2)
dist_weib <- tibble(x = q_vec, y = dweibull(q_vec, shape = 2, scale = 1), dist = "Weibull")
dist_norm <- tibble(x = q_vec, y = dnorm(q_vec, mean = 0, sd = 1), dist = "Normal")
dist_exp <- tibble(x = q_vec, y = dexp(q_vec, rate = 1), dist = "Exponential")
#dists <- bind_rows(dist_norm, dist_exp)
#
#ggplot(dists, aes(x = x, y = y)) +
#  geom_area(fill = "grey") +
#  facet_wrap(~dist, ncol = 2) +
#  theme_classic()
p1 <- dist_norm %>%
ggplot(aes(x = x, y = y)) +
geom_area(fill = "grey", color = "black") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
labs(title = "Normal",
x = "",
y = "") +
xlim(-6,6)
p2 <- dist_exp %>%
ggplot(aes(x = x, y = y)) +
geom_area(fill = "grey", color = "black") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
labs(title = "Exponential",
x = "",
y = "") +
xlim(0,10)
p3 <- dist_weib %>%
ggplot(aes(x = x, y = y)) +
geom_area(fill = "grey", color = "black") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
labs(title = "Weibull",
x = "",
y = "") +
xlim(0,5)
#grid.arrange(p1, p2, p3, ncol = 3)
p1 + p2 + p3
