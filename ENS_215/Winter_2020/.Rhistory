ggplot(aes(x = Year, y = flow_cfs)) +
geom_point() +
facet_wrap(~ Month)
# Part 3
Hudson_flow %>%
group_by(Year, Month) %>%
summarize(flow_mean = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
facet_wrap(~ Month)
# Part 3
Hudson_flow %>%
filter(Year >= 1990) %>%
group_by(Year, Month) %>%
summarize(flow_mean = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
facet_wrap(~ Month)
# Part 3
Hudson_flow %>%
filter(Year >= 1990) %>%
group_by(Year, Month) %>%
summarize(flow_mean = median(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
facet_wrap(~ Month)
# Part 3
Hudson_flow %>%
filter(Year >= 1990) %>%
group_by(Year, Month) %>%
summarize(flow_mean = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
facet_wrap(~ Month)
# Part 3
Hudson_flow %>%
filter(Year >= 1990) %>%
group_by(Year, Month) %>%
summarize(flow_mean = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
facet_wrap(~ Month, scales = "free-y")
# Part 3
Hudson_flow %>%
filter(Year >= 1990) %>%
group_by(Year, Month) %>%
summarize(flow_mean = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
facet_wrap(~ Month, scales = "free_y")
# Part 3
Hudson_flow %>%
filter(Year >= 1990) %>%
group_by(Year, Month) %>%
summarize(flow_mean = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
theme_classic() +
facet_wrap(~ Month)
# Part 3
Hudson_flow %>%
filter(Year >= 1990) %>%
group_by(Year, Month) %>%
summarize(flow_mean = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
theme_bw() +
facet_wrap(~ Month)
# Part 3
Hudson_flow %>%
filter(Year >= 1990) %>%
group_by(Year, Month) %>%
summarize(flow_mean = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
scale_y_log10() +
theme_bw() +
facet_wrap(~ Month)
# Part 3
Hudson_flow %>%
filter(Year >= 1990) %>%
group_by(Year, Month) %>%
summarize(flow_mean = max(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
scale_y_log10() +
theme_bw() +
facet_wrap(~ Month)
# Part 3
Hudson_flow %>%
filter(Year >= 1990) %>%
group_by(Year, Month) %>%
summarize(flow_mean = min(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
scale_y_log10() +
theme_bw() +
facet_wrap(~ Month)
# Part 3
Hudson_flow %>%
filter(Year >= 1980) %>%
group_by(Year, Month) %>%
summarize(flow_mean = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
scale_y_log10() +
theme_bw() +
facet_wrap(~ Month)
# Part 3
Hudson_flow %>%
filter(Year >= 1970) %>%
group_by(Year, Month) %>%
summarize(flow_mean = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
scale_y_log10() +
theme_bw() +
facet_wrap(~ Month)
# Part 2
Hudson_flow %>%
group_by(Year) %>%
summarize(flow_max = max(flow_cfs)) %>%
top_n(n = 15, wt = flow_max) %>%
arrange(-flow_max)
# Part 2
Hudson_flow %>%
group_by(Year) %>%
summarize(flow_max = max(flow_cfs, na.rm = T)) %>%
top_n(n = 15, wt = flow_max) %>%
arrange(-flow_max)
# Part 2
Hudson_flow %>%
group_by(Year) %>%
summarize(flow_max = max(flow_cfs, na.rm = T)) %>%
top_n(n = 15, wt = flow_max) %>%
arrange(-flow_max)
library(tidyverse)
earthquake_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Rocky_Mtn_Arsenal_Earthquakes.csv", skip = 2)
Hudson_flow <- read_csv("https://stahlm.github.io/ENS_215/Data/Hudson_01335754_review_class.csv")
# Your code here
max_flow <- max(Hudson_flow$Flow)
current_flow <- Hudson_flow$Flow[1]
current_row <- 1
while(current_flow < max_flow){
current_row <- current_row + 1
current_flow <- Hudson_flow$Flow[current_row]
}
print(paste("Max flow occurs on ", Hudson_flow$Year[current_row],"-", Hudson_flow$Month[current_row], "-", Hudson_flow$Day[current_row], sep = ""))
counter_var <- 1
for (i_obs in Hudson_flow$Flow) {
if (counter_var == 1) {
minimum_flow <- i_obs
} else if(i_obs < minimum_flow) {
minimum_flow <- i_obs
} else {
minimum_flow <- minimum_flow
}
counter_var <- counter_var + 1
}
library(scales)
library(lubridate)
Hudson_flow <- read_csv("https://stahlm.github.io/ENS_215/Data/Hudson_River_Streamflow.csv") %>%
filter(site_no == "01335754") %>%
rename(flow_cfs = X_00060_00003)
# 1
Hudson_flow <- Hudson_flow %>% mutate(Year = year(dateTime),
Month = month(dateTime), Day = day(dateTime)) %>%
select(site_no, Year, Month, Day, flow_cfs)
# Part 1
Hudson_table <- Hudson_flow %>%
group_by(Year) %>%
summarize(flow_mean = mean(flow_cfs, na.rm = T),
flow_median = median(flow_cfs, na.rm = T))
Hudson_table %>%
ggplot(aes(x = Year, y = flow_mean)) +
geom_point() +
geom_smooth(method = "lm") +
theme_classic()
Hudson_table %>%
ggplot(aes(x = Year, y = flow_median)) +
geom_point() +
geom_smooth(method = "lm") +
theme_classic()
# Part 2
Hudson_flow %>%
group_by(Year) %>%
summarize(flow_max = max(flow_cfs, na.rm = T)) %>%
top_n(n = 15, wt = flow_max) %>%
arrange(-flow_max)
# Part 2
Hudson_flow %>%
group_by(Year) %>%
summarize(flow_max = max(flow_cfs, na.rm = T)) %>%
top_n(n = 10, wt = flow_max) %>%
arrange(-flow_max)
library(lubridate)
Hudson_flow <- read_csv("https://stahlm.github.io/ENS_215/Data/Hudson_River_Streamflow.csv") %>%
filter(site_no == "01335754") %>%
rename(flow_cfs = X_00060_00003)
temperature_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
temperature_data <- readr::read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
View(temperature_data)
0.75^2
0.1^2
library(tidyverse)
library(stats)
library(ggridges)
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Precip_LabData.csv")
precip_data <- precip_data %>%
mutate(time_period = if_else(Year >= 1950,"Post-1950","Pre-1950"))
ny_precip <- precip_data %>%
filter(state_cd == "NY")
ny_precip %>%
ggplot(aes(Precip_inches)) +
geom_histogram() +
theme_classic()
ny_precip %>%
ggplot(aes(Precip_inches, stat(density))) +
geom_histogram() +
theme_classic()
# Your code here
ny_precip %>%
ggplot(aes(Precip_inches)) +
geom_density(fill = "grey") +
theme_classic()
ny_precip %>%
ggplot(aes(Precip_inches, group = time_period, fill = time_period)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("grey", "blue")) +
theme_classic()
precip_data %>%
filter(state_cd %in% c("NY","FL","CA","AZ","NE")) %>%
ggplot() + geom_density(aes(x = Precip_inches, fill = state_cd), alpha = 0.3) +
theme_classic()
precip_data %>%
filter(state_cd %in% c("NY","FL","CA","AZ","NE")) %>%
ggplot(aes(x = Precip_inches, y = state_cd)) +
geom_density_ridges(aes(fill = state_cd)) +
theme_classic()
precip_data %>%
filter(state_cd %in% c("NY")) %>%
ggplot(aes(x = Precip_inches, y = factor(Month))) +
geom_density_ridges(aes(fill = factor(Month)), alpha = 1) +
theme_classic() +
labs(x = "Monthly precipitation (inches)",
y = "Month",
title = "New York monthly precipitation",
caption = "Data source: NOAA",
fill = "Month") +
theme(legend.position = "none")
ny_precip %>%
ggplot(aes(x = cume_dist(Precip_inches), y = Precip_inches)) +
geom_point(size = 1) +
theme_classic() +
labs(title = "Quantile plot",
subtitle = "NY monthly precipitation",
x = "f-value",
y = "Monthly precipitation (inches)",
caption = "Data source: NOAA")
ny_precip %>%
ggplot(aes(x = Precip_inches, y = cume_dist(Precip_inches))) +
geom_line(size = 1) +
theme_classic() +
labs(title = "Cumulative distribution plot",
subtitle = "NY monthly precipitation",
x = "Monthly precipitation (inches)",
y = "f-value",
caption = "Data source: NOAA")
ny_precip %>%
ggplot(aes(Precip_inches)) +
stat_ecdf() +
theme_classic() +
labs(title = "Cumulative distribution plot",
subtitle = "NY monthly precipitation",
x = "Monthly precipitation (inches)",
y = "f-value",
caption = "Data source: NOAA")
precip_data %>%
group_by(state_cd, Year) %>%
filter(state_cd %in% c("CA","FL","NY","VT","NH")) %>%
summarize(annual_avg = sum(Precip_inches)) %>%
ggplot(aes(annual_avg, color = state_cd)) +
stat_ecdf(size = 1) +
theme_classic() +
labs(title = "Cumulative distribution plot",
subtitle = "Annual precipitation",
x = "Annual precipitation (inches)",
y = "f-value",
caption = "Data source: NOAA")
# Your code here
a<- precip_data %>%
group_by(state_cd, Month) %>%
summarize(avg_precip = mean(Precip_inches)) %>%
arrange(state_cd, desc(avg_precip)) %>%
mutate(cumul_percent = cumsum(avg_precip)/sum(avg_precip), month_rank = row_number(-avg_precip))
filter(a, month_rank == 3) %>%
arrange(desc(cumul_percent))
a<- precip_data %>%
group_by(state_cd, Month) %>%
summarize(avg_precip = mean(Precip_inches)) %>%
arrange(state_cd, desc(avg_precip)) %>%
mutate(cumul_percent = cumsum(avg_precip)/sum(avg_precip), month_rank = row_number(-avg_precip)) %>%
filter(a, month_rank == 3) %>%
arrange(desc(cumul_percent)) %>%
mutate(cumul_percent = round(100*cumul_percent,1))
a<- precip_data %>%
group_by(state_cd, Month) %>%
summarize(avg_precip = mean(Precip_inches)) %>%
arrange(state_cd, desc(avg_precip)) %>%
mutate(cumul_percent = cumsum(avg_precip)/sum(avg_precip), month_rank = row_number(-avg_precip))
filter(a, month_rank == 3) %>%
arrange(desc(cumul_percent)) %>%
mutate(cumul_percent = round(100*cumul_percent,1))
a<- precip_data %>%
group_by(state_cd, Month) %>%
summarize(avg_precip = mean(Precip_inches)) %>%
arrange(state_cd, desc(avg_precip)) %>%
mutate(cumul_percent = cumsum(avg_precip)/sum(avg_precip), month_rank = row_number(-avg_precip))
filter(a, month_rank == 3) %>%
arrange(desc(cumul_percent)) %>%
mutate(cumul_percent = round(100*cumul_percent,1)) %>%
select(state_cd, cumul_percent)
vec_norm %>%
ggplot(aes(y = values)) +
geom_boxplot() +
theme_classic() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
labs(y = "Value",
x = "",
title = "Box plot",
subtitle = "Sample of 100,000 values from Normal distribution (mean = 6, sd = 1)") +
coord_flip()
library(tidyverse)
library(stats)
library(scales)
vec_norm <- tibble(values = rnorm(n = 1*10^5, mean = 6, sd = 1))
qv <- quantile(vec_norm$values, probs = c(0.25, 0.50, 0.75))
vec_norm %>%
ggplot(aes(y = 1, x = values)) +
geom_jitter(width = 0, alpha = 0.02) +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
labs(y = "",
x = "Value",
title = "Jitter plot",
subtitle = "Sample of 100,000 values from Normal distribution (mean = 6, sd = 1)")
vec_norm %>%
ggplot(aes(y = values)) +
geom_boxplot() +
theme_classic() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
labs(y = "Value",
x = "",
title = "Box plot",
subtitle = "Sample of 100,000 values from Normal distribution (mean = 6, sd = 1)") +
coord_flip()
vec_norm %>%
ggplot(aes(y = values)) +
geom_boxplot() +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
labs(y = "Value",
x = "",
title = "Box plot",
subtitle = "Sample of 100,000 values from Normal distribution (mean = 6, sd = 1)") +
coord_flip()
library(tidyverse)
library(stats)
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Precip_LabData.csv")
precip_state <- precip_data %>%
filter(state_cd %in% c("NY"))
precip_state %>%
ggplot(aes(x = Precip_inches)) +
geom_density(fill = "bisque") +
theme_classic()
f_step = 0.001 # variable that specifies the steps to use when computing quantiles
f_vals <- seq(0 + f_step, 1- f_step, by = f_step) # vector with f-values
theor_dist_quants <- qnorm(f_vals, mean = 0, sd =1) # generate a vector with the quantile values for a Normal distribution
obs_dist_quants <- quantile(precip_state$Precip_inches, probs = f_vals) # generate a vector with the quantile values for the observed precipitation data
ggplot() +
geom_point(aes(x = theor_dist_quants, y = obs_dist_quants)) +
stat_smooth(aes(x = theor_dist_quants, y = obs_dist_quants), method="lm", se=FALSE) +
theme_classic()
ggplot(precip_state, aes(sample = Precip_inches)) +
geom_qq(distribution = qnorm) +
geom_qq_line(color = "blue") +
labs(y = "Monthly Precipitation (inches)") +
theme_classic()
precip_state %>%
group_by(Year) %>%
summarize(annual_precip = sum(Precip_inches)) %>%
ggplot(aes(sample = annual_precip)) +
geom_qq() +
geom_qq_line(color = "blue") +
theme_classic() +
labs(y = "Annual Precipitation (inches)")
ggplot(precip_state, aes(sample = Precip_inches)) +
geom_qq(distribution = qexp()) +
geom_qq_line(color = "blue") +
labs(y = "Monthly Precipitation (inches)") +
theme_classic()
ggplot(precip_state, aes(sample = Precip_inches)) +
geom_qq(distribution = qlnorm()) +
geom_qq_line(color = "blue") +
labs(y = "Monthly Precipitation (inches)") +
theme_classic()
ggplot(precip_state, aes(sample = Precip_inches)) +
geom_qq(distribution = qnorm) +
geom_qq_line(color = "blue") +
labs(y = "Monthly Precipitation (inches)") +
theme_classic()
f_step = 0.01 # variable that specifies the steps to use when computing quantiles
f_vals <- seq(0 + f_step, 1- f_step, by = f_step) # vector with f-values
theor_dist_quants <- qnorm(f_vals, mean = 0, sd =1) # generate a vector with the quantile values for a Normal distribution
obs_dist_quants <- quantile(precip_state$Precip_inches, probs = f_vals) # generate a vector with the quantile values for the observed precipitation data
ggplot() +
geom_point(aes(x = theor_dist_quants, y = obs_dist_quants)) +
stat_smooth(aes(x = theor_dist_quants, y = obs_dist_quants), method="lm", se=FALSE) +
theme_classic()
ggplot(precip_state, aes(sample = Precip_inches)) +
geom_qq(distribution = qnorm) +
geom_qq_line(color = "blue") +
labs(y = "Monthly Precipitation (inches)") +
theme_classic()
f_step = 0.001 # variable that specifies the steps to use when computing quantiles
f_vals <- seq(0 + f_step, 1- f_step, by = f_step) # vector with f-values
theor_dist_quants <- qnorm(f_vals, mean = 0, sd =1) # generate a vector with the quantile values for a Normal distribution
obs_dist_quants <- quantile(precip_state$Precip_inches, probs = f_vals) # generate a vector with the quantile values for the observed precipitation data
ggplot() +
geom_point(aes(x = theor_dist_quants, y = obs_dist_quants)) +
stat_smooth(aes(x = theor_dist_quants, y = obs_dist_quants), method="lm", se=FALSE) +
theme_classic()
precip_data %>%
filter(state_cd == "MA") %>%
group_by(Year) %>%
summarize(annual_precip = sum(Precip_inches)) %>%
ggplot(aes(sample = annual_precip)) +
geom_qq() +
geom_qq_line(color = "blue") +
theme_classic() +
labs(y = "Annual Precipitation (inches)")
precip_data %>%
filter(state_cd == "FL") %>%
group_by(Year) %>%
summarize(annual_precip = sum(Precip_inches)) %>%
ggplot(aes(sample = annual_precip)) +
geom_qq() +
geom_qq_line(color = "blue") +
theme_classic() +
labs(y = "Annual Precipitation (inches)")
precip_data %>%
filter(state_cd == "NY") %>%
group_by(Year) %>%
summarize(annual_precip = sum(Precip_inches)) %>%
ggplot(aes(sample = annual_precip)) +
geom_qq() +
geom_qq_line(color = "blue") +
theme_classic() +
labs(y = "Annual Precipitation (inches)")
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
bangladesh_gw %>%
ggplot(aes(x = Ba_mgL)) +
geom_density(fill = "bisque") +
theme_classic()
bangladesh_gw %>%
ggplot(aes(x = log10(Ba_mgL))) +
geom_density(fill = "bisque") +
theme_classic()
bangladesh_gw %>%
ggplot(aes(sample = log10(Ba_mgL))) +
geom_qq() +
geom_qq_line(color = "blue") +
theme_classic()
bangladesh_gathered <- bangladesh_gw %>%
gather(key = Parameter, value = Concentration, colnames(bangladesh_gw)[12:31])
bangladesh_gathered %>%
ggplot(aes(sample = log10(Concentration))) +
geom_qq() +
geom_qq_line(color = "blue", size = 1) +
theme_classic() +
facet_wrap(~ Parameter, ncol = 7)
flow <- read_csv("https://stahlm.github.io/ENS_215/Data/USGS_gage_01335754.csv") %>%
drop_na()
flow %>% ggplot(aes(sample = log10(flow_cfs))) +
geom_qq() +
geom_qq_line(color = "blue", size = 1) +
facet_wrap(~ Month) +
theme_classic()
flow %>%
group_by(Year) %>%
summarise(annual_max = max(flow_cfs)) %>%
ggplot(aes(sample = log10(annual_max))) +
geom_qq() +
geom_qq_line(color = "blue", size = 1) +
theme_classic()
met_data <- read_csv("https://stahlm.github.io/ENS_215/Data/HRECOS_Lock_8_windspeed_2016.csv")
ggplot(met_data, aes(x = Wind_m_s)) +
geom_density(fill = "bisque") +
theme_classic()
ggplot(met_data, aes(x = log10(Wind_m_s))) +
geom_density(fill = "bisque") +
theme_classic()
shape_fact <- 1.75 # Weibull shape parameter
ggplot(met_data, aes(sample = Wind_m_s)) +
geom_qq(distribution = qweibull, dparams = list(shape = shape_fact)) +
geom_qq_line(distribution = qweibull, dparams = list(shape = shape_fact)) +
theme_classic()
library(randomForestExplainer)
