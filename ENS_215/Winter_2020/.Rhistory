spectrum(flow_ts)
library(leaflet)
library(tidyverse)
library(tmap)
library(spData)
library(sf)
library(tigris)
library(tidyverse)
library(tmap)
library(sf)
library(tigris)
State_counties <- counties(state = "NY", cb = TRUE) # cb = TRUE specifies to download a lower resolution file (faster download)
State_counties <- st_as_sf(State_counties) # convert to an sf object
State_counties <- st_as_sf(State_counties) # convert to an sf object
State_landmarks <- tigris::landmarks(state = "NY",type = "area")
State_landmarks <- st_as_sf(State_landmarks) # convert to an sf object
tm_shape(State_counties) +
tm_polygons(col = "lightgrey")
tm_shape(State_counties) +
tm_polygons(col = "lightgrey", border.col = "black")
tm_shape(State_counties) +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(State_landmarks) +
tm_polygons(col = "blue")
View(State_landmarks)
tm_shape(State_counties) +
tm_polygons(col = "lightgrey", border.col = "black")
tigris::call_geolocator(street = "Baker Ave", city = "Schenectady", state = "NY")
tigris::call_geolocator(street = "Baker", city = "Schenectady", state = "NY")
tigris::call_geolocator(street = "Baker ave", city = "Schenectady", state = "NY")
tigris::call_geolocator(street = "Baker ave", city = "Niskayuna", state = "NY")
tigris::call_geolocator(street = "Baker Avenue", city = "Niskayuna", state = "NY")
tigris::call_geolocator(street = "State", city = "Schenectady", state = "NY")
tigris::call_geolocator(street = "1447 Baker", city = "Schenectady", state = "NY")
State_roads <- tigris::primary_roads()
State_roads <- State_roads %>%
st_as_sf()
NY_roads <- st_intersection(State_roads, State_counties)
tm_shape(State_counties) +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(NY_roads) +
tm_lines()
tm_shape(State_counties) +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(NY_roads) +
tm_lines(col = "white")
tm_shape(State_counties) +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 1.5)
tm_shape(State_counties) +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
tm_shape(State_counties, projection = projection="+proj=robin") +
tm_shape(State_counties, projection = "+proj=robin") +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
tm_shape(State_counties, projection = 4326) +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
proj4string(x) <-CRS("+proj=utm +zone=10 +datum=WGS84")
proj4string(x) <- crs("+proj=utm +zone=10 +datum=WGS84")
tm_shape(State_counties, projection = "+proj=utm +zone=10 +datum=WGS84") +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
tm_shape(State_counties, projection = "+proj=utm +zone=18 +datum=WGS84") +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
tm_shape(State_counties, projection = "+proj=utm +zone=18 +datum=WGS84") +
tm_polygons(col = "lightgreen", border.col = "black") +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
rnaturalearth::check_data_exist(scale = 50, type = "countries", category = raster)
rnaturalearth::check_data_exist(scale = 50, type = "countries", category = "raster")
lakes110 <- rnaturalearth::ne_download(scale = 50, type = 'MSR_50M', category = 'raster')
tm_shape(lakes110) +
tm_raster() +
tm_shape(State_counties, projection = "+proj=utm +zone=18 +datum=WGS84") +
tm_polygons(col = "lightgreen", border.col = "black") +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
elev_raster <- raster::crop(lakes110,State_counties)
tm_shape(elev_raster) +
tm_raster() +
tm_shape(State_counties, projection = "+proj=utm +zone=18 +datum=WGS84") +
tm_polygons(col = "lightgreen", border.col = "black") +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
tm_shape(elev_raster) +
tm_raster() +
tm_shape(State_counties, projection = "+proj=utm +zone=18 +datum=WGS84") +
tm_borders() +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
tm_shape(elev_raster) +
tm_raster(palette = "terrain") +
tm_shape(State_counties, projection = "+proj=utm +zone=18 +datum=WGS84") +
tm_borders() +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
elev_raster <- raster::mask(elev_raster, State_counties)
tm_shape(elev_raster) +
tm_raster(palette = terrain.colors()) +
tm_shape(State_counties, projection = "+proj=utm +zone=18 +datum=WGS84") +
tm_borders() +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
tm_shape(elev_raster) +
tm_raster(palette = terrain.colors(5)) +
tm_shape(State_counties, projection = "+proj=utm +zone=18 +datum=WGS84") +
tm_borders() +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
tm_shape(elev_raster, projection = "+proj=utm +zone=18 +datum=WGS84") +
tm_raster(palette = terrain.colors(5)) +
tm_shape(State_counties) +
tm_borders() +
tm_shape(NY_roads) +
tm_lines(col = "white",lwd = 2.5)
st_area(State_counties)
st_area(State_counties[State_counties$NAME == "Schenectady",])
542420142/10^6
world
a <- world
View(a)
library(tidyverse)
library(lubridate)
library(dygraphs)
library(xts)
flow <- read_csv("https://stahlm.github.io/ENS_215/Data/USGS_flow_01351500.csv") %>%
drop_na() %>%
filter(Year >= 1940 & Year <= 2016) %>%  # select years 1940 through 2016
mutate(Date = make_date(Year, Month, Day)) %>% # create a Date column that has the dates as an R date object
select(Date, flow_cfs)
flow_ts <- xts(flow[,"flow_cfs"], order.by = flow$Date)
View(flow_ts)
dygraph(flow_ts)
data(elevation)
elevation
library(tidyverse)
# download elevation data
elev_file <- file.path("data", "sf-elevation.tif")
get_usgs_elevation_data(bbox, size = image_size$size, file = elev_file,
sr_bbox = 4326, sr_image = 4326)
library(rayshader)
# download elevation data
elev_file <- file.path("data", "sf-elevation.tif")
get_usgs_elevation_data(bbox, size = image_size$size, file = elev_file,
sr_bbox = 4326, sr_image = 4326)
library(tigris)
install_github('davidcarslaw/worldmet')
library(devtools)
install_github('davidcarslaw/worldmet')
install.packages("stationaRy")
library(stationaRy)
lga_met_data <-
get_met_data(
station_id = "725030-14732",
years = 2017:2018
)
lga_met_data <-
get_met_data(
station_id = "725030-14732",
years = 2019:2020
)
View(lga_met_data)
stations_norway <-
get_station_metadata() %>%
dplyr::filter(country == "NO")
View(stations_norway)
stations_norway <-
get_station_metadata() %>%
dplyr::filter(country == "BH")
stations_norway <-
get_station_metadata() %>%
dplyr::filter(country == "BD")
stations_norway <-
get_station_metadata() %>%
dplyr::filter(country == "BHR")
stations_norway <-
get_station_metadata() %>%
dplyr::filter(country == "BH")
stations_norway <-
get_station_metadata() %>%
dplyr::filter(country == "BB")
stations_norway <-
get_station_metadata() %>%
dplyr::filter(country == "LU")
stations_norway <-
get_station_metadata() %>%
dplyr::filter(country == "BA")
readxl::read_xlsx("./grading_rubric.xlsx")
readxl::read_xlsx("./grading_rubric.xlsx")
table_1 <- readxl::read_xlsx("./grading_rubric.xlsx")
View(table_1)
table_1 <- readxl::read_xlsx("./grading_rubric.xlsx")
View(table_1)
library(tidyverse)
library(kableExtra)
table_1 <- readxl::read_xlsx("./grading_rubric.xlsx")
table_1 %>% kable()
table_1 <- readxl::read_xlsx("./grading_rubric.xlsx")
table_1 %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
table_1 <- readxl::read_xlsx("./grading_rubric.xlsx")
table_1 %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
column_spec(2, width = "30em") %>%
column_spec(3, width = "30em")
table_1 <- readxl::read_xlsx("./grading_rubric.xlsx")
table_1 %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
row_spec(1, bold = T) %>%
column_spec(1, width = "8em") %>%
column_spec(2, width = "12em") %>%
column_spec(3, width = "12em") %>%
column_spec(4, width = "12em")
table_1 <- readxl::read_xlsx("./grading_rubric.xlsx")
table_1 %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
row_spec(0, bold = T) %>%
column_spec(1, width = "8em") %>%
column_spec(2, width = "12em") %>%
column_spec(3, width = "12em") %>%
column_spec(4, width = "12em")
library(gapminder)
library(tidyverse)
library(readr)
library(gapminder)
my_gap <- gapminder
my_gap_2007 <- filter(my_gap, year == 2007)
view(my_gap_2007)
summarise(my_gap_2007, avg_life = mean(lifeExp), avg_gdp_per_cap = mean(gdpPercap))
filter(my_gap_2007, continent == "Asia") %>%  summarise(avg_pop = mean(pop), avg_GDP = mean(gdpPercap))
my_gap_2007 <- group_by(my_gap_2007, continent)
summarize(my_gap_2007, min_life = min(lifeExp), mean_life = mean(lifeExp), max_life = max(lifeExp))
my_gap <- group_by(my_gap, continent, year)
summarize(my_gap, min_life = min(lifeExp), mean_life = mean(lifeExp), max_life = max(lifeExp))
summarize(my_gap_2007, continent_pop = sum(pop))
my_gap <- ungroup(my_gap)
my_gap %>% group_by(year) %>% top_n(3, gdpPercap)
my_gap %>% group_by(year) %>% top_n(3, gdpPercap) %>% arrange(year)
my_gap_2007 <- filter(my_gap, year == 2007)
my_gap_2007 %>% group_by(continent) %>% top_n(3, gdpPercap) %>%  arrange(continent, desc(gdpPercap))
my_gap_2007 %>% group_by(continent) %>% summarise(min_gdp_percap = min(gdpPercap), mean_gdp_percap = mean(gdpPercap), max_gdp_percap = max(gdpPercap), min_life = min(lifeExp), mean_life = mean(lifeExp), max_life = max(lifeExp), num_country = n())
my_gap <- mutate(my_gap, tot_gdp = pop*gdpPercap)
view(my_gap)
gap_summary_table <- my_gap %>% group_by(country) %>% summarize(continent = first(continent), gdp_percap_ratio = (last(gdpPercap))/first(gdpPercap), gdp_ratio = (last(tot_gdp))/first(tot_gdp), life_exp_change = last(lifeExp) - first(lifeExp)) %>% arrange(desc(life_exp_change))
View(gap_summary_table)
# Load in packages
library(tidyverse)
library(maps)
map_data_usa <- map_data("state") # load in US states map data from the maps package
map_data_usa %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), color = "black", fill = "gray")
map_data_usa %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), color = "black", fill = "gray") +
coord_map(projection = "bonne", lat0 = 50) +
theme_bw() +
labs(title = "Bonne projection")
map_data_usa %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), color = "black", fill = "gray") +
coord_map(projection = "bonne", lat0 = 50) +
theme_bw() +
labs(title = "Map of the US")
map_world_data <- map_data("world") # get world borders
earthquakes <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv") # get dataset of recent earthquakes
map_world_data <- map_data("world") # get world borders
earthquakes <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv") # get dataset of recent earthquakes
earthquake_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude, size = mag, color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 4.5 magnitude in the past 30 days",
subtitle = "Date window: 28-Jan to 27-Feb-2020",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
earthquake_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude, size = mag, color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 4.5 magnitude in the past 30 days",
subtitle = "Date window: 28-Jan to 27-Feb-2020",
caption = "Earthquake data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
NY_counties <- counties(state = "NY", cb = TRUE) # cb = TRUE specifies to download a lower resolution file (faster download)
# Load in packages
library(tidyverse)
library(maps)
library(tigris)
library(sf)
NY_counties <- counties(state = "NY", cb = TRUE) # cb = TRUE specifies to download a lower resolution file (faster download)
NY_counties <- counties(state = "NY", cb = TRUE) # cb = TRUE specifies to download a lower resolution file (faster download)
NY_counties <- st_as_sf(NY_counties) # convert to an sf object
# Get surface water features for Schenectady county
Water_Schenectady <- area_water(state = "NY", county = "Schenectady")  # download the data
Water_Schenectady <- st_as_sf(Water_Schenectady) # convert to an sf object
Schenectady_map <- NY_counties %>%
filter(NAME == "Schenectady") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(Water_Schenectady) +
tm_polygons(col = "blue", border.alpha = 0)
# Load in packages
library(tidyverse)
library(maps)
library(tigris)
library(sf)
library(tmap)
Schenectady_map <- NY_counties %>%
filter(NAME == "Schenectady") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(Water_Schenectady) +
tm_polygons(col = "blue", border.alpha = 0)
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("RIGHT", "BOTTOM"))     # add a scale bar
Schenectady_map <- NY_counties %>%
filter(NAME == "Schenectady") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(Water_Schenectady) +
tm_polygons(col = "blue", border.alpha = 0)
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("RIGHT", "BOTTOM"))     # add a scale bar
Schenectady_map <- NY_counties %>%
filter(NAME == "Schenectady") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(Water_Schenectady) +
tm_polygons(col = "blue", border.alpha = 0) +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("RIGHT", "BOTTOM"))     # add a scale bar
Schenectady_map
Schenectady_map <- NY_counties %>%
filter(NAME == "Schenectady") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(Water_Schenectady) +
tm_polygons(col = "blue", border.alpha = 0) +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("RIGHT", "BOTTOM"))     # add a scale bar
Schenectady_map
# Get surface water features for Schenectady county
Water_Schenectady <- area_water(state = "NY", county = "Schenectady")  # download the data
Water_Schenectady <- st_as_sf(Water_Schenectady) # convert to an sf object
Linear_water_Schenectady <- linear_water(state = "NY", county = "Schenectady")  # download the data
Linear_water_Schenectady <- st_as_sf(Linear_water_Schenectady) # convert to an sf object
Schenectady_map <- NY_counties %>%
filter(NAME == "Schenectady") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(Water_Schenectady) +
tm_polygons(col = "blue", border.alpha = 0) +
tm_shape(Linear_water_Schenectady) +
tm_lines(col = "blue") +
tm_compass(position = c("right", "top")) +  # add a compass
tm_layout(title = "Schenectady hydrography",
frame = F)
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("RIGHT", "BOTTOM"))     # add a scale bar
Schenectady_map <- NY_counties %>%
filter(NAME == "Schenectady") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(Water_Schenectady) +
tm_polygons(col = "blue", border.alpha = 0) +
tm_shape(Linear_water_Schenectady) +
tm_lines(col = "blue") +
tm_compass(position = c("right", "top")) +  # add a compass
tm_layout(title = "Schenectady hydrography",
frame = F) +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("RIGHT", "BOTTOM"))     # add a scale bar
Schenectady_map
# Load in packages
library(tidyverse)
library(maps)
library(tigris)
library(sf)
library(tmap)
library(leaflet)
state_cap_locs <- read_csv("https://stahlm.github.io/ENS_215/Data/us_capitals_locs.csv", skip = 2)
state_cap_locs <- state_cap_locs %>%
filter(state_cd %in% state.abb)  # remove locations that aren't US state list (e.g. Puerto Rico, Guam, ...)
map_cap <- leaflet(data = state_cap_locs) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng = ~long_deg, lat = ~lat_deg, label = ~state_cd)
map_cap <- leaflet(data = state_cap_locs) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng = ~long_deg, lat = ~lat_deg, label = ~state_cd)
map_cap
library(tidyverse)
dams_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Dams_FAO_SelectCols_LabData.csv")
view(dams_data)
summary(dams_data)
head(dams_data)
fig_resv <- ggplot(dams_data, aes(x = Reservoir_area_km2, y = Reservoir_capacity_million_m3, color = Continent)) +
geom_point() +
theme_classic() +
scale_x_log10() +
facet_wrap(~ Continent)
fig_resv
fig_height <- ggplot(dams_data, aes(x = Dam_height_m, y = Reservoir_capacity_million_m3, color = Continent)) +
geom_point() +
theme_classic() +
scale_x_log10()
fig_height
dam_avg_table <- dams_data %>%
group_by(Continent) %>%
summarize(avg_height = mean(Dam_height_m, na.rm = TRUE), avg_area = mean(Reservoir_area_km2, na.rm = TRUE), avg_storage = mean(Reservoir_capacity_million_m3, na.rm = TRUE))
dam_avg_table
dams_data %>%
ggplot(aes(x = Continent, y = Reservoir_capacity_million_m3)) +
geom_boxplot() +
scale_y_log10()
fig_tot_num_dams <- dams_data %>%
group_by(Year_completed) %>%
mutate(tot_num_dams = sum(Year_completed))
fig_tot_num_dams
dams_data %>%
ggplot(aes(x = Year_completed)) +
geom_bar()
dams_data %>%
group_by(Year_completed) %>%
summarize(tot_dams = n())
dams_data %>%
group_by(Year_completed) %>%
summarize(tot_dams = n()) %>%
ggplot(aes(x = Year_completed, y = tot_dams)) +
geom_line()
dams_data %>%
group_by(Year_completed) %>%
summarize(tot_dams = n()) %>%
ggplot(aes(x = Year_completed, y = tot_dams)) +
geom_line() +
geom_point()
dams_data %>%
group_by(Year_completed) %>%
summarize(tot_dams = n()) %>%
ggplot(aes(x = Year_completed, y = tot_dams)) +
geom_col()
#geom_line() +
#geom_point()
dams_data %>%
group_by(Year_completed) %>%
summarize(tot_dams = n()) %>%
ggplot(aes(x = Year_completed, y = tot_dams)) +
geom_col() +
xlim(1750, NA)
#geom_line() +
#geom_point()
round(1950,2)
round(1950,3)
round(1950,4)
round(1950/1000)
round(1950/1000,2)
round(1950/1000,1)
floor(1950/1000,1)
floor(1950/1000)
floor(1950/100)
floor(1999/100)
floor(1999/100)*100
dams_data <- dams_data %>%
mutate(Century = floor(Year_completed/100)*100)
View(dams_data)
dams_data %>%
ggplot(aes(x = Year_completed)) +
geom_bar() +
facet_wrap(~ Century)
round(19.35345,2)
dams_data %>%
group_by(Year_completed) %>%
summarize(tot_dams = n()) %>%
ggplot(aes(x = Year_completed, y = tot_dams)) +
geom_col() +
xlim(1750, NA) +
scale_x_continuous(breaks = seq(1750,2000,10))
#geom_line() +
#geom_point()
dams_data %>%
group_by(Year_completed) %>%
summarize(tot_dams = n()) %>%
ggplot(aes(x = Year_completed, y = tot_dams)) +
geom_col() +
xlim(1900, NA) +
scale_x_continuous(breaks = seq(1900,2000,10))
#geom_line() +
#geom_point()
dams_data %>%
group_by(Year_completed) %>%
summarize(tot_dams = n()) %>%
ggplot(aes(x = Year_completed, y = tot_dams)) +
geom_col() +
scale_x_continuous(breaks = seq(1900,2000,10)) +
xlim(1900, NA)
#geom_line() +
#geom_point()
