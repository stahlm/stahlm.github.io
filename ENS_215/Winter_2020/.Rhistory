library(tidyverse)
map_data_usa <- map_data("state") # load in US states map data from the maps package and convert it to a compatible format for plotting in with ggplot()
map_data_usa$region
unique(map_data_usa$region)
a<-unique(map_data_usa$region)
a
write.csv(a,"statenames")
write.csv(a,"statenames.csv")
States <- read_xlsx("../../Data/Class_survey_2020.xlsx", sheet = "Home_state")
library(tidyverse)
library(readxl)
States <- read_xlsx("../../Data/Class_survey_2020.xlsx", sheet = "Home_state")
getwd()
getwd()
States <- read_xlsx("../Data/Class_survey_2020.xlsx", sheet = "Home_state")
map_us <- map_data_usa %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), color = "black", fill = "gray")  + coord_map(projection = "bonne", lat0 = 50)
map_us <- map_data_usa %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), color = "black", fill = "gray")  + coord_map(projection = "bonne", lat0 = 50)
map_us
left_join(map_data_usa, States)
map_data_usa <- left_join(map_data_usa, States)
map_data_usa_temps %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = count), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_map(projection = "bonne", lat0 = 50) +
theme_void()
map_data_usa %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = count), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_map(projection = "bonne", lat0 = 50) +
theme_void()
test_var <- 200
test_var*2
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(readxl)
library(ggthemes)
Heard_of <- read_xlsx("../../Data/Class_survey_2020.xlsx", sheet = "Heard_of")
Class_yr <- read_xlsx("../../Data/Class_survey_2020.xlsx", sheet = "Class_yr")
Class_yr$Year <- ordered(Class_yr$Year, levels = c("FR","SO","JR","SR","Other"))
Majors <- read_xlsx("../../Data/Class_survey_2020.xlsx", sheet = "Major")
My_age <- read_xlsx("../../Data/Class_survey_2020.xlsx", sheet = "My_age")
States <- read_xlsx("../../Data/Class_survey_2020.xlsx", sheet = "Home_state")
View(Class_yr)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
theme_bw()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
theme_classic()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
theme_bw()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
theme_bw()
2+2
test_var <- 400
test_var <- 400
a <- "hi"
b <- "hello"
a+b
c(a,b)
?paste
paste(a,b)
a <- c("1","2","3")
b <- c("a","b","c")
paste(a,b)
c <- c(a,b)
c
paste(a,b, sep = ",")
paste(a,b, sep = ", ")
a <- T
a
a == T
a ==
a == F
a <- 1:5
rep(a,2)
?rep
rep(a,each = 2)
rep(a,times = 2,each = 2)
rep(a,times = 2,each = 10)
a <- mpg
library(tidyverse)
a <- mpg
View(a)
library(tidyverse)
library(gapminder)
gapminder
summary(gapminder)
gap_data <- gapminder
filter(gap_data, gdpPercap > 5000)
filter(gap_data, gdpPercap > 5000, year == 2007)
data_2007_highGDP <- filter(gap_data, gdpPercap > 5000, year == 2007)
filter(gap_data, gdpPercap > 5000, continent == "Asia")
# Your code here
filter(gap_data, country == "Canada" | country == "China")
filter(gap_data, country %in% c("Canada", "China"))
# Your code here
gap_data[gap_data$year == 2007 & gap_data$gdpPercap > 5000, ] # the old way in base R
filter(gap_data, year == 2007, gdpPercap > 5000) # with dplyr
gap_sorted <- arrange(gap_data, gdpPercap)
gap_sorted <- arrange(gap_data, desc(gdpPercap))
View(gap_sorted)
library(tidyverse)
dams_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Dams_FAO_SelectCols_LabData.csv")
View(dams_data)
library(tidyverse)
library(gapminder)
my_gap <- gapminder
my_gap %>% percent_rank(lifeExp)
my_gap %>% mutate(life_rank = percent_rank(lifeExp))
my_gap %>% mutate(life_rank = percent_rank(lifeExp)) %>% arrange(life_rank)
my_gap %>% mutate(life_rank = percent_rank(lifeExp)) %>% arrange(desc(life_rank))
library(tidyverse)
dams_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Dams_FAO_SelectCols_LabData.csv")
View(dams_data)
dams_data %>% group_by(Continent) %>% summarise(mean(Dam_height_m))
dams_data %>% group_by(Continent) %>% summarise(mean(Dam_height_m, na.rm = T))
dams_data %>% group_by(Continent) %>% summarise(mean(Dam_height_m, na.rm = T), ndam = n())
library(tidyverse)
library(readr) # we'll use this package later in the lecture to load in files from our class website
library(gapminder)
my_gap <- gapminder
my_gap_2007 <- filter(my_gap, year == 2007)
summarize(my_gap_2007, avg_life = mean(lifeExp), avg_gdp_per_cap = mean(gdpPercap) )
# Your code here
my_gap_2007 <- group_by(my_gap_2007, continent) # group the data by continent
summarize(my_gap_2007, min_life = min(lifeExp), mean(lifeExp), max(lifeExp))
my_gap <- group_by(my_gap, continent, year) # group by continent then year
summarize(my_gap, min_life = min(lifeExp), mean(lifeExp), max(lifeExp))
my_gap <- ungroup(my_gap) # ungroup the my_gap data
my_gap %>%
group_by(year) %>%
top_n(3, gdpPercap)
my_gap %>%
group_by(year) %>%
top_n(3, gdpPercap) %>%
arrange(year)
# Your code here
# Your code here
# Your code here
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Precip_LabData.csv")
# Your code here
# Your code here
# Your code here
# Your code here
# Your code here
# Your code here
# Your code here
View(precip_data)
state_data %>% group_by(Month) %>%
summarize(m_avg = mean(Precip_inches),
m_min = min(Precip_inches),
m_max = max(Precip_inches))
state_2_get <- "CA" # Abbreviation code for state I want to select
state_data <- filter(precip_data, state_cd == state_2_get)
state_data %>% group_by(Month) %>%
summarize(m_avg = mean(Precip_inches),
m_min = min(Precip_inches),
m_max = max(Precip_inches))
state_data %>%
group_by(Year) %>%
summarize(tot_ann_precip = sum(Precip_inches))
t3 <- precip_data %>%
group_by(state_cd, Year) %>%
summarize(annual_precip = sum(Precip_inches))
t3 %>%
group_by(Year) %>%
top_n(1, annual_precip) %>%
arrange(Year)
t5 <- precip_data %>%
group_by(state_cd, Year) %>%
summarize(tot_annual_precip = sum(Precip_inches)) %>%
group_by(state_cd) %>%
summarize(mean_precip = mean(tot_annual_precip)) %>%
arrange(desc(mean_precip))
View(t5)
View(t3)
t5 <- precip_data %>%
group_by(state_cd, Year) %>%
summarize(tot_annual_precip = sum(Precip_inches)) %>%
group_by(state_cd) %>%
summarize(mean_precip = mean(tot_annual_precip),
min_precip = min(tot_annual_precip),
max_precip = max(tot_annual_precip)) %>%
arrange(desc(mean_precip))
state_data <- mutate(state_data, season = if_else(Month %in% c(3,4,5,6), "season-1", "season-2"))
t6 <-  state_data %>%
group_by(Year, season) %>%
summarize(precip_seasonal = sum(Precip_inches)) %>%
group_by(Year) %>%
summarize(precip_ratio = first(precip_seasonal)/sum(precip_seasonal) )
View(t6)
devtools::install_github("thomasp85/patchwork")
library(patchwork)
devtools::install_github("thomasp85/patchwork")
library(patchwork)
library("patchwork")
install.packages("tidyverse")
library("tmap", lib.loc="~/R/win-library/3.5")
install.packages(c("geojson", "geojsonio", "geojsonlint", "geojsonR", "sf", "tmap"))
