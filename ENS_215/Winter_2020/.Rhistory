arrange(state_cd, desc(avg_precip)) %>%
mutate(cumul_percent = cumsum(avg_precip)/sum(avg_precip), month_rank = row_number(-avg_precip))
filter(a, month_rank == 3) %>%
arrange(desc(cumul_percent)) %>%
mutate(cumul_percent = round(100*cumul_percent,1))
a<- precip_data %>%
group_by(state_cd, Month) %>%
summarize(avg_precip = mean(Precip_inches)) %>%
arrange(state_cd, desc(avg_precip)) %>%
mutate(cumul_percent = cumsum(avg_precip)/sum(avg_precip), month_rank = row_number(-avg_precip))
filter(a, month_rank == 3) %>%
arrange(desc(cumul_percent)) %>%
mutate(cumul_percent = round(100*cumul_percent,1)) %>%
select(state_cd, cumul_percent)
vec_norm %>%
ggplot(aes(y = values)) +
geom_boxplot() +
theme_classic() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
labs(y = "Value",
x = "",
title = "Box plot",
subtitle = "Sample of 100,000 values from Normal distribution (mean = 6, sd = 1)") +
coord_flip()
library(tidyverse)
library(stats)
library(scales)
vec_norm <- tibble(values = rnorm(n = 1*10^5, mean = 6, sd = 1))
qv <- quantile(vec_norm$values, probs = c(0.25, 0.50, 0.75))
vec_norm %>%
ggplot(aes(y = 1, x = values)) +
geom_jitter(width = 0, alpha = 0.02) +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
labs(y = "",
x = "Value",
title = "Jitter plot",
subtitle = "Sample of 100,000 values from Normal distribution (mean = 6, sd = 1)")
vec_norm %>%
ggplot(aes(y = values)) +
geom_boxplot() +
theme_classic() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
labs(y = "Value",
x = "",
title = "Box plot",
subtitle = "Sample of 100,000 values from Normal distribution (mean = 6, sd = 1)") +
coord_flip()
vec_norm %>%
ggplot(aes(y = values)) +
geom_boxplot() +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
labs(y = "Value",
x = "",
title = "Box plot",
subtitle = "Sample of 100,000 values from Normal distribution (mean = 6, sd = 1)") +
coord_flip()
library(tidyverse)
library(stats)
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Precip_LabData.csv")
precip_state <- precip_data %>%
filter(state_cd %in% c("NY"))
precip_state %>%
ggplot(aes(x = Precip_inches)) +
geom_density(fill = "bisque") +
theme_classic()
f_step = 0.001 # variable that specifies the steps to use when computing quantiles
f_vals <- seq(0 + f_step, 1- f_step, by = f_step) # vector with f-values
theor_dist_quants <- qnorm(f_vals, mean = 0, sd =1) # generate a vector with the quantile values for a Normal distribution
obs_dist_quants <- quantile(precip_state$Precip_inches, probs = f_vals) # generate a vector with the quantile values for the observed precipitation data
ggplot() +
geom_point(aes(x = theor_dist_quants, y = obs_dist_quants)) +
stat_smooth(aes(x = theor_dist_quants, y = obs_dist_quants), method="lm", se=FALSE) +
theme_classic()
ggplot(precip_state, aes(sample = Precip_inches)) +
geom_qq(distribution = qnorm) +
geom_qq_line(color = "blue") +
labs(y = "Monthly Precipitation (inches)") +
theme_classic()
precip_state %>%
group_by(Year) %>%
summarize(annual_precip = sum(Precip_inches)) %>%
ggplot(aes(sample = annual_precip)) +
geom_qq() +
geom_qq_line(color = "blue") +
theme_classic() +
labs(y = "Annual Precipitation (inches)")
ggplot(precip_state, aes(sample = Precip_inches)) +
geom_qq(distribution = qexp()) +
geom_qq_line(color = "blue") +
labs(y = "Monthly Precipitation (inches)") +
theme_classic()
ggplot(precip_state, aes(sample = Precip_inches)) +
geom_qq(distribution = qlnorm()) +
geom_qq_line(color = "blue") +
labs(y = "Monthly Precipitation (inches)") +
theme_classic()
ggplot(precip_state, aes(sample = Precip_inches)) +
geom_qq(distribution = qnorm) +
geom_qq_line(color = "blue") +
labs(y = "Monthly Precipitation (inches)") +
theme_classic()
f_step = 0.01 # variable that specifies the steps to use when computing quantiles
f_vals <- seq(0 + f_step, 1- f_step, by = f_step) # vector with f-values
theor_dist_quants <- qnorm(f_vals, mean = 0, sd =1) # generate a vector with the quantile values for a Normal distribution
obs_dist_quants <- quantile(precip_state$Precip_inches, probs = f_vals) # generate a vector with the quantile values for the observed precipitation data
ggplot() +
geom_point(aes(x = theor_dist_quants, y = obs_dist_quants)) +
stat_smooth(aes(x = theor_dist_quants, y = obs_dist_quants), method="lm", se=FALSE) +
theme_classic()
ggplot(precip_state, aes(sample = Precip_inches)) +
geom_qq(distribution = qnorm) +
geom_qq_line(color = "blue") +
labs(y = "Monthly Precipitation (inches)") +
theme_classic()
f_step = 0.001 # variable that specifies the steps to use when computing quantiles
f_vals <- seq(0 + f_step, 1- f_step, by = f_step) # vector with f-values
theor_dist_quants <- qnorm(f_vals, mean = 0, sd =1) # generate a vector with the quantile values for a Normal distribution
obs_dist_quants <- quantile(precip_state$Precip_inches, probs = f_vals) # generate a vector with the quantile values for the observed precipitation data
ggplot() +
geom_point(aes(x = theor_dist_quants, y = obs_dist_quants)) +
stat_smooth(aes(x = theor_dist_quants, y = obs_dist_quants), method="lm", se=FALSE) +
theme_classic()
precip_data %>%
filter(state_cd == "MA") %>%
group_by(Year) %>%
summarize(annual_precip = sum(Precip_inches)) %>%
ggplot(aes(sample = annual_precip)) +
geom_qq() +
geom_qq_line(color = "blue") +
theme_classic() +
labs(y = "Annual Precipitation (inches)")
precip_data %>%
filter(state_cd == "FL") %>%
group_by(Year) %>%
summarize(annual_precip = sum(Precip_inches)) %>%
ggplot(aes(sample = annual_precip)) +
geom_qq() +
geom_qq_line(color = "blue") +
theme_classic() +
labs(y = "Annual Precipitation (inches)")
precip_data %>%
filter(state_cd == "NY") %>%
group_by(Year) %>%
summarize(annual_precip = sum(Precip_inches)) %>%
ggplot(aes(sample = annual_precip)) +
geom_qq() +
geom_qq_line(color = "blue") +
theme_classic() +
labs(y = "Annual Precipitation (inches)")
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
bangladesh_gw %>%
ggplot(aes(x = Ba_mgL)) +
geom_density(fill = "bisque") +
theme_classic()
bangladesh_gw %>%
ggplot(aes(x = log10(Ba_mgL))) +
geom_density(fill = "bisque") +
theme_classic()
bangladesh_gw %>%
ggplot(aes(sample = log10(Ba_mgL))) +
geom_qq() +
geom_qq_line(color = "blue") +
theme_classic()
bangladesh_gathered <- bangladesh_gw %>%
gather(key = Parameter, value = Concentration, colnames(bangladesh_gw)[12:31])
bangladesh_gathered %>%
ggplot(aes(sample = log10(Concentration))) +
geom_qq() +
geom_qq_line(color = "blue", size = 1) +
theme_classic() +
facet_wrap(~ Parameter, ncol = 7)
flow <- read_csv("https://stahlm.github.io/ENS_215/Data/USGS_gage_01335754.csv") %>%
drop_na()
flow %>% ggplot(aes(sample = log10(flow_cfs))) +
geom_qq() +
geom_qq_line(color = "blue", size = 1) +
facet_wrap(~ Month) +
theme_classic()
flow %>%
group_by(Year) %>%
summarise(annual_max = max(flow_cfs)) %>%
ggplot(aes(sample = log10(annual_max))) +
geom_qq() +
geom_qq_line(color = "blue", size = 1) +
theme_classic()
met_data <- read_csv("https://stahlm.github.io/ENS_215/Data/HRECOS_Lock_8_windspeed_2016.csv")
ggplot(met_data, aes(x = Wind_m_s)) +
geom_density(fill = "bisque") +
theme_classic()
ggplot(met_data, aes(x = log10(Wind_m_s))) +
geom_density(fill = "bisque") +
theme_classic()
shape_fact <- 1.75 # Weibull shape parameter
ggplot(met_data, aes(sample = Wind_m_s)) +
geom_qq(distribution = qweibull, dparams = list(shape = shape_fact)) +
geom_qq_line(distribution = qweibull, dparams = list(shape = shape_fact)) +
theme_classic()
library(randomForestExplainer)
library(tidyverse)
library(lubridate)
library(moderndive)
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Precip_LabData.csv")
precip_data %>%
filter(Year >= 1980,
state_cd == "CA") %>%
mutate(date = ymd(paste(Year,Month,15)) ) %>%
ggplot(aes(x = date, y = Precip_inches)) +
geom_line() +
geom_point() +
theme_classic() +
labs(x = "Year",
y = "Precip (inches)")
precip_data %>%
filter(Year >= 1980,
state_cd == "CA") %>%
ggplot(aes(x = Year, y = Precip_inches, color = Year)) +
geom_point() +
scale_color_viridis_c() +
geom_smooth(se = F, method = "lm") +
facet_wrap(~ Month, ncol = 12) +
theme_classic() +
theme(axis.text.x = element_blank()) +
labs(x = "",
y = "Precip (inches)",
title = "California Monthly Precipitation",
subtitle = "1980-2017",
caption = "Data source: NOAA")
precip_data %>%
filter(Year >= 1980,
state_cd == "CA") %>%
ggplot(aes(x = Year, y = Precip_inches)) +
geom_point() +
geom_smooth(se = F, method = "lm") +
facet_wrap(~ Month, ncol = 12) +
theme_classic() +
theme(axis.text.x = element_blank()) +
labs(x = "",
y = "Precip (inches)",
title = "California Monthly Precipitation",
subtitle = "1980-2017",
caption = "Data source: NOAA")
flow <- read_csv("https://stahlm.github.io/ENS_215/Data/USGS_flow_01351500.csv") %>%
drop_na() %>%
filter(Year >= 1940 & Year <= 2016) %>%  # select years 1940 through 2016
mutate(date = make_date(Year, Month, Day)) # create a Date column that has the dates as an R date object
flow %>%
filter(Year >= 1980) %>%
group_by(Year, Month) %>%
summarize(mean_flow_cfs = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Year, y = mean_flow_cfs)) +
geom_point() +
geom_smooth(se = F, method = "lm") +
facet_wrap(~ Month, ncol = 12) +
theme_classic() +
theme(axis.text.x = element_blank()) +
labs(x = "",
y = "Flow (cfs)")
library(tidyverse)
map_data_usa <- map_data("state") # load in US states map data from the maps package and convert it to a compatible format for plotting in with ggplot()
head(map_data_usa) # take a look at the first few rows of map_data_usa
map_us <- map_data_usa %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), color = "black", fill = "gray")
map_us
map_data_exer <- map_data("france")
map_exer <- map_data_exer %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = factor(group)), color = "black") +
scale_color_discrete() +
theme(legend.position = "none")
map_exer
map_data_exer <- map_data("france")
map_exer <- map_data_exer %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = factor(group)), color = "black") +
scale_color_discrete() +
theme(legend.position = "none") +
coord_quickmap()
map_exer
head(map_data_exer)
map_us + coord_quickmap()
map_us + coord_map(projection = "bonne", lat0 = 50)
map_us + coord_map(projection = "conic", lat0 = 30)
map_us +
coord_map(projection = "bonne", lat0 = 50) +
theme_bw()
map_us + coord_map(projection = "conic", lat0 = 30)
library(tidyverse)
library(patchwork)
map_us_bonne <- map_us +
coord_map(projection = "bonne", lat0 = 50) +
theme_bw() +
labs(title = "Bonne projection")
map_us_conic <- map_us +
coord_map(projection = "conic", lat0 = 30) +
theme_bw() +
labs(title = "Conic projection")
map_us_bonne / map_us_conic  # making use of the patchwork package to nicely arrange the two maps
map_us_bonne <- map_us +
coord_map(projection = "bonne", lat0 = 50) +
theme_bw() +
labs(title = "Bonne projection")
map_us_conic <- map_us +
coord_map(projection = "conic", lat0 = 30) +
theme_bw() +
labs(title = "Conic projection")
map_us_bonne + map_us_conic  # making use of the patchwork package to nicely arrange the two maps
state_cap_locs <- read_csv("https://stahlm.github.io/ENS_215/Data/us_capitals_locs.csv", skip = 2)
state_cap_locs <- state_cap_locs %>%
filter(state_cd %in% state.abb) %>% # remove locations that aren't US state list (e.g. Puerto Rico, Guam, ...)
filter(state_cd != "AK", state_cd != "HI") # remove capitals of Alaska and Hawaii (our basemap only has the lower 48 states)
map_us +
geom_point(data = state_cap_locs, aes(x = long_deg, y = lat_deg), color = "blue") +
coord_map(projection = "bonne", lat0 = 50) +
theme_minimal()
map_data_usa <- map_data("state") # get data frame with the spatial data for borders of lower 48 states
head(map_data_usa)
map_data_ne <- map_data_usa %>%
filter(region %in% c("massachusetts", "new york", "connecticut", "rhode island", "maine",
"vermont","new hampshire"))
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
state_mean_temps <- state_temps %>%
group_by(state_cd) %>%
summarize(mean_temp = mean(Avg_Temp_F))
state_mean_temps
state_name_table = tibble(state_name = tolower(state.name),
state_cd = state.abb, us_region = state.region)
state_mean_temps <- left_join(state_mean_temps, state_name_table)
head(state_mean_temps)
state_mean_temps <- state_mean_temps %>%
rename(region = state_name)
map_data_usa_temps <- left_join(map_data_usa, state_mean_temps)
head(map_data_usa_temps)
map_data_usa_temps %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_quickmap() +
theme_void()
map_data_usa_temps %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_map(projection = "bonne", lat0 = 50) +
theme_void()
map_data_usa_temps %>%
drop_na(us_region) %>% # there are some NA rows that we will drop
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_map(projection = "bonne", lat0 = 50) +
theme_void() +
facet_wrap(~ us_region, scales = "free")
map_data_usa_temps %>%
drop_na(us_region) %>% # there are some NA rows that we will drop
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_map(projection = "bonne", lat0 = 50) +
theme_void() +
facet_wrap(~ us_region)
map_data_usa_temps %>%
drop_na(us_region) %>% # there are some NA rows that we will drop
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_map(projection = "bonne", lat0 = 50) +
theme_void() +
facet_wrap(~ us_region, scales = "free")
map_data_usa_temps %>%
drop_na(us_region) %>% # there are some NA rows that we will drop
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
#coord_map(projection = "bonne", lat0 = 50) +
coord_quickmap() +
theme_void() +
facet_wrap(~ us_region, scales = "free")
map_data_usa_temps %>%
drop_na(us_region) %>% # there are some NA rows that we will drop
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_map(projection = "bonne", lat0 = 50) +
theme_void() +
facet_wrap(~ us_region, scales = "free")
map_data_usa_temps %>%
filter(us_region == "Northeast") %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_map(projection = "bonne", lat0 = 50) +
theme_void()
map_data_usa_temps %>%
drop_na(us_region) %>% # there are some NA rows that we will drop
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_quickmap() +
theme_void() +
facet_wrap(~ us_region, scales = "free")
map_NE <- map_data_usa_temps %>%
filter(us_region == "Northeast") %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_map(projection = "bonne", lat0 = 50) +
theme_void()
map_S <- map_data_usa_temps %>%
filter(us_region == "South") %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_map(projection = "bonne", lat0 = 50) +
theme_void()
map_NE + map_S
earthquakes <- read_csv("https://stahlm.github.io/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv")
earthquakes <- read_csv("https://stahlm.github.io/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv")
earthquakes <- read_csv("https://stahlm.github.io/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv")
earthquakes <- read_csv("https://stahlm.github.io/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv")
earthquakes <- read_csv("https://stahlm.github.io/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv")
earthquakes <- read_csv("https://stahlm.github.io/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv")
earthquakes <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv")
head(earthquakes)
map_world_data <- map_data("world")
earthquake_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude, size = mag, color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 4.5 magnitude in the past 30 days",
subtitle = "Date window: 8-Feb to 10-Mar-2019",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
earthquake_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude, size = mag, color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 4.5 magnitude in the past 30 days",
subtitle = "Date window: 28-Jan to 27-Feb-2020",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
earthquakes <- read_csv("https://stahlm.github.io/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv")
earthquakes <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv")
head(earthquakes)
map_world_data <- map_data("world")
earthquake_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude, size = mag, color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 4.5 magnitude in the past 30 days",
subtitle = "Date window: 28-Jan to 27-Feb-2020",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv") %>%
drop_na()
earthquakes <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv")
head(earthquakes)
earthquakes <- read_csv("https://stahlm.github.io/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv")
earthquakes <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/4.5_month_earthquakes_USGS_2020.csv")
head(earthquakes)
state_mean_temps_pre <- state_temps %>%
filter(Year <= 1960) %>%
group_by(state_cd) %>%
summarize(mean_temp_pre = mean(Avg_Temp_F))
state_mean_temps_post <- state_temps %>%
filter(Year > 1960) %>%
group_by(state_cd) %>%
summarize(mean_temp_post = mean(Avg_Temp_F))
state_mean_temps_change <- left_join(state_mean_temps_post, state_mean_temps_pre) %>%
mutate(temp_change = mean_temp_post - mean_temp_pre)
state_mean_temps_change <- left_join(state_mean_temps_change, state_name_table)
state_mean_temps_change <- state_mean_temps_change %>%
rename(region = state_name)
map_data_usa_temps_change <- left_join(map_data_usa, state_mean_temps_change)
map_data_usa_temps_change %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = temp_change), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
coord_map(projection = "bonne", lat0 = 50) +
labs(title = "Changes in mean temperature",
subtitle = "Difference between post and pre-1960 means",
caption = "Data source: NOAA",
fill = "Temp. increase (deg. F)") +
theme_void()
COVID_data <- readxl::read_xlsx("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/COVID-19_data_2020_02_27.xlsx")
COVID_data <- readxl::read_xlsx("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/COVID-19_data_2020_02_27.xlsx")
COVID_data <- readxl::read_xlsx(path = "https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/COVID-19_data_2020_02_27.xlsx")
COVID_data <- readxl::read_xlsx(path = "https://github.com/stahlm/stahlm.github.io/blob/master/ENS_215/Data/COVID-19_data_2020_02_27.xlsx")
COVID_data <- readxl::read_xlsx(path = "https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/COVID-19_data_2020_02_27.xlsx")
COVID_data <- read.csv(path = "https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/COVID-19_data_2020_02_27.xlsx")
COVID_data <- read.csv(path = "https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/COVID-19_data_2020_02_27.xlsx", skip = 2)
COVID_data <- read.csv(path = "https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/COVID-19_data_2020_02_27.xlsx", skip = 1)
COVID_data <- read.csv(file = "https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/COVID-19_data_2020_02_27.xlsx", skip = 1)
COVID_data <- read.csv(file = "https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/COVID-19_data_2020_02_27.xlsx", skip = 2)
