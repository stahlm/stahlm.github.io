---
title: "R Notebook"
output: html_notebook
---

```{r}
library(tidyverse)
library(osmdata)
library(tigris)
library(sf)
library(tmap)
library(osmplotr)
library(tmaptools)
library(OpenStreetMap)

library(ceramic)
Sys.setenv(MAPBOX_API_KEY = "pk.eyJ1Ijoic3RhaGxtIiwiYSI6ImNrZnJiMDMxbDA0aGsyenFlajhvMzZ4bXUifQ.I7l7fJBAHCQWRwyYozq4ZQ")

```




```{r}
loc2use <- "Paris France"
country <- "France"

state2use <- "MA"
county2use <- "Middlesex"


```


```{r}
bb_values <- getbb(loc2use)

bb_values
```

```{r}
loc_coords <- c(mean(bb_values[1,]),mean(bb_values[2,]))
dem <- cc_elevation(loc_coords, zoom = 13, buffer = 5000)
```

```{r eval = F}
# download from OSM coastline line for your bounding box
coastline_data <- opq(bb_values) %>% 
  add_osm_feature(key = 'natural', value = 'coastline') %>% 
  osmdata_sf()

# create the LINESTRING sf (i.e. the coastline) and the POLYGONS sf (i.e. the
# islands)
coastline <- coastline_data$osm_lines
islands <- coastline_data$osm_polygons

background_data <- tmaptools::read_osm(sf::st_bbox(coastline))
```


ne_download( scale = 110, type = 'countries' )
```{r eval = F}
country_borders <- rnaturalearth::ne_download(scale = 110, type = 'countries') %>% 
  st_as_sf()
```

```{r eval = F}
nat_borders <- country_borders %>% 
  filter(NAME == "Australia")
```


```{r}
streets <- getbb(loc2use) %>%
  opq()%>%
  add_osm_feature(key = "highway", 
                  value = c("motorway", "primary", 
                            "secondary", "tertiary")) %>%
  osmdata_sf()
streets
```


```{r}
small_streets <- getbb(loc2use) %>%
  opq()%>%
  add_osm_feature(key = "highway", 
                  value = c("residential", "living_street",
                            "unclassified",
                            "service", "footway")) %>%
  osmdata_sf()

river <-  getbb(loc2use) %>%
  opq()%>%
  add_osm_feature(key = "waterway", value = "river") %>%
  osmdata_sf()
```



```{r}
if (country == "US") {
  Water_features <- area_water(state = state2use, county = county2use)  # download the data

Water_features <- st_as_sf(Water_features) # convert to an sf object

Linear_water <- linear_water(state = state2use, county = county2use)  # download the data

Linear_water <- st_as_sf(Linear_water) # convert to an sf object
}


```


```{r eval = F}
ggplot() +
  
  geom_sf(data = streets$osm_lines,
          inherit.aes = FALSE,
          color = "#7fc0ff",
          size = .4,
          alpha = .8) +
  geom_sf(data = small_streets$osm_lines,
          inherit.aes = FALSE,
          color = "#ffbe7f",
          size = .2,
          alpha = .6) +
  geom_sf(data = river$osm_lines,
          inherit.aes = FALSE,
          color = "#ffbe7f",
          size = .2,
          alpha = .5) +
  
  geom_sf(data = Linear_water,
          fill = "lightgrey") +         
  
  geom_sf(data = Water_features,
          fill = "lightgrey") + 
  coord_sf(xlim = c(bb_values[1,1], bb_values[1,2]), 
           ylim = c(bb_values[2,1], bb_values[2,2]),
           expand = FALSE) +
  theme_void() +
  theme(plot.background = element_rect(fill = "#282828")
  )
```


```{r eval = F}
nat_borders_cropped <- st_crop(nat_borders, streets$osm_lines)
```



```{r}

if (country == "US") {
  ggplot() +
  geom_sf(data = streets$osm_lines,
          inherit.aes = FALSE,
          color = "black",
          size = .4,
          alpha = .8) +
  geom_sf(data = small_streets$osm_lines,
          inherit.aes = FALSE,
          color = "black",
          size = .4,
          alpha = .6) +
  geom_sf(data = river$osm_lines,
          inherit.aes = FALSE,
          color = "black",
          size = .2,
          alpha = .5) +
  
  geom_sf(data = Linear_water,
          fill = "lightgrey") +         
  
  geom_sf(data = Water_features,
          fill = "lightgrey") + 

  coord_sf(xlim = c(bb_values[1,1], bb_values[1,2]), 
           ylim = c(bb_values[2,1], bb_values[2,2]),
           expand = FALSE) +

  theme_void()
} else{
  
  ggplot() +
  
  #geom_sf(data = coastline, color = "black") +     
    
  geom_sf(data = streets$osm_lines,
          inherit.aes = FALSE,
          color = "black",
          size = .4,
          alpha = .8) +
  geom_sf(data = small_streets$osm_lines,
          inherit.aes = FALSE,
          color = "black",
          size = .4,
          alpha = .6) +
  geom_sf(data = river$osm_lines,
          inherit.aes = FALSE,
          color = "black",
          size = .2,
          alpha = .5) +
    
  

  coord_sf(xlim = c(bb_values[1,1], bb_values[1,2]), 
           ylim = c(bb_values[2,1], bb_values[2,2]),
           expand = FALSE) +

  theme_void()
}


```






```{r}
fname <- str_replace(loc2use, pattern = ", ", replacement = "_")

ggsave(paste(fname,".png", sep = ""), width = 6, height = 6)
```



```{r}


dem_cropped <- raster::projectRaster(dem, crs = raster::crs(streets$osm_lines) ,method = 'bilinear')

dem_cropped[dem_cropped > 0] <- NA
dem_cropped[dem_cropped <= 0] <- 0
```

terrain_palette <- terrain.colors(n = 6)
terrain_palette[1] <- "#0000FF"

tpal2 <- RColorBrewer::brewer.pal(n = 6, name = "Greys")

tm_shape(dem) +
  tm_raster(midpoint = NA, style = "cont",
            breaks = c(0,2,5,10,20,50,100),
            palette = "Greys"
            #style = "cont"
            ) +


```{r eval = F}
Schenectady_map <- tm_shape(dem_cropped, bbox = bb_values) +
  tm_raster(midpoint = NA, style = "cont",
            #breaks = c(0,2,5,10,20,50,100),
            palette = terrain.colors(n = 6)
            #style = "cont"
            ) +
  
  {if(country == "US"){
  tm_shape(Water_features, bbox = bb_values) +
  tm_polygons(col = "blue", border.alpha = 0) +
  
  tm_shape(Linear_water, bbox = bb_values) +
  tm_lines(col = "blue") 
  }} +
  
  
  tm_shape(streets$osm_lines) +
  tm_lines(col = "black", lwd = 0.4, alpha = 0.8) +
  
  tm_shape(small_streets$osm_lines) +
  tm_lines(col = "black", lwd = 0.4, alpha = 0.6) +
  
  
  
  # geom_sf(data = streets$osm_lines,
  #         inherit.aes = FALSE,
  #         color = "black",
  #         size = .4,
  #         alpha = .8) +
  # geom_sf(data = small_streets$osm_lines,
  #         inherit.aes = FALSE,
  #         color = "black",
  #         size = .4,
  #         alpha = .6) +
  
  tm_layout(frame = F, legend.show = F) 
  
  

Schenectady_map
```

