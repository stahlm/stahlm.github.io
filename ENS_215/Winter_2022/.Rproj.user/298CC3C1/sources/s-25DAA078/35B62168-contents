---
title: "Prepare figures and tables"
author: "J. Gehring and M. Stahl"
output:
  html_document:
    df_print: paged
    theme: spacelab
    toc: yes
    toc_float: yes
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo= F, warning=FALSE, message=FALSE, fig.width = 10)
```


```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(tmap)
library(ggridges)
library(ggExtra)
library(spData)
library(sf)
library(gridExtra)
library(lubridate)
library(ggthemes)
```

## Define input parameters
```{r}
d2H_seasonal_diff_threshold <- 7.5
d_excess_threshold <- 0
season_cutoff <- 0.40
```

```{r}
bubble_size <- 0.075 # size of bubbles (points) on the maps
```

```{r}
fig_dpi <- 900
```



## Load data
Determine dominant season
```{r}
load("./Output/Isotope_data_processed/Isotope_dataset_processed.RData")

all_data <- all_data %>% 
  mutate(d_excess__permil = d2H__permil - 8*d18O__permil) %>% 

  mutate(recharge_season = case_when(recharge_prop_season_1 >= 1 - season_cutoff 
                                     ~ "Winter",
                                     recharge_prop_season_1 <= season_cutoff 
                                     ~ "Summer",
                                     recharge_prop_season_1 < 1 - season_cutoff &
                                     recharge_prop_season_1 > season_cutoff ~ "No dominant")) %>% 
  mutate(HUC02_code = as.factor(HUC02_code)) 

all_data <- all_data %>% 
  mutate(sample_dt = ymd(sample_dt)) %>% 
  filter(!is.na(HUC02_code)) %>% 
  filter(sample_dt > ymd("1950-01-01"))
```


Determine dominant season (5 categories)
```{r}
all_data <- all_data %>% 
  mutate(d_excess__permil = d2H__permil - 8*d18O__permil) %>% 

  mutate(recharge_season_5_cats = case_when(recharge_prop_season_1 >= 1 - season_cutoff/2 
                                     ~ "Winter",
                                     
                                     recharge_prop_season_1 < 1 - season_cutoff/2 &
                                     recharge_prop_season_1 > 1 - season_cutoff 
                                     ~ "Slightly Winter",
                                     
                                     recharge_prop_season_1 < season_cutoff &
                                     recharge_prop_season_1 > season_cutoff/2 
                                     ~ "Slightly Summer",
                                     
                                     recharge_prop_season_1 <= season_cutoff/2 
                                     ~ "Summer",
                                     
                                     recharge_prop_season_1 < 1 - season_cutoff &
                                     recharge_prop_season_1 > season_cutoff ~ "No dominant"))

all_data <- all_data %>% 
  mutate(recharge_season_5_cats = factor(recharge_season_5_cats, 
                                            levels = c("Summer", "Slightly Summer",
                                                       "No dominant", "Slightly Winter", "Winter") ))
```


Determine seasonal efficienies (5 categories)
```{r}
all_data <- all_data %>% 
  mutate(recharge_efficiency_5_cats = case_when(recharge_efficiency_ratio_1_2 >= 3  ~ "Winter",
                                                
                                                recharge_efficiency_ratio_1_2 < 3 &
                                                recharge_efficiency_ratio_1_2 >= 3/2 
                                                ~ "Slightly Winter",
                                                
                                                recharge_efficiency_ratio_1_2 < 3/2 &
                                                recharge_efficiency_ratio_1_2 >= 2/3 ~ "No Bias",
                                                
                                                recharge_efficiency_ratio_1_2 < 2/3 &
                                                recharge_efficiency_ratio_1_2 >= 1/3 
                                                ~ "Slightly Summer",
                                                
                                                recharge_efficiency_ratio_1_2 < 1/3 ~ "Summer"
                                                
                                                )
           )


all_data <- all_data %>% 
  mutate(recharge_efficiency_5_cats = factor(recharge_efficiency_5_cats, 
                                            levels = c("Summer", "Slightly Summer",
                                                       "No Bias", "Slightly Winter", "Winter") ))
```



## Function to select samples suitable for seasonal end-member analysis
```{r}
select_applicable_samples <- function(data_in) {
  data_in %>% 
    filter(d_excess__permil >= d_excess_threshold,
           abs(d2H_precip_season_2__permil - d2H_precip_season_1__permil)
           >= d2H_seasonal_diff_threshold,
           recharge_prop_season_1 >= 0,
           recharge_prop_season_1 <= 1,
           !is.na(recharge_efficiency_ratio_1_2)
           )
}
```




## Western states where a mixing calculation is not possible
```{r}
western_data <- all_data %>% 
  filter(state_abb %in% c("ND", "SD", "MT", "WY", "CO", "NM", "ID", "UT", "AZ", "NV", "WA", "OR"))
```

```{r}
num_western <- base::nrow(western_data)
```


```{r}
a<- western_data %>% 
  filter(is.na(recharge_season)) %>% 
  base::nrow()

b <- western_data %>% 
  filter(is.na(recharge_season)) %>% 
  filter(d2H__permil < d2H_precip_season_1__permil) %>% 
  base::nrow()

a/num_western

b/a


```





## Summary of the dataset in use

```{r}
all_data %>% 
  group_by(study_ID) %>% 
  summarize(n = n(),
            n_sites = length(unique(site_ID)))
```


```{r}
all_data %>% 
  select(d2H__permil, d18O__permil, d_excess__permil,
         well_depth__m) %>% 
  skimr::skim()

```

```{r}
all_data %>% 
  select(d2H__permil, d18O__permil, d_excess__permil) %>% 
  summary()
```


### Scatter plot of all data d2H vs. d18O
```{r fig.height= 3.5}
fig_scatter <- all_data %>% 
  ggplot(aes(x = d18O__permil, y = d2H__permil)) +
  geom_point(alpha = 0.25, shape = 21,
             fill = "grey", color = "black") +
  geom_abline(slope = 8, intercept = 10,
              color = "blue", linetype = 2,
              size = 1.1) +
  theme_bw() +
  labs(x = expression(delta^18*"O"),
       y = expression(delta^2*"H")) +
  coord_fixed(ratio = 1/6) 
  
fig_scatter <- ggExtra::ggMarginal(fig_scatter,
                    type = 'histogram',
                    margins = 'both',
                    size = 5,
                    colour = 'black',
                    fill = 'grey')  

ggsave("./Figures/scatter_alldata_d2H_d18O.png", dpi = 500, plot = fig_scatter,
       height = 3.5, width = 3.5)
```




### By HUC02 
```{r}
all_data %>% 
  group_by(HUC02_code) %>% 
  summarize("Samples" = n(),
            "Sample sites" = length(unique(site_ID)),
            "Mean depth (m)" = round(mean(well_depth__m), 1)) %>% 
  janitor::adorn_totals("row") 
```


```{r}
all_data %>% 
  group_by(study_ID) %>% 
  summarize("Samples" = n(),
            "Sample sites" = length(unique(site_ID)),
            "min date" = min(as.Date(sample_dt), na.rm = T),
            "mean date" = mean(as.Date(sample_dt), na.rm = T),
            "max date" = max(as.Date(sample_dt), na.rm = T)) %>% 
  arrange(desc(Samples)) %>% 
  janitor::adorn_totals()
```


### Histograms of samples dates and sample depths and sample d-excess
```{r fig.width= 4}
all_data %>% 
  mutate(sample_dt = as.Date(sample_dt)) %>% 
  filter(!is.na(sample_dt)) %>% 
  ggplot(aes(x = sample_dt)) +
  geom_histogram() +
  theme_few() +
  labs(x = "Year of sample collection",
       y = "Number of samples")

ggsave("./Figures/histogram_sampling_years.png",
       dpi = fig_dpi,
       width = 3,
       height = 2)
```


```{r fig.width= 4}
all_data %>% 
  ggplot(aes(x = well_depth__m)) +
  geom_histogram() +
  theme_few() +
  labs(x = "Well depth (m)",
       y = "Number of samples")

ggsave("./Figures/histogram_well_depth.png",
       dpi = fig_dpi,
       width = 3,
       height = 2)
```

d-excess histogram
```{r fig.width= 4}
all_data %>% 
  ggplot(aes(x = d_excess__permil 
             )) +
  geom_histogram() +
  theme_few() +
  labs(x = "d-excess",
       y = "Number of samples") +
  xlim(-10,20)

ggsave("./Figures/histogram_dexcess.png",
       dpi = fig_dpi,
       width = 3,
       height = 2)


# Just samples with d-excess > 0
all_data %>% 
  select_applicable_samples() %>%  
  ggplot(aes(x = d_excess__permil 
             )) +
  geom_histogram() +
  theme_few() +
  labs(x = "d-excess",
       y = "Number of samples") +
  xlim(0,20)

ggsave("./Figures/histogram_dexcess_gt_0.png",
       dpi = fig_dpi,
       width = 3,
       height = 2)


all_data %>% 
  select_applicable_samples() %>%  
  skimr::skim(d_excess__permil)

table_dexcess <- all_data %>% 
  select_applicable_samples() 

table_dexcess %>% 
  group_by(recharge_season) %>% 
  summarize(dexcess_mean = mean(d_excess__permil),
            dexcess_25th = quantile(d_excess__permil,probs = 0.25),
            dexcess_median = median(d_excess__permil),
            dexcess_75th = quantile(d_excess__permil,probs = 0.75),
            n_lt_5 = sum(d_excess__permil < 5),
            n = n()
            )

table_dexcess %>% 
  group_by(recharge_efficiency_5_cats) %>% 
  summarize(dexcess_mean = mean(d_excess__permil),
            dexcess_25th = quantile(d_excess__permil,probs = 0.25),
            dexcess_median = median(d_excess__permil),
            dexcess_75th = quantile(d_excess__permil,probs = 0.75)
            
            )


table_dexcess %>% 
  filter(recharge_efficiency_5_cats %in% c("Summer", "Slightly Summer")) %>% 
  summarize(dexcess_mean = mean(d_excess__permil),
            dexcess_25th = quantile(d_excess__permil,probs = 0.25),
            dexcess_median = median(d_excess__permil),
            dexcess_75th = quantile(d_excess__permil,probs = 0.75)
            
            )

table_dexcess %>% 
  filter(recharge_efficiency_5_cats %in% c("Summer", "Slightly Summer")) %>% 
  summarize(n_lt_5 = sum(d_excess__permil < 5),
            n = n())
```


## Map of all samples 
```{r}
map_us <- map_data("state")


isotope_map <- map_us %>% 
  ggplot() +
  geom_polygon(aes(long, lat, group = group), fill = "white", color = "black") +
  geom_point(data = all_data, aes(longitude, latitude),
             stroke = 0.25,
             size = 0.7,
             fill = "lightgrey",
             shape = 21) +
  #scale_fill_manual(values = c("red","#FF9999","grey","lightblue","blue")) +
  #scale_color_manual(values = c("red","#FF9999","grey","lightblue","blue")) +
  #scale_shape_manual(values = c(21, 22, 24, 25)) +
  
  # geom_point(data = all_data_map, aes(longitude, latitude, fill = recharge_efficiency_5_cats),
  #            shape = 20, color = "NA", stroke = 1) +
  # scale_fill_manual(values = c("red","#FF9999","grey","lightblue","blue","green")) +

  #scale_color_gradient(low = "blue", high = "red") +
  #labs(title = "Earthquakes > 4.5 magnitude in the past 30 days",
  #     subtitle = "Date window: 8-Feb to 10-Mar-2019",
  #     caption = "Data source: USGS") +
  theme_void() +
  coord_map(projection = "bonne", lat0 = 40) +
  theme(legend.position='none')



isotope_map

ggsave("./Figures/map_all_samples.png",
       isotope_map,
       dpi = fig_dpi,
       width = 4.5,
       height = 4)
```


## Map of seasonal recharge efficiency and proportion

```{r}
all_data <- all_data %>% 
  mutate(season_attribution = case_when(recharge_season == "Winter" &
                                          precip_prop_season_1 >= 0.6 & 
                                          recharge_efficiency_ratio_1_2 >= 3/2 ~ 1,
                                        
                                        recharge_season == "Winter" &
                                        precip_prop_season_1 >= 0.6 & 
                                          recharge_efficiency_ratio_1_2 < 3/2 ~ 2,
                                        
                                        recharge_season == "Winter" &
                                        precip_prop_season_1 < 0.6 ~ 3,
                                        
                                        recharge_season == "Summer" &
                                          precip_prop_season_1 <= 0.4 & 
                                          recharge_efficiency_ratio_1_2 <= 2/3 ~ 1,
                                        
                                        recharge_season == "Summer" &
                                        precip_prop_season_1 <= 0.4 & 
                                          recharge_efficiency_ratio_1_2 > 2/3 ~ 2,
                                        
                                        recharge_season == "Summer" &
                                        precip_prop_season_1 > 0.4 ~ 3,
                                        
                                        recharge_season == "No dominant" ~ 0

                                          ) 
         ) %>% 
  
  mutate(season_attribution = as.factor(season_attribution))

```



```{r}
map_us <- map_data("state")
all_data_map <- all_data %>% 
  select_applicable_samples() 


isotope_map <- map_us %>% 
  ggplot() +
  geom_polygon(aes(long, lat, group = group), fill = "white", color = "black") +
  geom_point(data = all_data_map, aes(longitude, latitude, fill = recharge_season_5_cats,
                                      #color = recharge_efficiency_5_cats,
                                      shape = season_attribution),
             stroke = 0.25,
             size = 1) +
  scale_fill_manual(values = c("red","#FF9999","grey","lightblue","blue")) +
  scale_color_manual(values = c("red","#FF9999","grey","lightblue","blue")) +
  scale_shape_manual(values = c(21, 22, 24, 25)) +
  
  # geom_point(data = all_data_map, aes(longitude, latitude, fill = recharge_efficiency_5_cats),
  #            shape = 20, color = "NA", stroke = 1) +
  # scale_fill_manual(values = c("red","#FF9999","grey","lightblue","blue","green")) +

  #scale_color_gradient(low = "blue", high = "red") +
  #labs(title = "Earthquakes > 4.5 magnitude in the past 30 days",
  #     subtitle = "Date window: 8-Feb to 10-Mar-2019",
  #     caption = "Data source: USGS") +
  theme_void() +
  coord_map(projection = "bonne", lat0 = 40) +
  theme(legend.position='none')



isotope_map

ggsave("./Figures/map_efficiency_proportion.png",
       isotope_map,
       dpi = fig_dpi,
       width = 4.5,
       height = 4)


```



## Make maps of random forest (RF) results for d2H and d18O in groundwater

### Load in RF results raster
```{r}
rf_modeled_GW_d2H <- raster::raster("./Output/RF_model/RF_model_GW_isotopes_H.grd")
rf_modeled_GW_d18O <- raster::raster("./Output/RF_model/RF_model_GW_isotopes_O.grd")
```

### Load in HUC02 boundaries
```{r}
huc02 <- st_read("./Data/spatial_data/HUC02/HUC2_shapefile.shp",
                 stringsAsFactors = FALSE)

huc_regions <- sf::st_simplify(huc02, preserveTopology = T, dTolerance = 0.005  
                              )

huc_regions <- huc_regions %>% 
  filter(huc2 != "19", huc2!= "20", huc2 != "21", huc2 != "22")
```


```{r}
borders_us_states <- spData::us_states
borders_us <- spData::world

borders_us_states <- st_transform(borders_us_states, crs = st_crs(huc_regions))


borders_huc_regions <- huc_regions
```


### Map of GW observations (d2H) minus precip annual isotopes (d2H)
```{r}
map_fig <- 
  
tm_shape(borders_huc_regions, projection = 2163) +
  tm_borders(col = "black", lwd = 2) +
  
tm_shape(borders_us_states) +
  tm_borders(col = "black", lwd = 0.5) +

all_data %>% 
  mutate(GW_minus_precip = d2H__permil - d2H_precip_annual__permil) %>% 
  mutate(GW_minus_precip = if_else(GW_minus_precip >= 20, 21, GW_minus_precip)) %>% 
  mutate(GW_minus_precip = if_else(GW_minus_precip <= -20, -21, GW_minus_precip)) %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "GW_minus_precip",
             border.col = "black",
            palette = "-RdBu",
            midpoint = NA,
            style = "fixed",
            breaks = c(-40,-20,-10,-5,0,5,10,20,40),
            #palette = RColorBrewer::brewer.pal(n = 6, name = "RdBu"),
            shape = 21,
            size = bubble_size*1.25,
          border.lwd = 0.4) +
  tm_legend(legend.position = c("right", "bottom")) +
  tm_layout(frame = F, legend.show = F)

tmap_mode("plot")
map_fig 

tmap_save(map_fig,
          filename = "./Figures/map_GW_minus_precip_points.png",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)

map_fig <- map_fig + 
  tm_layout(legend.show = T, legend.only = T) 

tmap_save(map_fig,
          filename = "./Figures/map_GW_minus_precip_points_legend.svg",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)
```




### d2H map (RF modeled) (with actual observations as points)
Output from random forest model: Groundwater isotopes (raster)  
Points represent actual measured GW values
```{r}
map_fig <- tm_shape(rf_modeled_GW_d2H, projection = 2163) +
  tm_raster(style = "cont", palette = "-RdBu", midpoint = NA,
            breaks = c(-150,-100,-50,0),
            title = expression(delta^2*"H")
            ) +

tm_shape(borders_huc_regions) +
  tm_borders(col = "black", lwd = 2) +
  
tm_shape(borders_us_states) +
  tm_borders(col = "black", lwd = 0.5) +

all_data %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "d2H__permil",
             border.col = "black",
            palette = "-RdBu",
            midpoint = NA,
            style = "cont",
            breaks = c(-150,-100,-50,0),
            shape = 21,
            size = bubble_size,
          border.lwd = 0.4) +
  tm_legend(legend.position = c("right", "bottom")) +
  tm_layout(frame = F)

tmap_mode("plot")
map_fig 

tmap_save(map_fig,
          filename = "./Figures/map_rf_d2H_with_points.png",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)


```




### d18O map (RF modeled)
Output from random forest model: Groundwater isotopes (raster)  
Points are actual observations (i.e. not modeled data)
```{r}
map_fig <- tm_shape(rf_modeled_GW_d18O, projection = 2163) +
  tm_raster(style = "cont", palette = "-RdBu", midpoint = NA,
            title = expression(delta^18*"O"),
            breaks = c(-20,-15,-10,-5,0)
            ) +

tm_shape(borders_huc_regions) +
  tm_borders(col = "black", lwd = 2) +
  
tm_shape(borders_us_states) +
  tm_borders(col = "black", lwd = 0.5) +

all_data %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "d18O__permil",
          border.col = "black",
          palette = "-RdBu",
          breaks = c(-20,-15,-10,-5,0),
          midpoint = NA,
          style = "cont",
          shape = 21,
          border.lwd = 0.4,
          size = bubble_size) +
  tm_legend(legend.position = c("right", "bottom")) +
  tm_layout(frame = F)

tmap_mode("plot")
map_fig 

tmap_save(map_fig,
          filename = "./Figures/map_rf_d18O_with_points.png",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)

```

### RF d2H uncertainty (standard deviation)
```{r}
raster_rf_d2H_stdev <- raster::raster("./Output/RF_model/raster_GW_std_H")

map_fig <- tm_shape(raster_rf_d2H_stdev, projection = 2163) +
    tm_raster(style = "cont", palette = "-RdBu", midpoint = NA,
            title = expression("stdev "*delta^2*"H") 
            ) +
  
    tm_shape(borders_us_states) +
    tm_borders(col = "black", lwd = 0.5) +
    
    tm_legend(legend.position = c("left", "top")) +
    tm_layout(frame = F)


map_fig

tmap_save(map_fig,
          filename = "./Figures/map_rf_d2H_stdev.png",
          dpi = 900,
          height = 5*1.1,
          width = 6*1.1)

```





### RF d18O uncertainty (standard deviation)
```{r}
raster_rf_d2H_stdev <- raster::raster("./Output/RF_model/raster_GW_std_O")

map_fig <- tm_shape(raster_rf_d2H_stdev, projection = 2163) +
    tm_raster(style = "cont", palette = "-RdBu", midpoint = NA,
            title = expression("stdev "*delta^18*"O") 
            ) +
  
    tm_shape(borders_us_states) +
    tm_borders(col = "black", lwd = 0.5) +
    
    tm_legend(legend.position = c("left", "top")) +
    tm_layout(frame = F)


map_fig

tmap_save(map_fig,
          filename = "./Figures/map_rf_d18O_stdev.png",
          dpi = 900,
          height = 5*1.1,
          width = 6*1.1)

```


### Map of d-excess in GW (RF modeled)
Output from random forest model: Groundwater isotopes (raster)  
Points are actual observations (i.e. not modeled data)

Computed as modeled d2H - 8*modeled d18O  
```{r}

max_value <- raster::cellStats(rf_modeled_GW_d2H - 8*rf_modeled_GW_d18O, stat = "max")
min_value <- raster::cellStats(rf_modeled_GW_d2H - 8*rf_modeled_GW_d18O, stat = "min")

map_fig <- tm_shape(rf_modeled_GW_d2H - 8*rf_modeled_GW_d18O, projection = 2163) +
  tm_raster(style = "fixed", palette = RColorBrewer::brewer.pal(n = 7, name = "RdBu"), 
            midpoint = NA,
            breaks = c(min_value-1,-2,0,2,6,10,12,14),
            title = "d-excess"
            ) +
tm_shape(borders_huc_regions) +
  tm_borders(col = "black", lwd = 2) +

tm_shape(borders_us_states) +
  tm_borders(col = "black") +
  
all_data %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "d_excess__permil",
          border.col = "black",
          palette = RColorBrewer::brewer.pal(n = 7, name = "RdBu"),
          midpoint = NA,
          style = "fixed",
          breaks = c(min_value-1,-2,0,2,6,10,12,14),
          shape = 21,
            size = bubble_size) +
  tm_legend(legend.position = c("right", "bottom")) +
  tm_layout(frame = F, legend.show = F) 

tmap_mode("plot")
map_fig 

tmap_save(map_fig,
          filename = "./Figures/map_rf_dexcess_with_points.png",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)

map_fig <- map_fig + 
  tm_layout(legend.show = T, legend.only = T) 

tmap_save(map_fig,
          filename = "./Figures/map_rf_dexcess_with_points_legend.svg",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)

```


## Seasonal recharge proportion summary stats


```{r}
all_data %>% 
  group_by(recharge_season_5_cats) %>% 
  summarise(num_samples = n(),
            num_sites = length(unique(site_ID))) %>% 
  mutate(percent_of_samples = round(100*(num_samples/sum(num_samples)),1)) %>% 
  janitor::adorn_totals("row") 
```


## Recharge seasonal efficiency map
Ratio of efficiency of Winter recharge to Summer recharge - i.e. recharge generated from a unit of precip in Winter divided by recharge generated from a unit of precip in Summer.  

Efficiency ratio is defined as: 
$\frac{recharge_{season1}}{precip_{season1}}/\frac{recharge_{season2}}{precip_{season2}}$

Log of above-mentioned ratio is shown on the map below


```{r}
map_fig <- tm_shape(borders_us_states, projection = 2163) +
  tm_borders(col = "black") +

tm_shape(borders_huc_regions) +
  tm_borders(col = "black", lwd = 2) +
    
all_data %>% 
  select_applicable_samples() %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "recharge_efficiency_ratio_1_2",
          palette = RColorBrewer::brewer.pal(n = 11, name = "RdBu"),
          #midpoint = 1,
          #breaks = c(-1.5,-1,0,1,1.5),
          breaks = c(0.0,0.1,0.3,0.5,0.7,0.9,1,3,5,7,10,20),
          border.col = "black",
          style = "fixed",
          shape = 21,
          size = bubble_size*2,
          title = "") 

map_legend <- map_fig + 
  tm_layout(frame = F,
            legend.only = T,
            legend.position = c("right", "bottom"))

map_fig <-  map_fig + 
  tm_layout(frame = F,
            legend.only = F,
            legend.show = F)


tmap_mode("plot")
map_fig

tmap_save(map_legend,
          filename = "./Figures/map_recharge_efficiency_legend.png",
          dpi = fig_dpi,
          height = 2,
          width = 2)

tmap_save(map_fig,
          filename = "./Figures/map_recharge_efficiency.png",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)

```



## Seasonal difference in precip isotopes at each site
```{r}
fig_map <- tm_shape(borders_us_states, projection = 2163) +
  tm_borders(col = "black") +

tm_shape(borders_huc_regions) +
  tm_borders(col = "black", lwd = 2) +
    
all_data %>% 
  select_applicable_samples() %>% 
  mutate(seasonal_diff_d2H = d2H_precip_season_2__permil - d2H_precip_season_1__permil) %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "seasonal_diff_d2H",
          palette = RColorBrewer::brewer.pal(n = 6, name = "RdBu"),
          #midpoint = 1,
          breaks = c(7,10,15,20,25,30),
          #breaks = c(0.0,0.1,0.3,0.5,0.7,0.9,1,3,5,7,10,20),
          border.col = "black",
          style = "fixed",
          shape = 21,
          size = bubble_size,
          title = "") 

tmap_mode("plot")
fig_map + tm_layout(frame = F, legend.position = c("right", "bottom"))

```

```{r}
map_fig <- tm_shape(borders_us_states, projection = 2163) +
  tm_borders(col = "black") +

tm_shape(borders_huc_regions) +
  tm_borders(col = "black", lwd = 2) +
    
all_data %>% 
  select_applicable_samples() %>% 
  mutate(seasonal_diff_d18O = d18O_precip_season_2__permil - d18O_precip_season_1__permil) %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "seasonal_diff_d18O",
          palette = RColorBrewer::brewer.pal(n = 7, name = "RdBu"),
          #midpoint = 1,
          breaks = c(0,0.5,1,1.5,2,2.5,3,3.5),
          #breaks = c(0.0,0.1,0.3,0.5,0.7,0.9,1,3,5,7,10,20),
          border.col = "black",
          style = "fixed",
          shape = 21,
          size = bubble_size,
          title = "") 

tmap_mode("plot")
map_fig + 
  tm_layout(frame = F, legend.position = c("right", "bottom"))

```







## Data summerized by HUC02 region

### Map of HUCs
```{r}
map_fig <- tm_shape(borders_us_states, projection = 2163) +
  tm_polygons(col = "lightgrey", lwd = 0.5) +

tm_shape(huc_regions) +
  tm_borders(col = "black", lwd = 2) +
  tm_text("huc2", remove.overlap = T,
          size = 2) +

tm_layout(frame = F)

map_fig

tmap_save(map_fig,
          filename = "./Figures/map_HUCs.png",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)


tmap_save(map_fig,
          filename = "./Figures/map_HUCs.svg",
          #dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)
```


### Seasonal recharge efficiency by HUC

Efficiency ratio is defined as: 
$\frac{recharge_{season1}}{precip_{season1}}/\frac{recharge_{season2}}{precip_{season2}}$

For this summary figures by HUC, I am grouping by sample location `site_ID` (to prevent multiple samples from the same well from dominating the results).  Thus, each sample site will have one value (if there are duplicate samples and/or multiple sampling dates then the mean value is used for that site).

Fill is log10 of HUC's median efficiency

```{r fig.width= 5}
fig_boxplot_efficiency_HUC <- all_data %>% 
  select_applicable_samples() %>% 
  group_by(site_ID) %>% 
  summarize(HUC02_code = first(HUC02_code),
            recharge_efficiency_ratio_1_2 = mean(recharge_efficiency_ratio_1_2, na.rm = T)) %>% 
  
  group_by(HUC02_code) %>% 
  mutate(log10_median_recharge_efficiency = median(log10(recharge_efficiency_ratio_1_2))) %>% 
  ggplot(aes(x = reorder(HUC02_code, log10_median_recharge_efficiency,
                         FUN = median), 
             y = recharge_efficiency_ratio_1_2,
             fill = log10_median_recharge_efficiency
             )) +
  geom_hline(yintercept = 1,
             linetype = 2) +
  geom_boxplot(outlier.shape = NA) +
  scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0,
                       limits = c(-1,1), oob = scales::squish
                       ) +
  
  #scale_fill_gradientn(low = "red", high = "blue", midpoint = 1, mid = "white") +
  coord_flip() +
  
  scale_y_log10(breaks = 10^c(-2,-1,0,1,2),
                labels = c("0.01","0.1","1","10","100"),
                limits = c(10^-2,10^2)) +
  theme_bw() +
  labs(x = "HUC02 Region",
       y = "Recharge efficiency ratio (Winter/Summer)",
       fill = "Recharge efficiency")

fig_boxplot_efficiency_HUC

ggsave("./Figures/boxplot_efficiency_HUC.png",
       dpi = fig_dpi,
       height = 3,
       width = 5)
```



#### HUC map color coded by recharge efficiency
```{r}
table_HUC <- all_data %>% 
  select_applicable_samples() %>% 
  group_by(site_ID) %>% 
  summarize(HUC02_code = as.numeric(first(HUC02_code)),
            recharge_efficiency_ratio_1_2 = mean(recharge_efficiency_ratio_1_2, na.rm = T)) %>% 
  
  group_by(HUC02_code) %>% 
  summarize(log10_median_recharge_efficiency = median(log10(recharge_efficiency_ratio_1_2))) 




#tm_shape(borders_us_states, projection = 2163) +
#  tm_polygons(col = "lightgrey", lwd = 0.5) +

map_fig <- huc_regions %>% 
  rename(HUC02_code = huc2) %>% 
  mutate(HUC02_code = as.numeric(HUC02_code)) %>% 
  left_join(table_HUC) %>% 
  
tm_shape(projection = 2163) +
  tm_borders(col = "black", lwd = 2) +
  tm_text("HUC02_code", remove.overlap = T,
          size = 2.5, fontface = "bold") +
  tm_polygons(col = "log10_median_recharge_efficiency", lwd = 2,
              #palette = RColorBrewer::brewer.pal(n = 5, name = "RdBu")
              palette = "RdBu",
              style = "cont",
              breaks = c(-1,0,1)
              ) +

  tm_shape(borders_us_states, projection = 2163) +
  tm_borders(col = NA, lwd = 0.5) +
  
tm_layout(frame = F, legend.show = F)


map_fig

tmap_save(map_fig,
          filename = "./Figures/map_HUCs_efficieny.svg",
          #dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)
```



### Seasonal recharge proportion (Winter/Annual) by HUC

For this summary figures by HUC, I am grouping by sample location `site_ID` (to prevent multiple samples from the same well from dominating the results).  Thus, each sample site will have one value (if there are duplicate samples and/or multiple sampling dates then the mean value is used for that site)

Fill in HUCs median value
```{r fig.width= 5}
fig_boxplot_proportion_HUC <-  all_data %>% 
  select_applicable_samples() %>% 
  group_by(site_ID) %>% 
  summarize(HUC02_code = first(HUC02_code),
            recharge_prop_season_1 = mean(recharge_prop_season_1, na.rm = T)) %>% 
  
  group_by(HUC02_code) %>% 
  mutate(median_recharge_proportion = median(recharge_prop_season_1)) %>% 
  ggplot(aes(x = reorder(HUC02_code, recharge_prop_season_1,
                         FUN = median), 
             y = recharge_prop_season_1,
             fill = median_recharge_proportion
             )) +
  geom_hline(yintercept = 0.4, linetype = 2) +
  geom_hline(yintercept = 0.6, linetype = 2) +
  geom_boxplot(outlier.shape = NA) +
  scale_fill_gradientn(colors = c("red", "white", "blue"),
                       values = c(0,0.5,1),
                       limits = c(0,1)) +
  
  #scale_fill_gradientn(low = "red", high = "blue", midpoint = 1, mid = "white") +
  coord_flip() +
  
  theme_bw() +
  labs(x = "HUC02 Region",
       y = "Recharge proportion (Winter/Annual)",
       fill = "Recharge proportion")

fig_boxplot_proportion_HUC

ggsave("./Figures/boxplot_proportion_HUC.png",
       plot = fig_boxplot_proportion_HUC,
       dpi = fig_dpi,
       height = 3,
       width = 5)
```


#### Map of HUCs color coded by median recharge proportion
```{r}
table_HUC <- all_data %>% 
  select_applicable_samples() %>% 
  group_by(site_ID) %>% 
  summarize(HUC02_code = as.numeric(first(HUC02_code)),
            recharge_prop_season_1 = mean(recharge_prop_season_1, na.rm = T)) %>% 
  
  group_by(HUC02_code) %>% 
  summarize(median_recharge_proportion = median(recharge_prop_season_1))
  


map_fig <- huc_regions %>% 
  rename(HUC02_code = huc2) %>% 
  mutate(HUC02_code = as.numeric(HUC02_code)) %>% 
  left_join(table_HUC) %>% 
  
tm_shape(projection = 2163) +
  tm_borders(col = "black", lwd = 2) +
  tm_text("HUC02_code", remove.overlap = T,
          size = 2.5, fontface = "bold") +
  tm_polygons(col = "median_recharge_proportion", lwd = 2,
              palette = "RdBu",
              breaks = c(0,0.5,1),
              style = "cont",
              midpoint = 0.5) +
  
  tm_shape(borders_us_states, projection = 2163) +
  tm_borders(col = NA, lwd = 0.5) +
  tm_layout(frame = F, legend.show = F)


map_fig

tmap_save(map_fig,
          filename = "./Figures/map_HUCs_proportion.svg",
          #dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)
```




## GW isotopes - precip isotopes maps
### GW isotopes - Annual Precip isotopes map

Map shows the difference between the random forest modeled GW isotopes and the mean annual precipitation isotopes.  
```{r}
raster_precip_d2H_annual <- raster::raster("./Output/precip_isotopes_annual_H.grd")
raster_precip_d18O_annual <- raster::raster("./Output/precip_isotopes_annual_O.grd")
raster_precip_d2H_season_1 <- raster::raster("./Output/precip_isotopes_season_1_H.grd")
raster_precip_d2H_season_2 <- raster::raster("./Output/precip_isotopes_season_2_H.grd")
```

```{r}
raster_d2H_gw_minus_precip_annual <- rf_modeled_GW_d2H - raster_precip_d2H_annual
raster_d18O_gw_minus_precip_annual <- rf_modeled_GW_d18O - raster_precip_d18O_annual
```

#### d2H
```{r}
map_fig <- tm_shape(raster_d2H_gw_minus_precip_annual, projection = 2163) +
  tm_raster(style = "fixed", palette = "-RdBu", midpoint = 0,
            title = expression("GW - Precip (d2H)"),
            breaks = c(-60,-40,-20,-10,-5,0,5,10,20,40,60)
            ) +
tm_shape(borders_huc_regions) +
  tm_borders(col = "black", lwd = 2) +

tm_shape(borders_us_states) +
  tm_borders(col = "black", lwd = 0.5) +
  
tm_layout(frame = F, legend.show = F,
          legend.position = c("right", "bottom"))


map_fig

tmap_save(map_fig,
          filename = "./Figures/map_GW_d2H_minus_Precip_d2H.svg",
          #dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)


map_fig <- map_fig + 
  tm_layout(legend.only = T, legend.show = T)


tmap_save(map_fig,
          filename = "./Figures/map_GW_d2H_minus_Precip_d2H_legend.svg",
          #dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)

```


```{r}
map_fig <- tm_shape(raster_d2H_gw_minus_precip_annual, projection = 2163) +
  tm_raster(style = "fixed", palette = "-RdBu", midpoint = 0,
            title = expression("GW - Precip (d2H)"),
            breaks = c(-60,-40,-20,-10,-5,0,5,10,20,40,60)
            ) +
  
tm_shape(borders_huc_regions, projection = 2163) +
  tm_borders(col = "black", lwd = 2) +
  
tm_shape(borders_us_states) +
  tm_borders(col = "black", lwd = 0.5) +

all_data %>% 
  mutate(GW_minus_precip = d2H__permil - d2H_precip_annual__permil) %>% 
  mutate(GW_minus_precip = if_else(GW_minus_precip >= 20, 21, GW_minus_precip)) %>% 
  mutate(GW_minus_precip = if_else(GW_minus_precip <= -20, -21, GW_minus_precip)) %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "GW_minus_precip",
             border.col = "black",
            palette = "-RdBu",
            midpoint = 0,
            style = "fixed",
            breaks = c(-60,-40,-20,-10,-5,0,5,10,20,40,60),
            #palette = RColorBrewer::brewer.pal(n = 6, name = "RdBu"),
            shape = 21,
            size = bubble_size*1.25,
          border.lwd = 0.4) +
  tm_legend(legend.position = c("right", "bottom")) +
  tm_layout(frame = F, legend.show = F)

tmap_mode("plot")
map_fig 

tmap_save(map_fig,
          filename = "./Figures/map_GW_minus_precip_points_and_raster.png",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)

map_fig <- map_fig + 
  tm_layout(legend.show = T, legend.only = T) 

tmap_save(map_fig,
          filename = "./Figures/map_GW_minus_precip_points_and_raster_legend.svg",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)
```




#### d18O
```{r}
map_fig <- tm_shape(raster_d18O_gw_minus_precip_annual, projection = 2163) +
  tm_raster(style = "fixed", palette = "-RdBu", midpoint = 0,
            title = expression("GW - Precip (d18O)"),
            breaks = c(-10,-6,-4,-2,-1,0,1,2,4,6,10)
            ) +
tm_shape(borders_huc_regions) +
  tm_borders(col = "black", lwd = 2) +

tm_shape(borders_us_states) +
  tm_borders(col = "black", lwd = 0.5) +
  
tm_layout(frame = F, legend.show = F,
          legend.position = c("right", "bottom"))


map_fig

tmap_save(map_fig,
          filename = "./Figures/map_GW_d18O_minus_Precip_d18O.svg",
          #dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)


map_fig <- map_fig + 
  tm_layout(legend.only = T, legend.show = T)


tmap_save(map_fig,
          filename = "./Figures/map_GW_d18O_minus_Precip_d18O_legend.svg",
          #dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)

```




## Precip Winter - Summer d2H

Difference between winter and summer isotopes of precipitation
```{r}
map_fig <- tm_shape(raster_precip_d2H_season_1 - raster_precip_d2H_season_2, projection = 2163) +
  tm_raster(style = "fixed", palette = "-RdBu", midpoint = NA, 
            breaks = c(-50,-40,-30,-20,-10,-5,0,5)
            ) +
  
tm_shape(borders_us_states) +
  tm_borders(col = "black", lwd = 0.5) +
  tm_layout(legend.show = F, frame = F)

map_fig

tmap_save(map_fig,
          filename = "./Figures/map_winter_minus_summer_precip_d2H.png",
          #dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)  
    
map_fig <- map_fig + 
  tm_layout(legend.only = T, legend.show = T)  

tmap_save(map_fig,
          filename = "./Figures/legend_winter_minus_summer_precip_d2H.svg",
          #dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)  
            
```

The difference between winter and summer precipitation isotopes is relatively small (i.e. values are very close) in South FL and along much of the coast of the Gulf of Mexico.  Thus the calculations to determine the seasonal recharge proportions are highly sensitive to slight shifts in GW isotope values.  I think in areas where we have minimal seasonal signal in precip isotopes (maybe < 10 permil difference in d2H) we should avoid making the calculations.  This goes for both the raster and the observed point calculations.  





## Theil-Sen slopes and HUC scatter plots of d2H vs. d18O

### Theil-Sen
```{r eval = T}
sen <- function(..., weights = NULL) {
  mblm::mblm(...)
}


```


```{r fig.width= 7.75, eval = T}

fig_hucs <- all_data %>% 
  #filter(HUC02_code %in% c("1")) %>% 
  ggplot(aes(x = d18O__permil, y = d2H__permil)) +
  geom_point(alpha = 0.5, shape = 21,
             color = "black", fill = "white") +
  geom_abline(slope = 8, intercept = 10, linetype = 2, size = 0.75,
              color = "blue") +
  geom_smooth(method = sen, se = F, color = "red", size = 0.5) +
  facet_wrap(~ HUC02_code, ncol = 5) 

```


```{r fig.width= 7.75, eval = T}

fig_hucs <- fig_hucs +
  coord_fixed(ratio = 1/5.75) +
  labs(x = expression(delta^18*"O"),
       y = expression(delta^2*"H")) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 50, hjust = 1)) +
  theme(strip.text.x = element_text(size = 8, face = "bold", margin = margin(0.1,0,0.1,0,"cm"))) +
  ylim(-150,25)

fig_hucs
```

```{r}
ggsave("./Figures/scatterplot_HUCs_d2H_d18O.png",
       plot = fig_hucs, 
       dpi = fig_dpi,
       width = 5)
```





### Table with regression fits  By HUC02
```{r eval = T}
#a<- mblm::mblm(dataframe = all_data, formula = d2H__permil ~ d18O__permil)

huc_list <- unique(all_data$HUC02_code) 

names <- c("HUC02_code", "theil_slope", "TS_slope_LB", "TS_slope_UB", 
           "theil_intercept","LS_slope", "LS_intercept", "n_samples")

table_fits <- data.frame(matrix(ncol = length(names), nrow = length(huc_list)))

colnames(table_fits) <- names

i_row <- 1 

for (i_huc in huc_list) {
  data_temp <- all_data %>% 
    filter(HUC02_code == i_huc) %>% 
    group_by(site_ID) %>% 
    summarise(HUC02_code = first(HUC02_code),
              d2H__permil = mean(d2H__permil),
              d18O__permil = mean(d18O__permil))
   
  temp_theil <- mblm::mblm(dataframe = data_temp, formula = d2H__permil ~ d18O__permil)
  
  temp_leastsquares <- lm(data = data_temp, formula = d2H__permil ~ d18O__permil)
  
  table_fits$HUC02_code[i_row] <- i_huc
  table_fits$theil_slope[i_row] <- round(temp_theil$coefficients[2],2)
  table_fits$theil_intercept[i_row] <- round(temp_theil$coefficients[1],2)
  
  table_fits$LS_slope[i_row] <- round(temp_leastsquares$coefficients[2],2)
  table_fits$LS_intercept[i_row] <- round(temp_leastsquares$coefficients[1],2)
  
  table_fits$n_samples[i_row] <- nrow(data_temp)
  
  
  n <- nrow(data_temp)
  
  # TS Upper and Lower were computed using the approach outlined in TM4-A7 (Granato 2006)
  TS_upper <- ( ((n*(n-1)/2) + 1.96 * (n*(n-1)*(2*n + 5)/18)^0.5)/2 ) + 1
  TS_upper <- TS_upper/(n*(n-1)/2)
  TS_upper <- quantile(temp_theil$slopes, probs = TS_upper)

  TS_lower <- ( ((n*(n-1)/2) - 1.96 * (n*(n-1)*(2*n + 5)/18)^0.5)/2 )
  TS_lower <- TS_lower/(n*(n-1)/2)
  TS_lower <- quantile(temp_theil$slopes, probs = TS_lower)
  table_fits$TS_slope_LB[i_row] <- round(TS_lower,2)
  table_fits$TS_slope_UB[i_row] <- round(TS_upper,2)  
  
  i_row <- i_row + 1
}

```

```{r eval = T}
table_fits <- table_fits %>% 
  mutate(HUC02_code = as.numeric(HUC02_code)) %>% 
  arrange(HUC02_code)

table_fits
```



```{r eval = T}
table_fits %>% 
  kableExtra::kable()
```


### HUC slope map
```{r eval = T}

map_fig <- tm_shape(borders_us_states, projection = 2163) +
  tm_polygons(col = "black", lwd = 0.5) +

  #HUC02_code
huc_regions %>% 
  rename(HUC02_code = huc2) %>% 
  mutate(HUC02_code = as.numeric(HUC02_code)) %>% 
  left_join(table_fits) %>% 
tm_shape() +
  tm_polygons(col = "theil_slope", lwd = 2,
              palette = RColorBrewer::brewer.pal(n = 11, name = "RdBu")) +
  
  tm_text("HUC02_code", remove.overlap = T, fontface = "bold",
          size = 2.5) +

tm_shape(borders_us_states, projection = 2163) +
  tm_borders(col = "black", lwd = 0.5) +

tm_layout(frame = F) 


map_fig

tmap_save(map_fig,
          filename = "./Figures/map_HUC_theil_slopes.svg",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)

```





## Samples for which a seasonal calculation cannot be made
Fall outside of the mixing line for winter summer precip.  If the GW isotopes are more negative than winter precip mean, then label "winter"; if the GW isotopes are more positive than summer precip mean, then label "summer"

```{r}

tm_shape(borders_huc_regions, projection = 2163) +
  tm_borders(col = "black", lwd = 2) +
  
tm_shape(borders_us_states) +
  tm_borders(col = "black", lwd = 0.5) +

all_data %>% 
  filter(d2H__permil < d2H_precip_season_1__permil | d2H__permil > d2H_precip_season_2__permil) %>% 
  mutate(winter_summer = if_else(d2H__permil < d2H_precip_season_1__permil, "Winter",
                                 "Summer")) %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "winter_summer",
             border.col = "black",
            palette = "RdBu",
            midpoint = 0,
            style = "cont",
            breaks = c(-10,-5,0,5,10,15),
            shape = 21,
            size = 0.15) 

tmap_mode("plot")
```




## California coastal samples

load in raster of fog coverage 
The raster grids in this dataset show the relative amount of summertime fog and low cloud cover (FLCC) over a decade for North and Central Coastal California on a annual basis. Summertime FLCC is calculated as the average FLCC hours per day from an archive of hourly, day and night, June, July, August, and September, 1999 - 2009

```{r}
library(rgdal)
library(RColorBrewer)
dpath<- "./Data/spatial_data/fog_coverage/decadal_rasters/flcc_decadal/w001001.adf"

x <- new("GDALReadOnlyDataset", dpath)
getDriver(x)
getDriverLongName(getDriver(x))
xx<-asSGDF_GROD(x)
raster_fog <- raster::raster(xx)
```


Selecting samples within 100 km of the coast and with d-excess > 0
```{r}

CA_coastal_mix_calc <- all_data %>% 
  select_applicable_samples() %>% 
  filter(state_abb == "CA",
         dist2coast__km <= 100)

# California coastal samples where mixing calc is possible as well as where samples fall outside of mixing bounds (but still have d-excess > 0)

CA_coastal_all <- all_data %>% 
    filter(state_abb == "CA",
           dist2coast__km <= 100,
           d_excess__permil >= d_excess_threshold,
           d2H_precip_season_2__permil - d2H_precip_season_1__permil
           >= d2H_seasonal_diff_threshold
           )  %>% 
  mutate(recharge_season = case_when(is.na(recharge_season) & d2H__permil > d2H_precip_season_2__permil ~ "Summer",
                                     is.na(recharge_season) & d2H__permil < d2H_precip_season_1__permil ~ "Winter",
                                     !is.na(recharge_season) ~ recharge_season)
         )


```


#### get fog coverage values for each sample
```{r}
#CA_samples <- CA_coastal_other

coords2use <- data.frame(x = CA_coastal_all$longitude, y = CA_coastal_all$latitude)

fog_values <- raster::extract(raster_fog, coords2use)

```



```{r}
CA_coastal_all <- CA_coastal_all %>% 
  mutate(fog_hrs = fog_values) %>% 
  filter(!is.na(fog_values))
```



### Map of coastal GW samples in CA
samples where mixing calc is possible as well as where samples fall outside of mixing bounds (but still have d-excess > 0)

If the GW sample is heavier than the summer precip then classify as "Summer" recharge  
If the GW sample is lighter than the winter precip then classify as "Winter" recharge


Raster of fog coverage is shown.  
```{r}
CA_border <- borders_us_states %>% 
  filter(NAME == "California")  

raster_fog_clipped <- raster::crop(raster_fog, CA_border)
raster_fog_clipped <- raster::mask(raster_fog_clipped, CA_border)


CA_map <- CA_border %>%   
tm_shape() +
  tm_borders(col = "black", lwd = 0.5) +
  
raster_fog_clipped %>% 
tm_shape() +
  tm_raster(style = "cont",
            palette = terrain.colors(10),
            title = "Fog (hrs)") +
  
CA_border %>%   
tm_shape(is.master = T) +
  tm_borders(col = "black", lwd = 2) +
  

  
CA_coastal_all %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "recharge_season",
             border.col = "black",
            palette = c("grey","red", "blue"),
            midpoint = 0,
            style = "cont",
            breaks = c(-10,-5,0,5,10,15),
            shape = 21,
            size = 0.15,
            title = "") +
  

  
  tm_legend(legend.position = c("left", "bottom")) +
  tm_layout(frame = F)

tmap_mode("plot")
CA_map

tmap_save(CA_map,
          filename = "./Figures/map_CA_fog_recharge_season.png",
          dpi = fig_dpi,
          height = 5*0.6,
          width = 6*0.6)

tmap_save(CA_map,
          filename = "./Figures/map_CA_fog_recharge_season.svg",
          dpi = fig_dpi,
          height = 5*0.6,
          width = 6*0.6)

```






### Fog coverage vs dominant recharge season
Boxplot of the hours of daily summer fog vs. the groundwater recharge season


```{r fig.width= 5, fig.height= 4}
fig_boxplot_CA_fog <- CA_coastal_all %>% 
  ggplot(aes(x = reorder(recharge_season, -fog_hrs, median)  , y = fog_hrs,
             fill = recharge_season)) + 
  geom_boxplot(outlier.shape = NA, notch = F) +
  scale_fill_manual(values = c("lightgrey", "red", "blue")) +
  geom_jitter(width = 0.25, height = 0, alpha = 0.5,
              color = "black") +
  #geom_hline(yintercept = 2, linetype = 2) +
  theme_bw() +
  ylim(0,15) +
  labs(x = "Calculated groundwater recharge season",
       y = "Daily fog hrs (June-Sept)",
       fill = "Season",
       title = "California Coastal Groundwater",
       subtitle = "Samples within 100 km of the coast") 


fig_boxplot_CA_fog
  
ggsave(filename = "Figures/boxplot_CA_fog_recharge_season.svg",
       plot = fig_boxplot_CA_fog,
       dpi = fig_dpi,
       width = 4)

```




```{r fig.width= 5, fig.height= 4, eval = F}
# This figure was for a class presentation (not for the manuscript)
fig_boxplot_CA_fog <- CA_coastal_all %>% 
  mutate(recharge_season = if_else(recharge_season == "Summer","Yes","No")) %>% 
  ggplot(aes(x = reorder(recharge_season, -fog_hrs, median)  , y = fog_hrs,
             fill = recharge_season)) + 
  geom_boxplot(outlier.shape = NA, notch = T) +
  scale_fill_manual(values = c("blue", "red", "blue")) +
  geom_jitter(width = 0.25, height = 0, alpha = 0.5,
              color = "black") +
  #geom_hline(yintercept = 2, linetype = 2) +
  theme_bw() +
  ylim(0,15) +
  labs(x = "Fog isotopic signature in groundwater",
       y = "Daily fog hrs (June-Sept)",
       fill = "Season",
       title = "California Coastal Groundwater",
       subtitle = "Samples within 100 km of the coast") 


fig_boxplot_CA_fog
  
ggsave(filename = "Figures/boxplot_CA_fog_recharge_season_thesis.svg",
       plot = fig_boxplot_CA_fog,
       dpi = fig_dpi,
       width = 4)

```



## California all samples 
Samples that have d-excess > 0 and have difference between winter and summer precip that is > the threshold we set.  
```{r}
CA_all <- all_data %>% 
    filter(state_abb == "CA",
           d_excess__permil >= d_excess_threshold,
           d2H_precip_season_2__permil - d2H_precip_season_1__permil
           >= d2H_seasonal_diff_threshold
           )  

CA_all$recharge_season_5_cats[is.na(CA_all$recharge_season_5_cats) & 
                                CA_all$d2H__permil > CA_all$d2H_precip_season_2__permil] <- as.factor("Summer")

CA_all$recharge_season_5_cats[is.na(CA_all$recharge_season_5_cats) & 
                                CA_all$d2H__permil < CA_all$d2H_precip_season_1__permil] <- as.factor("Winter")


CA_all <- CA_all %>% 
  mutate(recharge_season_5_cats = as.factor(recharge_season_5_cats))
```


```{r}
CA_border <- borders_us_states %>% 
  filter(NAME == "California")  



CA_map <- CA_border %>%   
tm_shape() +
  tm_borders(col = "black", lwd = 0.5) +
  

CA_border %>%   
tm_shape(is.master = T) +
  tm_borders(col = "black", lwd = 2) +
  

  
CA_all %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "recharge_season_5_cats",
             border.col = "black",
            palette = c("red","#FF9999","grey","lightblue","blue") ,
            midpoint = 0,
            shape = 21,
            size = 0.15,
            title = "") +
  

  
  tm_legend(legend.position = c("left", "bottom")) +
  tm_layout(frame = F)

tmap_mode("plot")
CA_map

tmap_save(CA_map,
          filename = "./Figures/map_CA_recharge_season.png",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)

tmap_save(CA_map,
          filename = "./Figures/map_CA_recharge_season.svg",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)


```




## California all samples (additional map)
Samples that have d-excess > 0 and have difference between winter and summer precip that is > the threshold we set.  
```{r}
CA_all_mix <- all_data %>% 
    select_applicable_samples() %>% 
  filter(!is.na(recharge_season_5_cats),
         state_abb == "CA")

CA_all_no_mix <- all_data %>% 
      filter(state_abb == "CA",
           d_excess__permil >= d_excess_threshold,
           d2H_precip_season_2__permil - d2H_precip_season_1__permil
           >= d2H_seasonal_diff_threshold,
           is.na(recharge_season_5_cats)
           )  

CA_all_no_mix$recharge_season_5_cats[is.na(CA_all_no_mix$recharge_season_5_cats) & 
                                CA_all_no_mix$d2H__permil > CA_all_no_mix$d2H_precip_season_2__permil] <- as.factor("Summer")

CA_all_no_mix$recharge_season_5_cats[is.na(CA_all_no_mix$recharge_season_5_cats) & 
                                CA_all_no_mix$d2H__permil < CA_all_no_mix$d2H_precip_season_1__permil] <- as.factor("Winter")


CA_all_no_mix <- CA_all_no_mix %>% 
  mutate(recharge_season_5_cats = as.factor(recharge_season_5_cats))
```


```{r}
CA_border <- borders_us_states %>% 
  filter(NAME == "California")  



CA_map <- CA_border %>%   
tm_shape() +
  tm_borders(col = "black", lwd = 0.5) +
  

CA_border %>%   
tm_shape(is.master = T) +
  tm_borders(col = "black", lwd = 2) +
  

  
CA_all_mix %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "recharge_season_5_cats",
             border.col = "black",
            palette = c("red","#FF9999","grey","lightblue","blue") ,
            midpoint = 0,
            shape = 21,
            size = 0.15,
            title = "") +

CA_all_no_mix %>% 
  st_as_sf(coords = c("longitude", "latitude")) %>% 
  tm_shape() +
  tm_dots(col = "recharge_season_5_cats",
             border.col = "black",
            palette = c("red","blue") ,
            midpoint = 0,
            shape = 22,
            size = 0.15,
            title = "") +    

  
  tm_legend(legend.position = c("left", "bottom")) +
  tm_layout(frame = F)

tmap_mode("plot")
CA_map

tmap_save(CA_map,
          filename = "./Figures/map_CA_recharge_season_all.png",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)

tmap_save(CA_map,
          filename = "./Figures/map_CA_recharge_season_all.svg",
          dpi = fig_dpi,
          height = 5*1.1,
          width = 6*1.1)


```



```{r}
CA_all_inland_stats <- all_data %>% 
      filter(state_abb == "CA",
           d_excess__permil >= d_excess_threshold,
           d2H_precip_season_2__permil - d2H_precip_season_1__permil
           >= d2H_seasonal_diff_threshold,
           dist2coast__km > 100
           )
```


```{r}
# Inland (100 km from coast) California samples where GW meets all mixing calc criteria though falls outside of the precip end-members
CA_all_inland_stats %>% 
  filter(is.na(recharge_season_5_cats)) %>% 
  nrow()

# Inland (100 km from coast) California samples where GW meets all mixing calc criteria and is lighter than winter end-member
CA_all_inland_stats %>% 
  filter(d2H__permil < d2H_precip_season_1__permil) %>% 
  nrow()


# Inland (100 km from coast) California samples where GW meets ALL mixing calc criteria 
CA_all_inland_stats %>% 
  filter(!is.na(recharge_season_5_cats)) %>% 
  nrow()

CA_all_inland_stats %>% 
  filter(recharge_season_5_cats %in% c("Winter","Slightly Winter", "No dominant")) %>% 
  nrow()
```


## HUC 11 and 12 figures 
```{r}
fig_HUC_11 <- all_data %>% filter(HUC02_code == "11") %>% 
  ggplot(aes(x = d18O__permil, y = d2H__permil, fill = longitude)) + 
  geom_point(color = "black",
             shape = 21,
             size = 2) + 
  scale_fill_viridis_c() +
  geom_abline(slope = 8, intercept = 10,
              color = "blue",
              linetype = 2,
              size = 1) +
  theme_bw() +
  labs(x = expression(delta^18*"O"),
       y = expression(delta^2*"H")) +
  coord_fixed(ratio = 1/10) 

fig_HUC_11

ggsave("./Figures/scatter_HUC_11.png",
       plot = fig_HUC_11,
       dpi = fig_dpi,
       height = 3,
       width = 5)
```


```{r}
fig_HUC_12 <- all_data %>% filter(HUC02_code == "12") %>% 
  ggplot(aes(x = d18O__permil, y = d2H__permil, fill = longitude)) + 
  geom_point(color = "black",
             shape = 21,
             size = 2) + 
  scale_fill_viridis_c() +
  geom_abline(slope = 8, intercept = 10,
              color = "blue",
              linetype = 2,
              size = 1) +
  theme_bw() +
  labs(x = expression(delta^18*"O"),
       y = expression(delta^2*"H")) +
  coord_fixed(ratio = 1/8) 

fig_HUC_12

ggsave("./Figures/scatter_HUC_12.png",
       plot = fig_HUC_12,
       dpi = fig_dpi,
       height = 3,
       width = 5)
```


