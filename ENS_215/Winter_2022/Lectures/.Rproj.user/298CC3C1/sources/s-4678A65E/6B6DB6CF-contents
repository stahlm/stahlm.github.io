---
title: "R Notebook"
output: html_notebook
---


```{r}
library(tidyverse)

library(tmap)
library(sf)
```


```{r}
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Precip_LabData.csv")

```

```{r}
df_monthly_normals <- precip_data %>% 
  filter(Year >= 1980) %>% 
  
  group_by(state_cd, Month) %>% 
  summarize(observation_value = mean(Precip_inches)) %>% 
  
  rename(group_name = state_cd)
```

```{r}
compute_seaonality_indices <- function(df_in) {
  
  df_in <- df_in %>% 
  mutate(month_angle = 15 + (Month-1)*30) %>% 
  mutate(month_angle_radians = 2*pi*(month_angle/360))
  
  
  df_in <- df_in %>% 
    mutate(value_x = observation_value*cos(month_angle_radians),
           value_y = observation_value*sin(month_angle_radians)
         )
  
  
  df_seasonality <- df_in %>% 
    group_by(group_name) %>% 
    
    summarize(value_tot = sum(observation_value),
              value_tot_x = sum(value_x),
              value_tot_y = sum(value_y)
            )
  
  
  df_seasonality <- df_seasonality %>% 
    mutate(SI = (((value_tot_x^2) + (value_tot_y^2))^0.5)/value_tot)
  
  
  df_seasonality <- df_seasonality %>% 
  
  mutate(a_coeff = case_when(value_tot_x <= 0 ~ 180,
                             value_tot_x > 0 & value_tot_y > 0 ~ 0,
                             value_tot_x > 0 & value_tot_y <= 0 ~ 360
                             )) %>% 
  
  mutate(SC = atan(value_tot_y/value_tot_x)*(180/pi) + a_coeff) %>% 
  
  select(-a_coeff)
}
```



```{r}
a <- compute_seaonality_indices(df_monthly_normals)
```






```{r}
df_monthly_normals <-df_monthly_normals %>% 
  mutate(month_angle = 15 + (Month-1)*30) %>% 
  mutate(month_angle_radians = 2*pi*(month_angle/360))
```


```{r}
df_monthly_normals <- df_monthly_normals %>% 
  mutate(prcp_x = prcp_mean_inches*cos(month_angle_radians),
         prcp_y = prcp_mean_inches*sin(month_angle_radians)
         )
```



```{r}
df_seasonality_precip <- df_monthly_normals %>% 
  group_by(state_cd) %>% 
  
  summarize(prcp_tot = sum(prcp_mean_inches),
            prcp_tot_x = sum(prcp_x),
            prcp_tot_y = sum(prcp_y)
            )
```


```{r}
df_seasonality_precip <- df_seasonality_precip %>% 
  mutate(SI = (((prcp_tot_x^2) + (prcp_tot_y^2))^0.5)/prcp_tot)
```


```{r}
df_seasonality_precip <- df_seasonality_precip %>% 
  
  mutate(a_coeff = case_when(prcp_tot_x <= 0 ~ 180,
                             prcp_tot_x > 0 & prcp_tot_y > 0 ~ 0,
                             prcp_tot_x > 0 & prcp_tot_y <= 0 ~ 360
                             )) %>% 
  
  mutate(SC = atan(prcp_tot_y/prcp_tot_x)*(180/pi) + a_coeff) %>% 
  
  select(-a_coeff)
```



```{r fig.width = 4.5, fig.height= 6.5}
df_seasonality_precip %>% 
  ggplot(aes(y = reorder(state_cd, SI), x = SI)) +
  
  geom_point(size = 2)
```

```{r}
df_monthly_normals %>% 
  filter(state_cd %in% c("RI", "CA", "ID")) %>% 
  
  ggplot() +
  geom_col(aes(x = factor(Month), y = prcp_mean_inches)) +
  
  facet_wrap(~ state_cd)
```

```{r}
df_seasonality_precip %>% 
  ggplot(aes(x = SC, y = SI)) +
  
  geom_segment(aes(y = 0, xend = SC, yend = SI)) +
  
  scale_x_continuous(breaks = c(0,90,180,270,360), limits = c(0,360)) +
  coord_polar() 
  
```


```{r}
state_dictionary <- tibble(NAME = state.name, state_cd = state.abb)
```


```{r}
df_seasonality_precip <- df_seasonality_precip %>% 
  left_join(state_dictionary)
```



```{r}
sf_states <- spData::us_states
```


```{r}
sf_seasonality_precip <- sf_states %>% 
  right_join(df_seasonality_precip)
```


```{r}
sf_seasonality_precip %>% 
  tm_shape(bbox = st_bbox(sf_states)) +
  tm_polygons(col = "SI", style = "cont", palette = "viridis")+
  
  tm_shape(sf_states) +
  tm_borders() 
```


## Precipitation and streamflow seasonality: Mohawk Watershed
```{r}
library(dataRetrieval)
library(lubridate)
```






01354500

```{r}
df_stream_data <- readNWISdv(siteNumbers = "01354500",
                             parameterCd = "00060",
                             statCd = "00003") %>% 
  renameNWISColumns()
```



```{r}
df_stream_data <- df_stream_data %>% 
  mutate(Year = year(Date), 
         Month = month(Date),
         Day = day(Date)
         )
```



```{r}
df_stream_monthly_normals <- df_stream_data %>% 
  filter(Year > 2011 & Year < 2022) %>% 
  
  group_by(Month) %>% 
  summarize(flow_mean = mean(Flow, na.rm = T))
```
















