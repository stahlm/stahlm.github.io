scale= 20) +
theme_void()
ggplot() +
geom_density_ridges(data = df_ny,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "green",
fill = "black",
scale= 20) +
theme_void()
ggplot() +
geom_density_ridges(data = df_ny,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "black",
fill = "white",
scale= 20) +
theme_void()
ggplot() +
geom_density_ridges(data = df_ny,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "green",
fill = "black",
scale= 20) +
theme_void() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black")
)
ggplot() +
geom_density_ridges(data = df_ny,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "black",
fill = "white",
scale= 30) +
theme_void()
ggplot() +
geom_density_ridges(data = df_ny,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "black",
fill = "white",
scale= 10) +
theme_void()
ggplot() +
geom_density_ridges(data = df_ny,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "black",
fill = "white",
scale= 15) +
theme_void()
ggplot() +
geom_density_ridges(data = df_ny,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "black",
fill = "white",
scale= 20) +
theme_void()
ggplot() +
geom_density_ridges(data = df_ny,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "green",
fill = "black",
scale= 20) +
theme_void() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "white")
)
ggplot() +
geom_density_ridges(data = df_ny,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "green",
fill = "black",
scale= 20) +
theme_void() +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white")
)
ggplot() +
geom_density_ridges(data = df_ny,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "green",
fill = "black",
scale= 20) +
theme_void() +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "black")
)
ggplot() +
geom_density_ridges(data = df_ny,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "green",
fill = "black",
scale= 20) +
theme_void() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black")
)
library(elevatr)
library(AOI)
library(tmap)
library(tidyverse)
library(ggridges)
library(sf)
loc2use <- aoi_get(state =  "NY")
elevation <- get_elev_raster(loc2use, z = 7, clip = "bbox")
tmap_mode("plot")
fig_map <- elevation %>%
tm_shape() +
tm_raster(style = "cont")
fig_map
border_NY <- USAboundaries::us_states(states = "NY")
fig_map + tm_shape(border_NY) +
tm_borders()
elevation_cropped <- raster::mask(elevation, border_NY) # mask the raster
elevation_cropped <- raster::crop(elevation_cropped, border_NY)
fig_map_cropped <- elevation_cropped %>%
tm_shape() +
tm_raster(style = "cont", palette = "Greys")
fig_map_cropped
## Sample 10000 values
df_ny <- data.frame(raster::sampleRegular(elevation_cropped,
40000, xy=TRUE))
names(df_ny)
names(df_ny)[1]
names(df_ny)[2]
## Sample 10000 values
df_ny <- data.frame(raster::sampleRegular(elevation_cropped,
40000, xy=TRUE))
df_ny <- df_ny %>%
rename(elevation_m = names(df_ny)[3])
ggplot() +
geom_density_ridges(data = df_ny,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "black",
fill = "white",
scale= 20) +
theme_void()
library(elevatr)
library(AOI)
library(tmap)
library(tidyverse)
library(ggridges)
library(sf)
state2use <- "MA"
loc2use <- aoi_get(state =  state2use)
elevation <- get_elev_raster(loc2use, z = 7, clip = "bbox")
tmap_mode("plot")
fig_map <- elevation %>%
tm_shape() +
tm_raster(style = "cont")
fig_map
border_state <- USAboundaries::us_states(states = state2use)
fig_map + tm_shape(border_state) +
tm_borders()
elevation_cropped <- raster::mask(elevation, border_state) # mask the raster
elevation_cropped <- raster::crop(elevation_cropped, border_state)
## Sample 10000 values
df_state <- data.frame(raster::sampleRegular(elevation_cropped,
40000, xy=TRUE))
df_state <- df_state %>%
rename(elevation_m = names(df_state)[3])
ggplot() +
geom_density_ridges(data = df_state,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "black",
fill = "white",
scale= 20) +
theme_void()
ggplot() +
geom_density_ridges(data = df_state,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "green",
fill = "black",
scale= 20) +
theme_void() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black")
)
library(elevatr)
library(AOI)
library(tmap)
library(tidyverse)
library(ggridges)
library(sf)
state2use <- "ME"
loc2use <- aoi_get(state =  state2use)
elevation <- get_elev_raster(loc2use, z = 7, clip = "bbox")
tmap_mode("plot")
fig_map <- elevation %>%
tm_shape() +
tm_raster(style = "cont")
fig_map
border_state <- USAboundaries::us_states(states = state2use)
fig_map + tm_shape(border_state) +
tm_borders()
elevation_cropped <- raster::mask(elevation, border_state) # mask the raster
elevation_cropped <- raster::crop(elevation_cropped, border_state)
## Sample 10000 values
df_state <- data.frame(raster::sampleRegular(elevation_cropped,
40000, xy=TRUE))
df_state <- df_state %>%
rename(elevation_m = names(df_state)[3])
ggplot() +
geom_density_ridges(data = df_state,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "black",
fill = "white",
scale= 20) +
theme_void()
ggplot() +
geom_density_ridges(data = df_state,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "green",
fill = "black",
scale= 20) +
theme_void() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black")
)
library(elevatr)
library(AOI)
library(tmap)
library(tidyverse)
library(ggridges)
library(sf)
state2use <- "NY"
loc2use <- aoi_get(state =  state2use)
elevation <- get_elev_raster(loc2use, z = 7, clip = "bbox")
tmap_mode("plot")
fig_map <- elevation %>%
tm_shape() +
tm_raster(style = "cont")
fig_map
border_state <- USAboundaries::us_states(states = state2use)
fig_map + tm_shape(border_state) +
tm_borders()
elevation_cropped <- raster::mask(elevation, border_state) # mask the raster
elevation_cropped <- raster::crop(elevation_cropped, border_state)
## Sample 10000 values
df_state <- data.frame(raster::sampleRegular(elevation_cropped,
40000, xy=TRUE))
df_state <- df_state %>%
rename(elevation_m = names(df_state)[3])
ggplot() +
geom_density_ridges(data = df_state,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "black",
fill = "white",
scale= 20) +
theme_void()
ggplot() +
geom_density_ridges(data = df_state,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "green",
fill = "black",
scale= 20) +
theme_void() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black")
)
a <- cars
View(a)
a <- mpg
c(1:5)
c(1:2:5)
c(1:10)
View(a)
lake_pH <- c(7.2, 7.4, 6.1, 8.2, 8.5, 4.3, 7.2, 5.8, 7.8, 3.9) # a vector that has pH measurements from several lakes
10 > lake_pH
c(10,5) > lake_pH
examp_list <- list(
letters=c("x","y","z"),
animals=c("cat","dog","bird","fish"),
numbers=1:100,
df=examp_df)
numbers <- c(1:26, NA)
lettersNew <- c(NA, letters) #letters is a special object available from base R
logical <- c(rep(TRUE, 13), NA, rep(FALSE, 13))
examp_df <- data.frame(lettersNew, numbers, logical, stringsAsFactors = FALSE)
examp_list <- list(
letters=c("x","y","z"),
animals=c("cat","dog","bird","fish"),
numbers=1:100,
df=examp_df)
examp_list[1]
examp_list[4]
a<- examp_list[4]
a<- examp_list[[4]]
a<- examp_list[4]
a
a <- 10
a$years <- c(1900:2022)
a <- NA
a$years <- c(1900:2022)
a$years <- 1900:2022
rm(a)
a$years <- 1900:2022
a <- data.frame()
a$years <- 1900:2022
a <- tibble::tibble(years = 1900:2022)
a$temps <- 0
View(a)
rm(a)
library(tidyverse)
library(rnoaa)
dat <- ghcnd(stationid = "AGE00147704")
View(dat)
dat <- ghcnd(stationid = "USW00014735")
dat <- ghcnd(stationid = "GHCND:USW00014735")
View(dat)
ncdc_stations(datasetid='GHCND', locationid='FIPS:12017', stationid='GHCND:USC00084289')
df_met <- read_csv("../Data/Albany_GHCND_2840632.csv")
View(df_met)
year_vec <- seq(1939:2021)
table_stats <- tibble(year = year_vec, ndays = NA)
View(table_stats)
year_vec <- seq(1939,2021)
table_stats <- tibble(year = year_vec,
ndays = NA)
table_stats <- tibble(year = year_vec,
n_days = NA,
n_events = NA
)
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
sum(df_temp$TMIN <= threshold_min)
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
print(sum(df_temp$TMIN <= threshold_min))
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
print(sum(df_temp$TMIN <= threshold_min, na.rm = T))
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min, na.rm = T))
table_stats$n_events[table_stats$year == i_year] <- i_count
}
View(table_stats)
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min, na.rm = T))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min, na.rm = F))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
df_met <- read_csv("../Data/Albany_GHCND_2840632.csv")
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min, na.rm = F))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
head(df_met)
summary(df_met)
table_stats %>% ggplot(aes(x = year, y = n_events)) + geom_point()
table_stats %>% ggplot(aes(x = year, y = n_events)) + geom_point() + geom_smooth()
threshold_min <- 20
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 70
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN >= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 65
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN >= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN >= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
library(tidyverse)
for(i in 1:10){
print(i)
}
majors_union <- c("Environmental Science","Geology","English",
"Chemistry","Math","History","Computer Science")
majors_union
for(i_major in 1:7){
print(majors_union[i_major])
}
for(i_major in 1:7){
print(majors_union[i_major])
print(i_major)
}
seq(0,1, by = 0.1)
seq(0,10, by = 2)
seq(2,10, by = 2)
loop_vec <- seq(2,10, by = 2)
