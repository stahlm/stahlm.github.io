arrange(fuel_data, year)
head(fuel_data) # second way to view the first six rows
dim(fuel_data) # dimensions of `fuel_data`
n_rows <- nrow(fuel_data)
n_cols <- ncol(fuel_data)
summary(fuel_data)
fuel_data <- mutate(fuel_data, hwy2cty = hwy/cty)
summary(fuel_data) # lets look at a summary to see what the new variable looks like
ggplot(data = fuel_data) + geom_point(aes(x = displ, y = hwy))   # create a scatter plot of `hwy` vs `displ`
ggplot(data = fuel_data) + geom_point(aes(x = displ, y = hwy, color = class))   # create a scatter plot of `hwy` vs `displ` and showing the class dipicted by a certain color
us_makes <- c("chevrolet", "dodge", "ford", "jeep", "lincoln", "mercury", "pontiac") # list of U.S car manufacturers
fuel_data <- mutate(fuel_data, region = if_else(manufacturer %in% us_makes, "US", "Foreign")) # this is taking a list with the U.S car manufacturers, cars that part on this list are named as foreign
fuel_data <- mutate(fuel_data,
trans_type = if_else(str_detect(trans, "man"), "man", "auto")) # Making two groups, man for manual and auto for automatic
ggplot(data = fuel_data) + geom_jitter(aes(x = trans_type, y = hwy, color = class),
width = 0.2, height = 0) +
facet_wrap(~ class)
fig_box <- ggplot(fuel_data, aes(x = factor(trans_type), y = hwy)) +
geom_boxplot()
fig_box
table(fuel_data$trans_type)
library(tidyverse)
fuel_data <- mpg
str(fuel_data)
fuel_data <- head(fuel_data, n = 6)
fuel_data
nrow(fuel_data)
ncol(fuel_data)
summary(fuel_data)
fuel_data$hwy2cty <- fuel_data$hwy/fuel_data$cty
ggplot(data = fuel_data) + geom_point(aes(x = hwy , y = displ))
library(tidyverse) # bring up tidyverse package
fuel_data <- mpg # assigning mpg to a new object
str(fuel_data) # looking at the structure of fuel_data
head(fuel_data) # looking at the first 6 lines of fuel_data
dim(fuel_data) # finding the dimensions of fuel_data
n_rows <- nrow(fuel_data) # assigning number of rows to n_rows
n_cols <- ncol(fuel_data) # assigning number of columns to n_cols
summary(fuel_data) # finding summary statistics of fuel_data
fuel_data <- mutate(fuel_data, hwy2cty = hwy/cty) # add ratio of hwy to cty to fuel_data
ggplot(data = fuel_data) + geom_point(aes(x = displ, y = hwy)) # creating graph of relationship between displacement and highway mpg
ggplot(data = fuel_data) + geom_point(aes(x = displ, y = hwy, color = class)) # adding class variable to previous graph
# adding region variable to fuel_data
us_makes <- c("chevrolet", "dodge", "ford", "jeep", "lincoln", "mercury", "pontiac") # list of U.S. manufacturers
fuel_data <- mutate(fuel_data, region = if_else(manufacturer %in% us_makes, "US", "Foreign"))
ggplot(data = fuel_data) + geom_boxplot(aes(group = cyl, y = hwy)) # visualizing relationship between number of cylinders and highway mpg
ggplot(data = fuel_data) + geom_boxplot(aes(group = cyl, y = cty)) # visualizing relationship between number of cylinders and city mpg
ggplot(data = fuel_data) + geom_boxplot(aes(group = cyl, y = hwy2cty)) # visualize relationship between number of cylinders and ratio between highway and city mpg
vehicles <- read_csv("vehicles.csv") # uploading the data set
ggplot(data = fuel_data) + geom_boxplot(aes(x = cyl, y = hwy)) # visualizing relationship between number of cylinders and highway mpg
ggplot(data = fuel_data) + geom_boxplot(aes(group = cyl, y = hwy)) # visualizing relationship between number of cylinders and highway mpg
ggplot(data = fuel_data) + geom_boxplot(aes(x = factor(cyl), y = hwy)) # visualizing relationship between number of cylinders and highway mpg
ggplot(data = fuel_data) + geom_boxplot(aes(group = cyl, y = hwy)) # visualizing relationship between number of cylinders and highway mpg
library(tidyverse) #open tidyverse package
fuel_data <- mpg #save data frame to new object
str(fuel_data) #look at data frame structure elements
fuel_data[1:6,] #look at rows 1 though 6 in data frame
n_rows <- nrow(fuel_data) #see number of rows
n_cols <- ncol(fuel_data) #see number of columns
summary(fuel_data) #look at various aspects computed that provide an overview of the data
fuel_data$hwy_cty_ratio <- fuel_data$hwy/fuel_data$cty #create a new column in the df
summary(fuel_data$hwy_cty_ratio) #find qualitative aspects of new column
ggplot(fuel_data)+
geom_point(aes(displ, hwy)) #plot engine size by mileage for all points
ggplot(fuel_data)+
geom_point(aes(displ, hwy, color=class)) #repeat plot but colored by type of vehicle
us_makes <- c("chevrolet","dodge","ford","jeep",
"lincoln","mercury","pontiac") #list of U.S. manufacturers
fuel_data <- mutate(fuel_data, region = if_else(manufacturer %in% us_makes,"US","Foreign") ) #add us_makes column in data frame
fuel_data_expanded <- read.csv("vehicles.csv") #import larger data frame
library(tidyverse)
fuel_data <- mpg # assigning mpg to a new object
str(fuel_data) #Display the structure of fuel_data
head(fuel_data) #display the first six rows of fuel data
n_rows <- nrow(fuel_data) #Number of rows in fuel_data
ncols <- ncol(fuel_data)  #Number of rows in fuel_data
summary(fuel_data)
fuel_data <- mutate(fuel_data, hwy2cty = hwy/cty)
summary(fuel_data)
ggplot(data = fuel_data) + geom_point(aes(x= displ, y= hwy ))
ggplot(data=fuel_data) + geom_point(aes(x = displ , y = class , color = hwy))
us_makes <- c("chevrolet","dodge","ford","jeep",
"lincoln","mercury","pontiac") # list of U.S. manufacturers
fuel_data <- mutate(fuel_data, region = if_else(manufacturer %in% us_makes,"US","Foreign") )
summary(fuel_data)
ggplot(data = fuel_data) + geom_point(aes(x= year, y= hwy , color = region ))
ggplot(data = fuel_data) + geom_boxplot(aes(x = trans, y = hwy)) +
geom_jitter(aes(x= trans, y= hwy ),alpha = 0.2, width = 0.2)
ggplot(data=fuel_data) + geom_point(aes(x = displ , y = hwy , color = region))
vehicles <- read.csv("https://www.fueleconomy.gov/feg/epadata/vehicles.csv")
#summary(vehicles)
ggplot(data = vehicles) + geom_point(aes(x= year, y= highway08, color = fuelType1))
gt_50 <- filter(vehicles, highway08 >= 50) # new data frame
ggplot(data = gt_50) + geom_point(aes(x = year, y = highway08, color = fuelType1),alpha = 0.4)
vehicles %>%
select(make,model,fuelType1,highway08,year) %>%
filter(fuelType1 == "Regular Gasoline") %>%
top_n(10, highway08) %>%
arrange(desc(highway08))
library(tidyverse) #loads the tidyverse package
library(ggplot2) #loads ggplot2
fuel_data <- mpg #Assigns the mpg data to the fuel_data object
str(fuel_data) #shows the structure of the fuel data frame
fuel_data[1:6, ] #This line of code allows us to print the first 6 rows of `fuel_data`
nrow(fuel_data) #prints the number of rows in `fuel_data`
ncol(fuel_data) #prints the number of columns in `fuel_data`
n_row<- nrow(fuel_data) #assigns the number of rows to an object named `n_row`
n_cols<- ncol(fuel_data) #assigns the number of columns to an object named `n_cols`
summary(fuel_data) #gives us a summary of all of the rows in `fuel_data`
fuel_data<- mutate(fuel_data, hwy2cty = hwy/cty) #ads a row to `fuel_data` that is titled `hwy2cty` and is the product of dividing the `hwy` row by the `cty` row
fuel_data
summary(fuel_data)
ggplot(data = fuel_data) + geom_point(aes(x = hwy, y = displ)) +
xlab("Highway MPG") +
ylab("Cylinder Dsiplacement (liters)") #plots the data from `fuel_data` in a scatter plot, with the x values being the `hwy` row and the y values being the `displ` row
ggplot(data = fuel_data) + geom_point(aes(x = hwy, y = displ, color = class)) + labs (color = "Vehicle Class") +
xlab("Highway MPG") +
ylab("Cylinder Dsiplacement (liters)") #same graph as before but we are now adding the vehicle class to the graph by setting it equal to various colors of the data points
us_makes<- c("chevrolet","dodge","ford","jeep",
"lincoln","mercury","pontiac") #creating a new object that has the names listed
fuel_data<- mutate(fuel_data, region = if_else(manufacturer %in% us_makes, "US", "Foreign")) # creates a new row that checks if the vehicle in the column is part of the `us_makes` list or not. If it is, the column in the new row will read "US". If it isn't, the column in the new row will read "Foreign"
fuel_data
ggplot(data = fuel_data) +
geom_point(aes(x = manufacturer, y = hwy, color = year)) + labs(color = "Year") +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
xlab("Manufacturer") +
ylab("Highway MPG") #plots `fuel_data` with the x values being the `manufacturer` row, the y value being the `hwy` row, and the color of the data point being the `year` row.
dodge_data<- fuel_data %>%
filter(manufacturer %in% c("dodge")) #filtering out only vehicles made by dodge and assigning them to a new object named `dodge_data`
ggplot(data = dodge_data) +
geom_point(aes(x = year, y = hwy, color = model)) +
xlab("Year") +
ylab("Highway MPG") +
labs(color = "Dodge Model")
ggplot(data = dodge_data) +
geom_point(aes(x = model, y = hwy, color = year)) +
xlab("Dodge Model") +
ylab("Highway MPG") +
labs(color = "Year") #plots `dodge_data` with the x values being the `model` row, the y values being the `hwy` row, and the color of the points being the `year` row
ggplot(data = dodge_data) +
geom_point(aes(x = model, y = hwy, color = year, shape = trans)) +
xlab("Dodge Model") +
ylab("Highway MPG") +
labs(color = "Year", shape = "Transmission Type") #same graph as above, but now we are adding new shapes to the data points, which are representative of vehicle transmission type
ggplot(data = dodge_data) +
geom_point(aes(x = model, y = hwy, color = cyl)) +
xlab("Dodge Model") +
ylab("Highway MPG") +
labs(color = "Number of Cylinders") #color now represents the number of cylinders
ggplot(data = dodge_data) +
geom_point(aes(x = year, y = hwy, color = cyl, shape = model)) +
xlab("Year") +
ylab("Highway MPG") +
labs(color = "Number of Cylinders", shape = "Dodge Model") #year is now the x value and shape represents model type
ggplot(data = dodge_data) +
geom_point(aes(x = model, y = hwy, color = cyl, shape = fl)) +
xlab("Dodge Model") +
ylab("Highway MPG") +
labs(color = "Number of Cylinders", shape = "Fuel Type") #fuel type is now represented by the shape of the point
ggplot(data = fuel_data) +
geom_point(aes(x = manufacturer, y = hwy, color = year, shape = fl)) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
xlab("Manufacturer") +
ylab("Highway MPG") +
labs(color = "Year", shape = "Fuel Type")
oe_data<- fuel_data %>%
filter(year %in%  c(2008)) #filters `fuel_data` to select everything from 2008 and assign it to an object called `oe_data`
ggplot(data = oe_data) +
geom_point(aes(x = manufacturer, y = hwy, color = fl)) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
xlab("Manufacturer") +
ylab("Highway MPG") +
labs(color = "Fuel Typel")
ggplot(data = oe_data) +
geom_boxplot(aes(x = fl, y = hwy)) +
ylab("Highway MPG") +
xlab("Fuel Type")
big_data<- read_csv('/Users/IP/Downloads/vehicles.csv') #Reads the downloaded CSV file and assings it to an object names `big_data`
library(tidyverse) # load in tidyverse package
fuel_data <- mpg # assign mpg data to a new object
str(fuel_data) # examine the structure of the dataset
#View() was used in the console
head(fuel_data) # view the first 6 rows of fuel_data
dim(fuel_data) # list dimensions of an object (number of rows and columns)
n_rows <- dim(fuel_data)[1] # assign number of rows to n_rows
n_cols <- dim(fuel_data)[2] # assign number of columns to n_cols
summary(fuel_data) # get summary statistics
fuel_data <- mutate(fuel_data, hwy2cty = hwy/cty) # Use mutate() to create the new variable (hwy2cty) and add it to the fuel_data object
fuel_data # print object to view new variable hwy2cty
# to answer questions below
max(fuel_data$hwy2cty) # view maximum hwy2cty data point to determine if any > 2
min(fuel_data$hwy2cty) # view minimum hwy2cty data point to determine if any < 1
# create a scatter plot of fuel efficiency vs. displacement
ggplot(data = fuel_data) + geom_point(aes(x = displ, y = hwy)) +
ggtitle("Fuel efficiency by engine displacement") +
labs(y = "Fuel efficiency (mpg)", x = "Engine displacement (L)")
# graph displacement vs fuel economy and color points by vehicle class
fig_1 <- ggplot(fuel_data) + geom_point(aes(x = displ, y = hwy, color = model)) +
ggtitle("Fuel efficiency by engine displacement \nin all vehicles") +
labs(y = "Fuel efficiency (mpg)", x = "Engine displacement (L)", color = "Model")
us_makes <- c("chevrolet", "dodge", "ford", "jeep", "lincoln", "mercury", "pontiac") # list of U.S. manufacturers
fuel_data <- mutate(fuel_data, region = if_else(manufacturer %in% us_makes, "US", "Foreign")) # if manufacturer is us_makes, region = US, if manufacturer is not, region = Foreign
# graph displacement vs fuel economy. Data points colored by vehicle model and class differentiated by shape # bivariate based on region
ggplot(fuel_data) + geom_point(aes(x = displ, y = hwy, color = model)) +
facet_wrap(~region) +
ggtitle("Fuel efficiency by engine displacement \nin foreign and US vehicles") +
labs(y = "Fuel efficiency (mpg)", x = "Engine displacement (L)", color = "Model")
US_cars <- fuel_data[fuel_data$region == "US",] # isolate all US manufactured cars
# graph US cars
ggplot(US_cars) + geom_point(aes(x = displ, y = hwy, color = model)) +
ggtitle("Fuel efficiency by engine displacement in US vehicles") +
labs(y = "Fuel efficiency (mpg)", x = "Engine displacement (L)", color = "Model")
US_outlier <- fuel_data[fuel_data$model == "corvette",] # isolate all corvette rows
# graph fuel efficiency of corvettes vs transmission. Examining the US-outlier data set shows that transmission is the only variable that varries within corvettes.
ggplot(US_outlier) + geom_point(aes(x = trans, y = hwy)) +
ggtitle("Fuel efficiency by transmission type in Corvettes") +
labs(y = "Fuel efficiency (mpg)", x = "Transmission type")
# Graph all transmission type against fuel efficiency for all model types to determine if this could be a significant factor in increased fuel efficiency.
ggplot(fuel_data) + geom_point(aes(x = trans, y = hwy, color = model)) +
ggtitle("Fuel efficiency by transmission type \nin all vehicles") +
labs(y = "Fuel efficiency (mpg)", x = "Transmission type", color = "Model")
library(readr) # install readr package to help install expanded EPA vehicle csv file
library(dplyr) # load dplyr
path <- "/Users/emmapuhalski/Documents/Winter 22/ENS_215/Labs/vehicles.csv" # specify path
full_epa <- read_csv(path) #import csv vehicle file
library(tidyverse)
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
library(tidyverse)
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
# add a column with depth categories
shallow <- 50 # threshold for shallow wells (meters)
intermed <- 100 # threshold for intermed wells (meters)
# create categorical variable for well depths
bangladesh_gw <- bangladesh_gw %>%
mutate(depth_cat = case_when(WELL_DEPTH_m <= shallow ~"shallow",
WELL_DEPTH_m > shallow & WELL_DEPTH_m <= intermed ~ "intermed",
WELL_DEPTH_m > intermed ~ "deep"))
# reorder factors
bangladesh_gw <- mutate(bangladesh_gw, depth_cat = factor(depth_cat,ordered = TRUE, levels = c("shallow","intermed","deep" )) )
View(bangladesh_gw)
knitr::opts_chunk$set(comment=NA, fig.width=6, fig.height=3)
library(tidyverse)
library(gapminder)
my_gap <- gapminder # assign the gapminder data to our own data object called my_gap
ggplot(data = my_gap, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point()
ggplot(data = my_gap, mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) + geom_point()
ggplot(data = my_gap, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point(color = "blue")
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(color = "blue")
china_data <- filter(my_gap,
country == "China") # filter rows with data for China
china_data %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line()
my_gap %>%
filter(country == "China") %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line()
euro_data <- filter(my_gap,
continent == "Europe")  # get data just for Europe
euro_data %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_boxplot()
my_gap %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_boxplot()
my_gap %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_violin()
my_gap %>% ggplot(aes(x = lifeExp)) +
geom_histogram()
data_2007 <- filter(my_gap,
year == 2007) # get data for year 2007
data_2007 %>%
ggplot(aes(continent)) +
geom_bar()
my_gap %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_point()
my_gap %>% ggplot(aes(x = year, y = lifeExp)) +
geom_jitter(height = 0)
china_data %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line()
china_data %>% ggplot(aes(x = year, y = gdpPercap)) +
geom_line() +
geom_point()
data_2007 %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop)) +
geom_point()
data_2007 %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(size = 2.5)
data_2007 %>%
ggplot(aes(x = gdpPercap, y = lifeExp, alpha = continent)) +
geom_point()
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = 0.2)
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp, shape = continent)) +
geom_point()
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(shape = 24)
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp, fill = continent)) +
geom_point(shape = 24)
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp, fill = continent)) +
geom_point(shape = 24, color = "gray")
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp, fill = pop)) +
geom_point(shape = 24)
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp, fill = percent_rank(pop))) +
geom_point(shape = 24)
library(gapminder)
library(tidyverse)
my_gap <- gapminder
my_gap %>% ggplot(aes(x = lifeExp)) + geom_histogram() + facet_wrap(~ year)
my_gap %>% ggplot(aes(x = lifeExp*pop/sum(pop))) + geom_histogram() + facet_wrap(~ year)
my_gap %>% ggplot(aes(x = lifeExp)) + geom_histogram() + facet_wrap(~ year)
my_gap %>% ggplot(aes(x = gdpPercap, y = lifeExp)) + geom_hex()
bangladesh_gw %>% ggplot(aes(x = Ca_mgL, y = As_ugL)) + geom_hex()
bangladesh_gw %>% ggplot(aes(x = SO4_mgL, y = As_ugL)) + geom_hex()
my_gap %>% ggplot(aes(x = year, y = lifeExp, color = continent)) +
geom_jitter(height = 0)
my_gap %>% ggplot(aes(x = year, y = lifeExp, color = continent)) +
geom_jitter(height = 0, width = 0.2)
my_gap %>% ggplot(aes(x = year, y = lifeExp, color = continent)) +
geom_jitter(height = 0, width = 0.3)
my_gap %>% ggplot(aes(x = year, y = lifeExp, color = continent)) +
geom_jitter(height = 0, width = 0.5)
my_gap %>% ggplot(aes(x = year, y = lifeExp, color = continent)) +
geom_jitter(height = 0, width = 0.5, alpha =0.5)
library(tidyverse)
library(gapminder)
my_gap <- gapminder # assign the gapminder data to our own data object called my_gap
china_data <- filter(my_gap,
country == "China") # filter rows with data for China
china_data %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line()
china_data %>% ggplot(aes(x = year, y = gdpPercap)) + geom_point()
china_data %>% ggplot(aes(x = year, y = gdpPercap)) + geom_line()
china_data %>% ggplot(aes(x = year, y = gdpPercap)) + geom_line() + geom_point()
china_data %>% ggplot(aes(x = year, y = gdpPercap)) + geom_line() + geom_point(aes(size = population))
china_data %>% ggplot(aes(x = year, y = gdpPercap)) + geom_line() + geom_point(aes(size = pop))
library(tidyverse)
library(gapminder)
my_gap <- gapminder # assign the gapminder data to our own data object called my_gap
china_data <- filter(my_gap,
country == "China") # filter rows with data for China
china_data %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line()
china_data %>%
ggplot(aes(x = year, y = gdpPercap))
china_data %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line()
china_data %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line() +
geom_point()
china_data %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line() +
geom_point(aes(size = pop))
china_data %>%
ggplot(aes(x = year, y = gdpPercap, size = pop)) +
geom_line() +
geom_point()
View(china_data)
library(tidyverse)
library(gapminder)
my_gap <- gapminder # assign the gapminder data to our own data object called my_gap
china_data <- filter(my_gap,
country == "China") # filter rows with data for China
View(china_data)
china_data %>%
ggplot(aes(x = year, y = gdpPercap))
china_data %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line()
china_data %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line() +
geom_point()
china_data %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line() +
geom_point(aes(size = pop))
china_data %>%
ggplot(aes(x = year, y = gdpPercap, size = pop)) +
geom_line() +
geom_point()
knitr::opts_chunk$set(comment=NA, fig.width=6, fig.height=3)
library(tidyverse)
library(gapminder)
my_gap <- gapminder # assign the gapminder data to our own data object called my_gap
ggplot(data = my_gap, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point()
ggplot(data = my_gap, mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) + geom_point()
ggplot(data = my_gap, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point(color = "blue")
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(color = "blue")
china_data <- filter(my_gap,
country == "China") # filter rows with data for China
china_data %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line()
my_gap %>%
filter(country == "China") %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line()
euro_data <- filter(my_gap,
continent == "Europe")  # get data just for Europe
euro_data %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_boxplot()
my_gap %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_boxplot()
my_gap %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_violin()
my_gap %>% ggplot(aes(x = lifeExp)) +
geom_histogram()
data_2007 <- filter(my_gap,
year == 2007) # get data for year 2007
data_2007 %>%
ggplot(aes(continent)) +
geom_bar()
my_gap %>%
ggplot(aes(x = year, y = lifeExp)) +
geom_point()
my_gap %>% ggplot(aes(x = year, y = lifeExp)) +
geom_jitter(height = 0)
china_data %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_line()
china_data %>% ggplot(aes(x = year, y = gdpPercap)) +
geom_line() +
geom_point()
data_2007 %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop)) +
geom_point()
data_2007 %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(size = 2.5)
data_2007 %>%
ggplot(aes(x = gdpPercap, y = lifeExp, alpha = continent)) +
geom_point()
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = 0.2)
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp, shape = continent)) +
geom_point()
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(shape = 24)
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp, fill = continent)) +
geom_point(shape = 24)
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp, fill = continent)) +
geom_point(shape = 24, color = "gray")
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp, fill = pop)) +
geom_point(shape = 24)
my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp, fill = percent_rank(pop))) +
geom_point(shape = 24)
my_gap %>%
ggplot(aes(x = year, y = lifeExp, color = continent, size = pop)) +
geom_jitter()
filter(my_gap, year == 2007) %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.5)
filter(my_gap, year == 2007) %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.5, width = 0.5)
filter(my_gap, year == 2007) %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.5, width = 0.2)
top_2 <- my_gap %>% filter(year == 2007) %>% top_n(2, lifeExp) %>% select(country)
bottom_2 <- my_gap %>% filter(year == 2007) %>% top_n(-2, lifeExp) %>% select(country)
my_gap %>%
filter(country %in% top_2$country | country %in% bottom_2$country) %>%
ggplot(aes(x = year, y = lifeExp, color = country)) + geom_point() + geom_line()
my_gap %>%
ggplot(aes(x = year, y =lifeExp, color = continent, size = pop)) +
geom_jitter(height = 0)
my_gap %>%
filter(year == 2007) %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.5, height = 0)
my_gap %>%
filter(year == 2007) %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_boxplot(fill = "lightblue") +
geom_jitter(alpha = 0.5, height = 0, width = 0.2)
citation(raster)
citation("raster")
