library(sf)
state2use <- "MA"
loc2use <- aoi_get(state =  state2use)
elevation <- get_elev_raster(loc2use, z = 7, clip = "bbox")
tmap_mode("plot")
fig_map <- elevation %>%
tm_shape() +
tm_raster(style = "cont")
fig_map
border_state <- USAboundaries::us_states(states = state2use)
fig_map + tm_shape(border_state) +
tm_borders()
elevation_cropped <- raster::mask(elevation, border_state) # mask the raster
elevation_cropped <- raster::crop(elevation_cropped, border_state)
## Sample 10000 values
df_state <- data.frame(raster::sampleRegular(elevation_cropped,
40000, xy=TRUE))
df_state <- df_state %>%
rename(elevation_m = names(df_state)[3])
ggplot() +
geom_density_ridges(data = df_state,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "black",
fill = "white",
scale= 20) +
theme_void()
ggplot() +
geom_density_ridges(data = df_state,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "green",
fill = "black",
scale= 20) +
theme_void() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black")
)
library(elevatr)
library(AOI)
library(tmap)
library(tidyverse)
library(ggridges)
library(sf)
state2use <- "ME"
loc2use <- aoi_get(state =  state2use)
elevation <- get_elev_raster(loc2use, z = 7, clip = "bbox")
tmap_mode("plot")
fig_map <- elevation %>%
tm_shape() +
tm_raster(style = "cont")
fig_map
border_state <- USAboundaries::us_states(states = state2use)
fig_map + tm_shape(border_state) +
tm_borders()
elevation_cropped <- raster::mask(elevation, border_state) # mask the raster
elevation_cropped <- raster::crop(elevation_cropped, border_state)
## Sample 10000 values
df_state <- data.frame(raster::sampleRegular(elevation_cropped,
40000, xy=TRUE))
df_state <- df_state %>%
rename(elevation_m = names(df_state)[3])
ggplot() +
geom_density_ridges(data = df_state,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "black",
fill = "white",
scale= 20) +
theme_void()
ggplot() +
geom_density_ridges(data = df_state,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "green",
fill = "black",
scale= 20) +
theme_void() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black")
)
library(elevatr)
library(AOI)
library(tmap)
library(tidyverse)
library(ggridges)
library(sf)
state2use <- "NY"
loc2use <- aoi_get(state =  state2use)
elevation <- get_elev_raster(loc2use, z = 7, clip = "bbox")
tmap_mode("plot")
fig_map <- elevation %>%
tm_shape() +
tm_raster(style = "cont")
fig_map
border_state <- USAboundaries::us_states(states = state2use)
fig_map + tm_shape(border_state) +
tm_borders()
elevation_cropped <- raster::mask(elevation, border_state) # mask the raster
elevation_cropped <- raster::crop(elevation_cropped, border_state)
## Sample 10000 values
df_state <- data.frame(raster::sampleRegular(elevation_cropped,
40000, xy=TRUE))
df_state <- df_state %>%
rename(elevation_m = names(df_state)[3])
ggplot() +
geom_density_ridges(data = df_state,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "black",
fill = "white",
scale= 20) +
theme_void()
ggplot() +
geom_density_ridges(data = df_state,
aes(x, y,
group=y,
height = elevation_m),
stat = "identity",
color = "green",
fill = "black",
scale= 20) +
theme_void() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black")
)
a <- cars
View(a)
a <- mpg
c(1:5)
c(1:2:5)
c(1:10)
View(a)
lake_pH <- c(7.2, 7.4, 6.1, 8.2, 8.5, 4.3, 7.2, 5.8, 7.8, 3.9) # a vector that has pH measurements from several lakes
10 > lake_pH
c(10,5) > lake_pH
examp_list <- list(
letters=c("x","y","z"),
animals=c("cat","dog","bird","fish"),
numbers=1:100,
df=examp_df)
numbers <- c(1:26, NA)
lettersNew <- c(NA, letters) #letters is a special object available from base R
logical <- c(rep(TRUE, 13), NA, rep(FALSE, 13))
examp_df <- data.frame(lettersNew, numbers, logical, stringsAsFactors = FALSE)
examp_list <- list(
letters=c("x","y","z"),
animals=c("cat","dog","bird","fish"),
numbers=1:100,
df=examp_df)
examp_list[1]
examp_list[4]
a<- examp_list[4]
a<- examp_list[[4]]
a<- examp_list[4]
a
a <- 10
a$years <- c(1900:2022)
a <- NA
a$years <- c(1900:2022)
a$years <- 1900:2022
rm(a)
a$years <- 1900:2022
a <- data.frame()
a$years <- 1900:2022
a <- tibble::tibble(years = 1900:2022)
a$temps <- 0
View(a)
rm(a)
library(tidyverse)
library(rnoaa)
dat <- ghcnd(stationid = "AGE00147704")
View(dat)
dat <- ghcnd(stationid = "USW00014735")
dat <- ghcnd(stationid = "GHCND:USW00014735")
View(dat)
ncdc_stations(datasetid='GHCND', locationid='FIPS:12017', stationid='GHCND:USC00084289')
df_met <- read_csv("../Data/Albany_GHCND_2840632.csv")
View(df_met)
year_vec <- seq(1939:2021)
table_stats <- tibble(year = year_vec, ndays = NA)
View(table_stats)
year_vec <- seq(1939,2021)
table_stats <- tibble(year = year_vec,
ndays = NA)
table_stats <- tibble(year = year_vec,
n_days = NA,
n_events = NA
)
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
sum(df_temp$TMIN <= threshold_min)
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
print(sum(df_temp$TMIN <= threshold_min))
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
print(sum(df_temp$TMIN <= threshold_min, na.rm = T))
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min, na.rm = T))
table_stats$n_events[table_stats$year == i_year] <- i_count
}
View(table_stats)
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min, na.rm = T))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min, na.rm = F))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
df_met <- read_csv("../Data/Albany_GHCND_2840632.csv")
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min, na.rm = F))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
head(df_met)
summary(df_met)
table_stats %>% ggplot(aes(x = year, y = n_events)) + geom_point()
table_stats %>% ggplot(aes(x = year, y = n_events)) + geom_point() + geom_smooth()
threshold_min <- 20
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 70
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN >= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 65
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN >= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN >= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
library(tidyverse)
for(i in 1:10){
print(i)
}
majors_union <- c("Environmental Science","Geology","English",
"Chemistry","Math","History","Computer Science")
majors_union
for(i_major in 1:7){
print(majors_union[i_major])
}
for(i_major in 1:7){
print(majors_union[i_major])
print(i_major)
}
seq(0,1, by = 0.1)
seq(0,10, by = 2)
seq(2,10, by = 2)
loop_vec <- seq(2,10, by = 2)
library(tidyverse)
library(gapminder)
gapminder
summary(gapminder)
gap_data <- gapminder
filter(gap_data, gdpPercap > 5000)
filter(gap_data, gdpPercap > 5000, year == 2007)
data_2007_highGDP <- filter(gap_data, gdpPercap > 5000, year == 2007)
filter(gap_data, gdpPercap > 5000, continent == "Asia")
# Your code here
filter(gap_data, country == "Canada" | country == "China")
filter(gap_data, country %in% c("Canada", "China"))
# Your code here
gap_data[gap_data$year == 2007 & gap_data$gdpPercap > 5000, ] # the old way in base R
filter(gap_data, year == 2007, gdpPercap > 5000) # with dplyr
gap_sorted <- arrange(gap_data, gdpPercap)
gap_sorted <- arrange(gap_data, desc(gdpPercap))
# Your code here
gap_sorted <- arrange(gap_data, continent, lifeExp)
# your code here
# Your code here
filter(gap_data, year == 2007, continent == "Asia") %>% arrange(gdpPercap)
gap_data %>% filter(year == 2007, continent == "Asia") %>% arrange(gdpPercap)
arrange(filter(gap_data, year == 2007, continent == "Asia"), gdpPercap) # without using pipe operator
select(gap_data, country, year, lifeExp, gdpPercap)
select(gap_data, country, year, lifeExp, GDP_percap = gdpPercap)
# Your code here
gap_data %>% select(-pop,-continent)
gap_data %>% filter(year == 2007, lifeExp < 60, gdpPercap >= 10000)
View(gap_data)
gapminder
a<-gapminder::gapminder_unfiltered
View(a)
gapminder %>% mutate(GDP = gdpPercap*pop) %>% top_n(GDP, 5)
gapminder %>% mutate(GDP = gdpPercap*pop) %>% top_n(5, GDP)
gapminder %>% mutate(GDP = gdpPercap*pop) %>% filter(year == 1952) %>%  top_n(5, GDP)
a <- gapminder %>% filter(year == 2007 | country == "United States")
View(a)
library(tidyverse)
for(i in 1:10){
print(i)
}
majors_union <- c("Environmental Science","Geology","English",
"Chemistry","Math","History","Computer Science")
for(i_major in 1:7){
print(majors_union[i_major])
}
for(i_major in majors_union){
print(i_major)
}
counter_majors <- 0 # Initialize the variable to zero
for(i_major in majors_union){
print(i_major)
counter_majors <- counter_majors + 1 # add one to the counter everytime the loop is run
}
# Your code here
# below is a solution to the above exercise
month_list <- c("January","February","March","April","May",
"June","July","August","September","October","November","December")
day_list <- c(31,28,31,30,31,30,31,31,30,31,30,31)
for(i_mon in 1:length(month_list)){
print( paste(month_list[i_mon],"has",day_list[i_mon],"days") )
}
# Your code here
x_mat <- matrix(1:25, 5, 5, byrow = TRUE)
for(i_row in 1:5){
for(j_col in 1:5){
print(x_mat[i_row, j_col])
}
}
# Your code here
# Below is a solution to the above exercise
n_row <- nrow(x_mat)
n_col <- ncol(x_mat)
for(i_row in 1:n_row){
for(j_col in 1:n_col){
print(x_mat[i_row, j_col])
}
}
x_val <- 30  # initialize x_val
while(x_val > 10){
print(x_val)
x_val <- x_val - 1  # on each loop iteration, subtract 1 from x_val
}
# Your code here
library(readr)
Alb_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/Albany_Temperatures_Nov_2018.csv",
skip = 3)
num_days <- nrow(Alb_temps) # store the number of rows (days) to the num_days variable
freeze_temp <- 32 # water freezing temperature in degress F
for(i_day in 1:num_days){
if(Alb_temps$Avg[i_day] > freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Low risk of freezing"))
} else {
print(paste("On November", Alb_temps$Day[i_day], ": High risk of freezing"))
}
}
# Your code here
# Below is the solution to above exercise
for(i_day in 1:num_days){
if(Alb_temps$Avg[i_day] > freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Low risk of freezing"))
} else{
if(Alb_temps$Max[i_day] <= freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Extreme risk of freezing"))
} else{
print(paste("On November", Alb_temps$Day[i_day], ": High risk of freezing"))
}
}
}
# Below is the solution to above exercise
counter_extreme <- 0
counter_high <- 0
counter_low <- 0
for(i_day in 1:num_days){
if(Alb_temps$Avg[i_day] > freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Low risk of freezing"))
counter_low <- counter_low + 1 # count low risk days
} else{
if(Alb_temps$Max[i_day] <= freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Extreme risk of freezing"))
counter_extreme <- counter_extreme + 1 # count extreme risk days
} else{
print(paste("On November", Alb_temps$Day[i_day], ": High risk of freezing"))
counter_high <- counter_high + 1 # count high risk days
}
}
}
print(paste("Low risk days:", counter_low))
print(paste("High risk days:", counter_high))
print(paste("Extreme risk days:", counter_extreme))
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
year_vec <- seq(1939,2021)
table_stats <- tibble(year = year_vec,
n_days = NA,
n_events = NA
)
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
View(df_met)
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
year_vec <- seq(1939,2021)
year_vec
table_stats <- tibble(year = year_vec,
n_days = NA,
n_events = NA
)
View(table_stats)
threshold_min <- 32
for (i_year in 1940) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
