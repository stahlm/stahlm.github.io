} else {
print(paste("On November", Alb_temps$Day[i_day], ": High risk of freezing"))
}
}
# Your code here
# Below is the solution to above exercise
for(i_day in 1:num_days){
if(Alb_temps$Avg[i_day] > freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Low risk of freezing"))
} else{
if(Alb_temps$Max[i_day] <= freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Extreme risk of freezing"))
} else{
print(paste("On November", Alb_temps$Day[i_day], ": High risk of freezing"))
}
}
}
# Below is the solution to above exercise
counter_extreme <- 0
counter_high <- 0
counter_low <- 0
for(i_day in 1:num_days){
if(Alb_temps$Avg[i_day] > freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Low risk of freezing"))
counter_low <- counter_low + 1 # count low risk days
} else{
if(Alb_temps$Max[i_day] <= freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Extreme risk of freezing"))
counter_extreme <- counter_extreme + 1 # count extreme risk days
} else{
print(paste("On November", Alb_temps$Day[i_day], ": High risk of freezing"))
counter_high <- counter_high + 1 # count high risk days
}
}
}
print(paste("Low risk days:", counter_low))
print(paste("High risk days:", counter_high))
print(paste("Extreme risk days:", counter_extreme))
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
year_vec <- seq(1939,2021)
table_stats <- tibble(year = year_vec,
n_days = NA,
n_events = NA
)
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
View(df_met)
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
year_vec <- seq(1939,2021)
year_vec
table_stats <- tibble(year = year_vec,
n_days = NA,
n_events = NA
)
View(table_stats)
threshold_min <- 32
for (i_year in 1940) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
library(tidyverse)
dams_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Dams_FAO_SelectCols_LabData.csv")
View(dams_data)
dams_data %>% ggplot(aes(x = Dam_height_m)) + geom_histogram()
dams_data %>% ggplot(aes(x = Dam_height_m)) + geom_histogram() + coord_cartesian(xlim = c(0,400))
dams_data %>% ggplot(aes(x = Reservoir_capacity_million_m3)) + geom_histogram()
dams_data %>% ggplot(aes(x = Reservoir_capacity_million_m3)) + geom_histogram() + scale_x_log10()
dams_data %>% ggplot(aes(x = Year_completed, y = Reservoir_capacity_million_m3)) + geom_point()
dams_data %>% ggplot(aes(x = Year_completed, y = Reservoir_capacity_million_m3)) + geom_point() +scale_y_log10()
dams_data %>% ggplot(aes(x = Year_completed, y = Reservoir_capacity_million_m3)) + geom_point()
dams_data %>% ggplot(aes(x = Year_completed, y = Reservoir_capacity_million_m3)) + geom_point() + coord_cartesian(xlim = c(1800,2020))
dams_data %>% ggplot(aes(x = Continent, y = Dam_height_m)) + geom_point()
dams_data %>% ggplot(aes(x = Continent, y = Dam_height_m)) + geom_boxplot()
dams_data %>% ggplot(aes(x = Dam_height_m, y = Latitude)) + geom_point()
dams_data %>% ggplot(aes(x = Dam_height_m, y = Latitude)) + geom_point(alpha = 0.1)
dams_data %>% ggplot(aes(y = Dam_height_m, x = Latitude)) + geom_point(alpha = 0.1)
dams_data %>% ggplot(aes(y = Dam_height_m, x = Latitude)) + geom_point(alpha = 0.1) + geom_smooth()
unique(dams_data$Major_basin)
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
a<-gapminder::gapminder
library(tidyverse)
rm(a)
library(tidyverse)
library(gapminder)
my_gap <- gapminder
View(my_gap)
filter(my_gap, year >= 1990)
my_gap2 <-filter(my_gap, year >= 1990)
filter(my_gap, gdpPercap > 20000)
filter(my_gap, gdpPercap > 20000)
my_gap %>%
filter(lifeExp > 80)
library(tidyverse)
fuel_data <- mpg
str(fuel_data)
head(fuel_data, 6)
n_rows <- nrow(fuel_data) # number of rows
n_rows
n_cols <- ncol(fuel_data) # number of columns
n_cols
summary(fuel_data)
# Use mutate() to create the new variable (hwy2cty) and add it to the fuel_data object
fuel_data <- fuel_data %>% mutate(hwy2cty = hwy/cty)
# determine whether any vehicle gets better gas mileage in the city as compared to the highway
# this would occur when the ratio of hwy/cty < 1
fuel_data %>% filter(hwy2cty < 1)
# determine whether any vehicle has twice as good gas mileage on the highway relative to the city
# this would occur when hwy/cty > 2
fuel_data %>% filter(hwy2cty > 2)
# find the largest ratio between highway and city gas mileage.
max_hwy_cty <- max(fuel_data$hwy2cty)
max_hwy_cty
# scatter plot of hwy vs displacement
size_engine_plot <- ggplot(fuel_data)+
geom_point(aes(x = displ, y = hwy))+
geom_smooth(aes(x = displ, y = hwy), method = 'lm')+
# position the figure caption to the left of the plot
labs(caption = "Figure 1. Plot of engine displacement (litres) versus highway miles per gallon from 1999 and 2008 for 38 popular models\nof cars.")+
theme(plot.caption = element_text(hjust = 0))+
xlab("engine displacement (litres)")+
ylab("highway miles per gallon")
size_engine_plot
# scatter plot of hwy versus displacement, colored by class
plot_by_class <- ggplot(fuel_data)+
geom_point(aes(x = displ, y = hwy, color = class))+
geom_smooth(aes(x = displ, y = hwy))+
# position the figure caption to the left of the plot
labs(caption = "Figure 2. Plot of engine displacement (litres) versus highway miles per gallon from 1999 and 2008 for 38 popular\nmodels of cars. Points are colored by vehicle class.")+
theme(plot.caption = element_text(hjust = 0))+
xlab("engine displacement (litres)")+
ylab("highway miles per gallon")
plot_by_class
us_makes <- c("chevrolet","dodge","ford","jeep",
"lincoln","mercury","pontiac") # list of U.S. manufacturers
# add column for region to fuel_data
fuel_data <- mutate(fuel_data, region = if_else(manufacturer %in% us_makes,"US","Foreign"))
# box plot of hwy versus time
time_series_hwy <- ggplot(fuel_data)+
geom_boxplot(aes(x = factor(year), y = hwy))+
# position the figure caption to the left of the plot
labs(caption = "Figure 3. Plot of highway miles per gallon from 1999 and 2008 for 38 popular models of cars.")+
theme(plot.caption = element_text(hjust = 0))+
xlab("year")+
ylab("highway miles per gallon")
time_series_hwy
# determine whether US or foreign cars are more fuel efficient
region_plot <- ggplot(fuel_data)+
geom_point(aes(x = region, y = hwy))+
# position the figure caption to the left of the plot
labs(caption = "Figure 4. Plot of highway miles per gallon from 1999 and 2008 for 38 popular models of cars by region.")+
theme(plot.caption = element_text(hjust = 0))+
xlab("region")+
ylab("highway miles per gallon")
region_plot
# make a box plot by car type versus fuel efficiency
class_hwy_plot <- ggplot(fuel_data)+
geom_boxplot(aes(x = class, y = hwy))+
# position the figure caption to the left of the plot
labs(caption = "Figure 5. Plot of highway miles per gallon from 1999 and 2008 for 38 popular models of cars by vehicle class.")+
theme(plot.caption = element_text(hjust = 0))+
xlab("vehicle class")+
ylab("highway miles per gallon")
class_hwy_plot
# group by class, then summarize to see hwy statistics
class_hwy_group <- fuel_data %>%
group_by(class) %>%
summarize(mean_hwy = mean(hwy), sd_hwy = sd(hwy))
class_hwy_group
# get the count of unique model types for class of subcompact
subcompact_subset <- filter(fuel_data, class == "subcompact")
count_subcompact <- unique(subcompact_subset$model)
count_subcompact
length(count_subcompact)
# get the count of unique model types for class of 2seater
twoseater_subset <- filter(fuel_data, class == "2seater")
count_twoseater <- unique(twoseater_subset$model)
count_twoseater
length(count_twoseater)
expanded_epa_dataset <- read.csv('vehicles.csv')
head(expanded_epa_dataset, 3)
subset_vehicle_df <- expanded_epa_dataset %>% filter(ghgScore > -1)
ghg_fuel_type_plot <- ggplot(subset_vehicle_df)+
geom_boxplot(aes(x = reorder(fuelType, ghgScore), y = ghgScore))+
theme(axis.text.x = element_text(angle = 90))+
# position the figure caption to the left of the plot
labs(caption = "Figure 6. Plot of fuel type versus greenhouse gas score from 1984 to 2022. Data were obtained from a full EPA\nfuel efficiency dataset.")+
theme(plot.caption = element_text(hjust = 0))+
xlab("fuel type")+
ylab("greenhouse gas score")
ghg_fuel_type_plot
library(tidyverse)
dams_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Dams_FAO_SelectCols_LabData.csv")
library(tidyverse)
library(sf)
library(tmap)
dams_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Dams_FAO_SelectCols_LabData.csv")
dams_sf <- dams_data %>%
filter(!is.na(Latitude),
!is.na(Longitude)
) %>%
st_as_sf(coords = c("Longitude", "Latitude"))
world_sf <- spData::world
world_sf %>%
tm_shape() +
tm_borders()
world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots()
View(dams_sf)
world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "blue")
world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "red")
map_all_dams <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "red")
map_all_dams
tmap_mode("view")
map_all_dams
tmap_mode("view")
map_all_dams
map_all_dams
tmap_mode("view")
map_all_dams
dams_sf <- dams_data %>%
filter(!is.na(Latitude),
!is.na(Longitude)
) %>%
select(Latitude, Longitude)
st_as_sf(coords = c("Longitude", "Latitude"))
dams_sf <- dams_data %>%
filter(!is.na(Latitude),
!is.na(Longitude)
) %>%
select(Latitude, Longitude) %>%
st_as_sf(coords = c("Longitude", "Latitude"))
map_all_dams <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "red")
map_all_dams
tmap_mode("plot")
map_all_dams <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "red")
map_all_dams
tmap_mode("view")
map_all_dams
tmap_mode("plot")
View(dams_data)
dams_sf_anim <- dams_data %>%
filter(!is.na(Latitude),
!is.na(Longitude),
!is.na(Year_completed)
) %>%
select(Latitude, Longitude, Year_completed) %>%
st_as_sf(coords = c("Longitude", "Latitude"))
dams_sf_anim <- dams_data %>%
filter(!is.na(Latitude),
!is.na(Longitude),
!is.na(Year_completed)
) %>%
filter(Year_completed > 1700) %>%
select(Latitude, Longitude, Year_completed) %>%
st_as_sf(coords = c("Longitude", "Latitude"))
map_all_dams_anim <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "red") +
tm_facets(along = "Year_completed")
map_all_dams_anim <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "red") +
tm_facets(along = "Year_completed")
tmap_animation(map_all_dams_anim, filename = "dams_years.gif", delay = 25)
map_all_dams_anim <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf_anim) +
tm_dots(col = "red") +
tm_facets(along = "Year_completed")
tmap_animation(map_all_dams_anim, filename = "dams_years.gif", delay = 25)
dams_sf_anim <- dams_data %>%
filter(!is.na(Latitude),
!is.na(Longitude),
!is.na(Year_completed)
) %>%
filter(Year_completed > 1950) %>%
select(Latitude, Longitude, Year_completed) %>%
st_as_sf(coords = c("Longitude", "Latitude"))
map_all_dams_anim <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf_anim) +
tm_dots(col = "red") +
tm_facets(along = "Year_completed", free.coords = F)
tmap_animation(map_all_dams_anim, filename = "dams_years.gif", delay = 25)
dams_sf_anim <- dams_data %>%
filter(!is.na(Latitude),
!is.na(Longitude),
!is.na(Year_completed)
) %>%
filter(Year_completed > 1700) %>%
select(Latitude, Longitude, Year_completed) %>%
st_as_sf(coords = c("Longitude", "Latitude"))
map_all_dams_anim <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf_anim) +
tm_dots(col = "red") +
tm_facets(along = "Year_completed", free.coords = F)
tmap_animation(map_all_dams_anim, filename = "dams_years.gif", delay = 10)
tmap_mode("plot")
map_all_dams <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "red", size = 1)
map_all_dams
tmap_mode("plot")
map_all_dams <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "red", size = 0.2)
map_all_dams
tmap_mode("plot")
map_all_dams <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "red", size = 0.1)
map_all_dams
tmap_mode("plot")
map_all_dams <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "red", size = 0.05)
map_all_dams
map_all_dams_anim <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf_anim) +
tm_dots(col = "red", size = 0.1) +
tm_facets(along = "Year_completed", free.coords = F)
tmap_animation(map_all_dams_anim, filename = "dams_years.gif", delay = 15)
tmap_mode("plot")
map_all_dams <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "red", size = 0.05) +
tm_layout(bg.color = "skyblue", inner.margins = c(0, .02, .02, .02))
map_all_dams
tmap_mode("plot")
map_all_dams <- world_sf %>%
tm_shape() +
tm_polygons() +
tm_shape(dams_sf) +
tm_dots(col = "red", size = 0.05) +
tm_layout(bg.color = "skyblue", inner.margins = c(0, .02, .02, .02))
map_all_dams
map_all_dams_anim <- world_sf %>%
tm_shape() +
tm_polygons() +
tm_shape(dams_sf_anim) +
tm_dots(col = "red", size = 0.1) +
tm_facets(along = "Year_completed", free.coords = F)
tmap_animation(map_all_dams_anim, filename = "dams_years.gif", delay = 15)
map_all_dams_anim <- world_sf %>%
tm_shape() +
tm_polygons(col = "lightgrey") +
tm_shape(dams_sf_anim) +
tm_dots(col = "red", size = 0.1) +
tm_facets(along = "Year_completed", free.coords = F)
tmap_animation(map_all_dams_anim, filename = "dams_years.gif", delay = 15)
world_sf %>%
tm_shape() +
tm_polygons(col = "lightgrey") +
tm_shape(dams_sf_anim) +
tm_dots(col = "red", size = 0.1)
map_all_dams_anim <- world_sf %>%
tm_shape() +
tm_polygons(col = "lightgrey") +
tm_shape(dams_sf_anim) +
tm_dots(col = "red", size = 0.1) +
tm_facets(along = "Year_completed", free.coords = F)
tmap_animation(map_all_dams_anim, filename = "dams_years.gif", delay = 15)
tmap_mode("view")
map_all_dams
map_all_dams
tmap_mode("plot")
map_all_dams <- world_sf %>%
tm_shape() +
tm_polygons() +
tm_shape(dams_sf) +
tm_dots(col = "red", size = 0.05)
#tm_layout(bg.color = "skyblue", inner.margins = c(0, .02, .02, .02))
map_all_dams
tmap_mode("view")
map_all_dams
tmap_mode("plot")
map_all_dams <- world_sf %>%
tm_shape() +
tm_borders() +
tm_shape(dams_sf) +
tm_dots(col = "red", size = 0.05)
#tm_layout(bg.color = "skyblue", inner.margins = c(0, .02, .02, .02))
map_all_dams
tmap_mode("view")
map_all_dams
library(tidyverse)
library(readr) # we'll use this package later in the lecture to load in files from our class website
library(gapminder)
my_gap <- gapminder
my_gap_2007 <- filter(my_gap, year == 2007)
summarize(my_gap_2007, avg_life = mean(lifeExp), avg_gdp_per_cap = mean(gdpPercap) )
# Your code here
my_gap_2007 <- group_by(my_gap_2007, continent) # group the data by continent
summarize(my_gap_2007, min_life = min(lifeExp), mean_life = mean(lifeExp), max_life = max(lifeExp))
my_gap <- group_by(my_gap, continent, year) # group by continent then year
summarize(my_gap, min_life = min(lifeExp), mean_life = mean(lifeExp), max_life = max(lifeExp))
my_gap <- ungroup(my_gap) # ungroup the my_gap data
my_gap %>%
group_by(year) %>%
top_n(3, gdpPercap)
my_gap %>%
group_by(year) %>%
top_n(3, gdpPercap) %>%
arrange(year)
# Your code here
# Your code here
# Your code here
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Precip_LabData.csv")
state_data %>% group_by(Month) %>%
summarize(m_avg = mean(Precip_inches),
m_min = min(Precip_inches),
m_max = max(Precip_inches))
state_2_get <- "CA" # Abbreviation code for state I want to select
state_data <- filter(precip_data, state_cd == state_2_get)
state_data %>% group_by(Month) %>%
summarize(m_avg = mean(Precip_inches),
m_min = min(Precip_inches),
m_max = max(Precip_inches))
state_data %>%
group_by(Year) %>%
summarize(tot_ann_precip = sum(Precip_inches))
t3 <- precip_data %>%
group_by(state_cd, Year) %>%
summarize(annual_precip = sum(Precip_inches))
t3 %>%
group_by(Year) %>%
top_n(1, annual_precip) %>%
arrange(Year)
t5 <- precip_data %>%
group_by(state_cd, Year) %>%
summarize(tot_annual_precip = sum(Precip_inches)) %>%
group_by(state_cd) %>%
summarize(mean_precip = mean(tot_annual_precip),
min_precip = min(tot_annual_precip),
max_precip = max(tot_annual_precip)) %>%
arrange(desc(mean_precip))
View(t5)
state_data <- mutate(state_data, season = if_else(Month %in% c(3,4,5,6,7,8), "season-1", "season-2"))
t6 <-  state_data %>%
group_by(Year, season) %>%
summarize(precip_seasonal = sum(Precip_inches)) %>%
group_by(Year) %>%
summarize(precip_ratio = first(precip_seasonal)/sum(precip_seasonal) )
View(t6)
View(my_gap)
my_gap %>% group_by(continent) %>% mean(lifeExp)
my_gap %>% group_by(continent) %>% mean(lifeExp, na.rm = T)
