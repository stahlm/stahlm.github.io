geom_col(aes(x = date, y = prcp), color = "black") +
labs(y = "Precipitation (inches)") +
theme_bw()
(fig_01 / fig_02) +
plot_annotation(title = paste(loc2use,": Temperature and precipitation", sep = ""),
caption = "Data source: GridMET",
tag_levels = "a"
)
henri = getGridMET(aoi_get(state = c("NY", "NJ","CT","MA")),
param = "prcp",
startDate = "2021-08-16", endDate = "2021-08-24")
#> Spherical geometry (s2) switched off
#> Spherical geometry (s2) switched on
#rasterVis::levelplot(henri$gridmet_prcp, par.settings = BTCTheme, main = "Hurricane Henri")
r_inches <- r/25.4
r = raster::stack(henri)
r_inches <- r/25.4
tmap_mode("plot")
fig_map <- r_inches %>%
tm_shape() +
tm_raster(style = "cont") +
tm_shape(spData::us_states) +
tm_borders()
fig_map
tmap_mode("view")
fig_map
fig_map
a <- 100^2
a
?na.omit
a_vec <- seq(1,10, by = 1.0)
b_vec <- rep(5,10)
a_vec <= 7
a_vec > b_vec
a_vec == b_vec
getwd()
getwd()
getwd()
# install.packages("tidyverse")
# install.packages("plotly")
library(tidyverse)
library(lubridate)
## Load in data
met_data <- read_csv('http://stahlm.github.io/ENS_215/Data/Blue_Hills_MA_Precip_Temp_Data_1.csv')
met_data <- mutate(met_data, DATE = parse_date_time(DATE,"mdy")) # convert date into computable format
met_data <- select(met_data, -c(TOBS)) # remove the TOBS column, since we won't use it
View(met_data)
## Load in data
met_data <- read_csv('http://stahlm.github.io/ENS_215/Data/Blue_Hills_MA_Precip_Temp_Data_1.csv')
met_data <- mutate(met_data, DATE = parse_date_time(DATE,"mdy")) # convert date into computable format
met_data <- select(met_data, -c(TOBS)) # remove the TOBS column, since we won't use it
# install.packages("tidyverse")
# install.packages("plotly")
library(tidyverse)
library(lubridate)
## Load in data
met_data <- read_csv('http://stahlm.github.io/ENS_215/Data/Blue_Hills_MA_Precip_Temp_Data_1.csv')
met_data <- mutate(met_data, DATE = parse_date_time(DATE,"mdy")) # convert date into computable format
met_data <- select(met_data, -c(TOBS)) # remove the TOBS column, since we won't use it
head(met_data) # shows us the first few rows and provides info about data types
tail(met_data) # shows us the last few rows and provides info about data types
summary(met_data)
ggplot(met_data) +
geom_line(aes(x = DATE, y = PRCP),color = "blue")
met_data_2000_2010 <- filter(met_data, year(DATE) >= 2000, year(DATE) <= 2010) # new data frame
ggplot(met_data_2000_2010) +
geom_line(aes(x = yday(DATE), y = PRCP), color = "blue") +
facet_wrap(~year(DATE)) # plot the data
met_data <- mutate(met_data,year_val = year(DATE), month_val = month(DATE), day_val = day(DATE)) # add columns for year, month, and day
annual_precip <- group_by(met_data,year_val) # group the data by year
annual_precip<- summarise(annual_precip,tot_precip = sum(PRCP,na.rm = TRUE)) # create a new data frame that has the total annual precipitation (inches)
ggplot(annual_precip) +
geom_line(aes(x = year_val, y = tot_precip),color = "blue") +
geom_point(aes(x = year_val, y = tot_precip),color = "black")
ggplot(met_data) +
geom_bar(aes(x = DATE, y = PRCP),color = "blue")
ggplot(met_data) +
geom_col(aes(x = DATE, y = PRCP),color = "blue")
ggplot(met_data) +
geom_line(aes(x = DATE, y = PRCP),color = "blue")
filter(annual_precip, year_val == 1962)
filter(annual_precip, year_val == 1963)
filter(annual_precip, year_val == 1964)
filter(annual_precip, year_val == 1965)
# Group the data by year and month
monthly_precip <- group_by(met_data, year_val, month_val) %>%
summarise(tot_precip = sum(PRCP, na.rm = TRUE))
# Create a box plot of the monthly precipitation data
fig_box <- ggplot(monthly_precip, aes(x=factor(month_val), y=tot_precip)) +
geom_boxplot()
fig_box
# Group the data by year and month
monthly_precip <- group_by(met_data, year_val, month_val) %>%
summarise(tot_precip = sum(PRCP, na.rm = TRUE))
# Create a box plot of the monthly precipitation data
fig_box <- ggplot(monthly_precip, aes(x=factor(month_val), y=tot_precip)) +
geom_boxplot()
fig_box
# Group the data by year and month
monthly_precip <- group_by(met_data, year_val, month_val) %>%
summarise(tot_precip = sum(PRCP, na.rm = TRUE))
# Create a box plot of the monthly precipitation data
fig_box <- ggplot(monthly_precip, aes(x=factor(month_val), y=tot_precip)) +
geom_boxplot()
fig_box
?geom_boxplot()
# Group the data by year and month
monthly_precip <- group_by(met_data, year_val, month_val) %>%
summarise(tot_precip = sum(PRCP, na.rm = TRUE))
# Create a box plot of the monthly precipitation data
fig_box <- ggplot(monthly_precip, aes(x=factor(month_val), y=tot_precip)) +
geom_boxplot()
fig_box
summary(annual_precip)
sum(2,4,6)
paste("Mason","Stahl")
paste("Mason","Stahl", sep = ",")
paste("Mason","Stahl", sep = ", ")
rev(paste("Mason","Stahl", sep = ", "))
x + 2
sum(2,2, NA)
sum(2,2, NA, na.rm = T)
library(tidyverse)
library(AOI)
library(tidyverse)
library(lubridate)
## Load in data
met_data <- read_csv('http://stahlm.github.io/ENS_215/Data/Blue_Hills_MA_Precip_Temp_Data_1.csv')
met_data <- mutate(met_data, DATE = parse_date_time(DATE,"mdy")) # convert date into computable format
met_data <- select(met_data, -c(TOBS)) # remove the TOBS column, since we won't use it
sum[2,2]
sums(2,2)
addition(2,2)
SuM(2,2)
2+2
a <- 10
sum(2,4,6,8)
Sum(2,4,6,8)
sum(2,4)
sum[2,4]
2+2\
2+2
library(tidyverse)
library(lubridate)
met_data <- read_csv('http://stahlm.github.io/ENS_215/Data/Blue_Hills_MA_Precip_Temp_Data_1.csv')
View(met_data)
met_data <- mutate(met_data, DATE = parse_date_time(DATE,"mdy")) # convert date into computable format
met_data <- select(met_data, -c(TOBS)) # remove the TOBS column, since we won't use it
head(met_data)
tail(met_data)
summary(met_data)
ggplot(met_data) +
geom_line(aes(x = DATE, y = PRCP),color = "blue")
met_data_2000_2010 <- filter(met_data, year(DATE) >= 2000, year(DATE) <= 2010) # new data frame
ggplot(met_data_2000_2010) +
geom_line(aes(x = yday(DATE), y = PRCP), color = "blue") +
facet_wrap(~year(DATE)) # plot the data
met_data <- mutate(met_data, year_val = year(DATE), month_val = month(DATE), day_val = day(DATE)) # add columns for year, month, and day
annual_precip <- group_by(met_data,year_val) # group the data by year
annual_precip <- summarise(annual_precip,tot_precip = sum(PRCP,na.rm = TRUE)) # create a new data frame that has the total annual precipitation (inches)
View(annual_precip)
ggplot(annual_precip) +
geom_line(aes(x = year_val, y = tot_precip),color = "blue") +
geom_point(aes(x = year_val, y = tot_precip),color = "black")
ggplot(annual_precip) +
geom_line(aes(x = year_val, y = tot_precip),color = "blue") +
geom_point(aes(x = year_val, y = tot_precip),color = "black") +
geom_smooth(aes(x = year_val, y = tot_precip))
ggplot(annual_precip) +
geom_line(aes(x = year_val, y = tot_precip),color = "blue") +
geom_point(aes(x = year_val, y = tot_precip),color = "black") +
geom_smooth(aes(x = year_val, y = tot_precip), method = "lm")
filter(annual_precip, year_val == 1965)
install.packages("elevatr")
library(elevatr)
library(AOI)
loc2use <- aoi_get(x = "Union College")
loc2use <- aoi_get(x = c("Union College", 2,2) )
loc2use <- aoi_get(x = list("Union College", 2,2) )
elevation <- get_elev_raster(loc2use, z = 9)
raster::plot(elevation)
library(elevatr)
library(AOI)
library(tmap)
elevation %>%
tm_shape() +
tm_raster()
elevation %>%
tm_shape() +
tm_raster(midpoint = NA)
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont")
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont")
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont") +
tm_shape(loc2use) +
tm_borders()
elevation <- get_elev_raster(loc2use, z = 9, clip = "bbox")
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont") +
tm_shape(loc2use) +
tm_borders()
elevation <- get_elev_raster(loc2use, z = 2, clip = "bbox")
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont") +
tm_shape(loc2use) +
tm_borders()
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont") +
tm_shape(loc2use) +
tm_borders()
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont") +
tm_shape(loc2use) +
tm_borders()
elevation <- get_elev_raster(loc2use, z = 14, clip = "bbox")
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont") +
tm_shape(loc2use) +
tm_borders()
loc2use <- aoi_get(x = list("Union College", 5,5) )
elevation <- get_elev_raster(loc2use, z = 14, clip = "bbox")
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont") +
tm_shape(loc2use) +
tm_borders()
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont", palette = "terrain") +
tm_shape(loc2use) +
tm_borders()
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont", palette = "terra") +
tm_shape(loc2use) +
tm_borders()
tmaptools::palette_explorer
tmaptools::palette_explorer()
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont") +
tm_shape(loc2use) +
tm_borders()
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont")
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont") +
tm_iso()
contour(elevation)
contour(elevation$file37f8693c1df0)
raster::contour(elevation)
elev_contours <- raster::rasterToContour(elevation)
tm_shape(elev_contours) +
tm_iso()
tm_shape(elev_contours) +
tm_iso()
loc2use <- aoi_get(x = list("Union College", 10,10) )
elevation <- get_elev_raster(loc2use, z = 14, clip = "bbox")
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont")
elev_contours <- raster::rasterToContour(elevation)
tm_shape(elev_contours) +
tm_iso()
a <- c(1,2,3)
as.integer(a)
a<- as.integer(a)
a
a[1]
a == a
a +1
a +1.1
b<- a+1.1
seq(1,10,by = 1.5)
seq(1,10,by = 2)
seq(1,10,by = 0.1)
x <- 10 # create an object called x
x + 5
y + 5
paste("Mason", "Stahl")
paste("Mason", "Stahl", sep = "")
paste("Mason", "Stahl", sep = ",")
paste("Mason", "Stahl", sep = ", ")
mean(5,2,5,2)
mean(5,2,5,2,10,25)
mean(5,2,5,2,10,25)
mean(5,2,5,2,10,25,50)
mean(c(5,2,5,2,10,25,50))
mean(c(5,2,5,2,10,25,NA))
mean(c(5,2,5,2,10,25,NA), na.rm = T)
2 + 2 # add
10 -5 # subtraction
10*10 # multiply
3^4 # exponents
10/2.5 # division
50 %% 7
50 %% 7
24 %% 12
50 %% 7
25 %% 12
51 %% 7
25 %% 12  # modulus
4 > 2 # greater than
4 < 2 # less than
4 < 2 # less than
4 >= 2
4 <= 2
10 = 10
10 == 11
10 == 10
10 == 10
10 != 10
10 == 10
10 != 5
name_student_01 <- "Mason"
name_student_01 <- "Mason"
name_student_02 <- "Stahl"
name student_01 <- "Mason"
name_student_01 <- "Mason"
name_student_02 <- "Stahl"
studentname3 <- "Mike"
ls()
rm(name_student_01)
rm(name_student_01)
df <- "a"  # character
df_char <- "a"  # character
df_numeric <- 2.25 # numeric
df_char <- "a"  # character
df_numeric <- 2.25 # numeric
df_int <-  1
df_char <- "a"  # character
df_numeric <- 2.25 # numeric
df_int <-  as.int(1)
df_char <- "a"  # character
df_numeric <- 2.25 # numeric
df_int <-  as.integer(1)
df_char <- "a"  # character
df_numeric <- 2.25 # numeric
df_int <-  as.integer(5)
df_char <- "a"  # character
df_numeric <- 2.25 # numeric
df_int <-  as.integer(5)
df_logical <- TRUE
df_char <- "a"  # character
df_numeric <- 2.25 # numeric
df_int <-  as.integer(5)
df_logical <- FALSE
df_char <- "a"  # character
df_numeric <- 2.25 # numeric
df_int <-  as.integer(5)
df_logical <- T
1/0
0/0
majors_vec <- c("Environmental Science","Geology","Chemistry")
majors_vec <- c("Environmental Science","Geology","Chemistry")
majors_vec
majors_vec <- c("Environmental Science","Geology","Chemistry", 10.5)
majors_vec
majors_vec <- c("Environmental Science","Geology","Chemistry")
majors_vec
num_vec <- c(1, 10, 5034.253, -1.045)
logical_vec <- c(T, F, F, F, T)
logical_vec
length(logical_vec)
class(num_vec)
library(elevatr)
library(AOI)
library(tmap)
loc2use <- aoi_get(x = list("Union College", 10,10) )
View(loc2use)
elevation <- get_elev_raster(loc2use, z = 14, clip = "bbox")
tmap_mode("view")
elevation %>%
tm_shape() +
tm_raster(midpoint = NA, style = "cont")
elev_contours <- raster::rasterToContour(elevation)
tm_shape(elev_contours) +
tm_iso()
elevation
library(elevatr)
library(AOI)
library(tmap)
loc2use <- aoi_get(state =  "NY")
elevation <- get_elev_raster(loc2use, z = 3, clip = "bbox")
elevation %>%
tm_shape() +
tm_raster()
elevation <- get_elev_raster(loc2use, z = 6, clip = "bbox")
elevation %>%
tm_shape() +
tm_raster()
elevation %>%
tm_shape() +
tm_raster(breaks = 10)
elevation %>%
tm_shape() +
tm_raster(breaks = c(0,100,200,300,500,1000,2000))
elevation %>%
tm_shape() +
tm_raster(style = "quantile")
elevation <- get_elev_raster(loc2use, z = 7, clip = "bbox")
elevation %>%
tm_shape() +
tm_raster(style = "cont")
border_NY <- USAboundaries::us_states(states = "NY")
tmap_mode("plot")
fig_map <- elevation %>%
tm_shape() +
tm_raster(style = "cont")
fig_map
fig_map + tm_shape(border_NY) +
tm_borders()
elevation_cropped <- raster::mask(elevation, border_NY) # mask the raster
elevation_cropped <- raster::crop(elevation_cropped, border_NY)
fig_map_cropped <- elevation_cropped %>%
tm_shape() +
tm_raster(style = "cont")
fig_map_cropped
elev_contours <- raster::rasterToContour(elevation_cropped)
tm_shape(elev_contours) +
tm_iso()
elev_contours <- raster::rasterToContour(elevation)
tm_shape(elev_contours) +
tm_iso()
fig_map_cropped <- elevation_cropped %>%
tm_shape() +
tm_raster(style = "cont", palette = "greys")
fig_map_cropped
fig_map_cropped <- elevation_cropped %>%
tm_shape() +
tm_raster(style = "cont", palette = "grey")
fig_map_cropped
tmaptools::palette_explorer()
fig_map_cropped <- elevation_cropped %>%
tm_shape() +
tm_raster(style = "cont", palette = "Greys")
fig_map_cropped
elmat = raster_to_matrix(elevation_cropped)
elmat = raster::raster_to_matrix(elevation_cropped)
elmat = rayshader::raster_to_matrix(elevation_cropped)
library(rayshader)
elmat = rayshader::raster_to_matrix(elevation_cropped)
#We use another one of rayshader's built-in textures:
elmat %>%
sphere_shade(texture = "desert") %>%
plot_map()
elmat = rayshader::raster_to_matrix(elevation)
#We use another one of rayshader's built-in textures:
elmat %>%
sphere_shade(texture = "desert") %>%
plot_map()
elmat = rayshader::raster_to_matrix(elevation)
#We use another one of rayshader's built-in textures:
elmat %>%
sphere_shade(texture = "desert", zscale = 10) %>%
plot_map()
elmat = rayshader::raster_to_matrix(elevation)
#We use another one of rayshader's built-in textures:
elmat %>%
sphere_shade(texture = "desert", zscale = 100) %>%
plot_map()
elmat = rayshader::raster_to_matrix(elevation)
#We use another one of rayshader's built-in textures:
elmat %>%
sphere_shade(texture = "desert", zscale = 0.2) %>%
plot_map()
elmat = rayshader::raster_to_matrix(elevation)
#We use another one of rayshader's built-in textures:
elmat %>%
sphere_shade(texture = "desert", zscale = 0.2, sunangle = 45) %>%
plot_map()
elmat = rayshader::raster_to_matrix(elevation)
#We use another one of rayshader's built-in textures:
elmat %>%
sphere_shade(texture = "unicorn", zscale = 0.2, sunangle = 45) %>%
plot_map()
elmat = rayshader::raster_to_matrix(elevation)
#We use another one of rayshader's built-in textures:
elmat %>%
sphere_shade(texture = "imhof1", zscale = 0.2, sunangle = 45) %>%
plot_map()
elmat = rayshader::raster_to_matrix(elevation)
#We use another one of rayshader's built-in textures:
elmat %>%
sphere_shade(texture = "bw", zscale = 0.2, sunangle = 45) %>%
plot_map()
