fill = "black",
scale= 20) +
theme_void() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black")
)
a <- cars
View(a)
a <- mpg
c(1:5)
c(1:2:5)
c(1:10)
View(a)
lake_pH <- c(7.2, 7.4, 6.1, 8.2, 8.5, 4.3, 7.2, 5.8, 7.8, 3.9) # a vector that has pH measurements from several lakes
10 > lake_pH
c(10,5) > lake_pH
examp_list <- list(
letters=c("x","y","z"),
animals=c("cat","dog","bird","fish"),
numbers=1:100,
df=examp_df)
numbers <- c(1:26, NA)
lettersNew <- c(NA, letters) #letters is a special object available from base R
logical <- c(rep(TRUE, 13), NA, rep(FALSE, 13))
examp_df <- data.frame(lettersNew, numbers, logical, stringsAsFactors = FALSE)
examp_list <- list(
letters=c("x","y","z"),
animals=c("cat","dog","bird","fish"),
numbers=1:100,
df=examp_df)
examp_list[1]
examp_list[4]
a<- examp_list[4]
a<- examp_list[[4]]
a<- examp_list[4]
a
a <- 10
a$years <- c(1900:2022)
a <- NA
a$years <- c(1900:2022)
a$years <- 1900:2022
rm(a)
a$years <- 1900:2022
a <- data.frame()
a$years <- 1900:2022
a <- tibble::tibble(years = 1900:2022)
a$temps <- 0
View(a)
rm(a)
library(tidyverse)
library(rnoaa)
dat <- ghcnd(stationid = "AGE00147704")
View(dat)
dat <- ghcnd(stationid = "USW00014735")
dat <- ghcnd(stationid = "GHCND:USW00014735")
View(dat)
ncdc_stations(datasetid='GHCND', locationid='FIPS:12017', stationid='GHCND:USC00084289')
df_met <- read_csv("../Data/Albany_GHCND_2840632.csv")
View(df_met)
year_vec <- seq(1939:2021)
table_stats <- tibble(year = year_vec, ndays = NA)
View(table_stats)
year_vec <- seq(1939,2021)
table_stats <- tibble(year = year_vec,
ndays = NA)
table_stats <- tibble(year = year_vec,
n_days = NA,
n_events = NA
)
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
sum(df_temp$TMIN <= threshold_min)
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
print(sum(df_temp$TMIN <= threshold_min))
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
print(sum(df_temp$TMIN <= threshold_min, na.rm = T))
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min, na.rm = T))
table_stats$n_events[table_stats$year == i_year] <- i_count
}
View(table_stats)
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min, na.rm = T))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min, na.rm = F))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
df_met <- read_csv("../Data/Albany_GHCND_2840632.csv")
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min, na.rm = F))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
head(df_met)
summary(df_met)
table_stats %>% ggplot(aes(x = year, y = n_events)) + geom_point()
table_stats %>% ggplot(aes(x = year, y = n_events)) + geom_point() + geom_smooth()
threshold_min <- 20
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 70
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN >= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 65
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN >= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN >= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
library(tidyverse)
for(i in 1:10){
print(i)
}
majors_union <- c("Environmental Science","Geology","English",
"Chemistry","Math","History","Computer Science")
majors_union
for(i_major in 1:7){
print(majors_union[i_major])
}
for(i_major in 1:7){
print(majors_union[i_major])
print(i_major)
}
seq(0,1, by = 0.1)
seq(0,10, by = 2)
seq(2,10, by = 2)
loop_vec <- seq(2,10, by = 2)
library(tidyverse)
library(gapminder)
gapminder
summary(gapminder)
gap_data <- gapminder
filter(gap_data, gdpPercap > 5000)
filter(gap_data, gdpPercap > 5000, year == 2007)
data_2007_highGDP <- filter(gap_data, gdpPercap > 5000, year == 2007)
filter(gap_data, gdpPercap > 5000, continent == "Asia")
# Your code here
filter(gap_data, country == "Canada" | country == "China")
filter(gap_data, country %in% c("Canada", "China"))
# Your code here
gap_data[gap_data$year == 2007 & gap_data$gdpPercap > 5000, ] # the old way in base R
filter(gap_data, year == 2007, gdpPercap > 5000) # with dplyr
gap_sorted <- arrange(gap_data, gdpPercap)
gap_sorted <- arrange(gap_data, desc(gdpPercap))
# Your code here
gap_sorted <- arrange(gap_data, continent, lifeExp)
# your code here
# Your code here
filter(gap_data, year == 2007, continent == "Asia") %>% arrange(gdpPercap)
gap_data %>% filter(year == 2007, continent == "Asia") %>% arrange(gdpPercap)
arrange(filter(gap_data, year == 2007, continent == "Asia"), gdpPercap) # without using pipe operator
select(gap_data, country, year, lifeExp, gdpPercap)
select(gap_data, country, year, lifeExp, GDP_percap = gdpPercap)
# Your code here
gap_data %>% select(-pop,-continent)
gap_data %>% filter(year == 2007, lifeExp < 60, gdpPercap >= 10000)
View(gap_data)
gapminder
a<-gapminder::gapminder_unfiltered
View(a)
gapminder %>% mutate(GDP = gdpPercap*pop) %>% top_n(GDP, 5)
gapminder %>% mutate(GDP = gdpPercap*pop) %>% top_n(5, GDP)
gapminder %>% mutate(GDP = gdpPercap*pop) %>% filter(year == 1952) %>%  top_n(5, GDP)
a <- gapminder %>% filter(year == 2007 | country == "United States")
View(a)
library(tidyverse)
for(i in 1:10){
print(i)
}
majors_union <- c("Environmental Science","Geology","English",
"Chemistry","Math","History","Computer Science")
for(i_major in 1:7){
print(majors_union[i_major])
}
for(i_major in majors_union){
print(i_major)
}
counter_majors <- 0 # Initialize the variable to zero
for(i_major in majors_union){
print(i_major)
counter_majors <- counter_majors + 1 # add one to the counter everytime the loop is run
}
# Your code here
# below is a solution to the above exercise
month_list <- c("January","February","March","April","May",
"June","July","August","September","October","November","December")
day_list <- c(31,28,31,30,31,30,31,31,30,31,30,31)
for(i_mon in 1:length(month_list)){
print( paste(month_list[i_mon],"has",day_list[i_mon],"days") )
}
# Your code here
x_mat <- matrix(1:25, 5, 5, byrow = TRUE)
for(i_row in 1:5){
for(j_col in 1:5){
print(x_mat[i_row, j_col])
}
}
# Your code here
# Below is a solution to the above exercise
n_row <- nrow(x_mat)
n_col <- ncol(x_mat)
for(i_row in 1:n_row){
for(j_col in 1:n_col){
print(x_mat[i_row, j_col])
}
}
x_val <- 30  # initialize x_val
while(x_val > 10){
print(x_val)
x_val <- x_val - 1  # on each loop iteration, subtract 1 from x_val
}
# Your code here
library(readr)
Alb_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/Albany_Temperatures_Nov_2018.csv",
skip = 3)
num_days <- nrow(Alb_temps) # store the number of rows (days) to the num_days variable
freeze_temp <- 32 # water freezing temperature in degress F
for(i_day in 1:num_days){
if(Alb_temps$Avg[i_day] > freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Low risk of freezing"))
} else {
print(paste("On November", Alb_temps$Day[i_day], ": High risk of freezing"))
}
}
# Your code here
# Below is the solution to above exercise
for(i_day in 1:num_days){
if(Alb_temps$Avg[i_day] > freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Low risk of freezing"))
} else{
if(Alb_temps$Max[i_day] <= freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Extreme risk of freezing"))
} else{
print(paste("On November", Alb_temps$Day[i_day], ": High risk of freezing"))
}
}
}
# Below is the solution to above exercise
counter_extreme <- 0
counter_high <- 0
counter_low <- 0
for(i_day in 1:num_days){
if(Alb_temps$Avg[i_day] > freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Low risk of freezing"))
counter_low <- counter_low + 1 # count low risk days
} else{
if(Alb_temps$Max[i_day] <= freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Extreme risk of freezing"))
counter_extreme <- counter_extreme + 1 # count extreme risk days
} else{
print(paste("On November", Alb_temps$Day[i_day], ": High risk of freezing"))
counter_high <- counter_high + 1 # count high risk days
}
}
}
print(paste("Low risk days:", counter_low))
print(paste("High risk days:", counter_high))
print(paste("Extreme risk days:", counter_extreme))
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
year_vec <- seq(1939,2021)
table_stats <- tibble(year = year_vec,
n_days = NA,
n_events = NA
)
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
View(df_met)
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
year_vec <- seq(1939,2021)
year_vec
table_stats <- tibble(year = year_vec,
n_days = NA,
n_events = NA
)
View(table_stats)
threshold_min <- 32
for (i_year in 1940) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
library(tidyverse)
dams_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Dams_FAO_SelectCols_LabData.csv")
View(dams_data)
dams_data %>% ggplot(aes(x = Dam_height_m)) + geom_histogram()
dams_data %>% ggplot(aes(x = Dam_height_m)) + geom_histogram() + coord_cartesian(xlim = c(0,400))
dams_data %>% ggplot(aes(x = Reservoir_capacity_million_m3)) + geom_histogram()
dams_data %>% ggplot(aes(x = Reservoir_capacity_million_m3)) + geom_histogram() + scale_x_log10()
dams_data %>% ggplot(aes(x = Year_completed, y = Reservoir_capacity_million_m3)) + geom_point()
dams_data %>% ggplot(aes(x = Year_completed, y = Reservoir_capacity_million_m3)) + geom_point() +scale_y_log10()
dams_data %>% ggplot(aes(x = Year_completed, y = Reservoir_capacity_million_m3)) + geom_point()
dams_data %>% ggplot(aes(x = Year_completed, y = Reservoir_capacity_million_m3)) + geom_point() + coord_cartesian(xlim = c(1800,2020))
dams_data %>% ggplot(aes(x = Continent, y = Dam_height_m)) + geom_point()
dams_data %>% ggplot(aes(x = Continent, y = Dam_height_m)) + geom_boxplot()
dams_data %>% ggplot(aes(x = Dam_height_m, y = Latitude)) + geom_point()
dams_data %>% ggplot(aes(x = Dam_height_m, y = Latitude)) + geom_point(alpha = 0.1)
dams_data %>% ggplot(aes(y = Dam_height_m, x = Latitude)) + geom_point(alpha = 0.1)
dams_data %>% ggplot(aes(y = Dam_height_m, x = Latitude)) + geom_point(alpha = 0.1) + geom_smooth()
unique(dams_data$Major_basin)
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
a<-gapminder::gapminder
library(tidyverse)
rm(a)
library(tidyverse)
library(gapminder)
my_gap <- gapminder
View(my_gap)
filter(my_gap, year >= 1990)
my_gap2 <-filter(my_gap, year >= 1990)
filter(my_gap, gdpPercap > 20000)
filter(my_gap, gdpPercap > 20000)
my_gap %>%
filter(lifeExp > 80)
library(tidyverse)
fuel_data <- mpg
str(fuel_data)
head(fuel_data, 6)
n_rows <- nrow(fuel_data) # number of rows
n_rows
n_cols <- ncol(fuel_data) # number of columns
n_cols
summary(fuel_data)
# Use mutate() to create the new variable (hwy2cty) and add it to the fuel_data object
fuel_data <- fuel_data %>% mutate(hwy2cty = hwy/cty)
# determine whether any vehicle gets better gas mileage in the city as compared to the highway
# this would occur when the ratio of hwy/cty < 1
fuel_data %>% filter(hwy2cty < 1)
# determine whether any vehicle has twice as good gas mileage on the highway relative to the city
# this would occur when hwy/cty > 2
fuel_data %>% filter(hwy2cty > 2)
# find the largest ratio between highway and city gas mileage.
max_hwy_cty <- max(fuel_data$hwy2cty)
max_hwy_cty
# scatter plot of hwy vs displacement
size_engine_plot <- ggplot(fuel_data)+
geom_point(aes(x = displ, y = hwy))+
geom_smooth(aes(x = displ, y = hwy), method = 'lm')+
# position the figure caption to the left of the plot
labs(caption = "Figure 1. Plot of engine displacement (litres) versus highway miles per gallon from 1999 and 2008 for 38 popular models\nof cars.")+
theme(plot.caption = element_text(hjust = 0))+
xlab("engine displacement (litres)")+
ylab("highway miles per gallon")
size_engine_plot
# scatter plot of hwy versus displacement, colored by class
plot_by_class <- ggplot(fuel_data)+
geom_point(aes(x = displ, y = hwy, color = class))+
geom_smooth(aes(x = displ, y = hwy))+
# position the figure caption to the left of the plot
labs(caption = "Figure 2. Plot of engine displacement (litres) versus highway miles per gallon from 1999 and 2008 for 38 popular\nmodels of cars. Points are colored by vehicle class.")+
theme(plot.caption = element_text(hjust = 0))+
xlab("engine displacement (litres)")+
ylab("highway miles per gallon")
plot_by_class
us_makes <- c("chevrolet","dodge","ford","jeep",
"lincoln","mercury","pontiac") # list of U.S. manufacturers
# add column for region to fuel_data
fuel_data <- mutate(fuel_data, region = if_else(manufacturer %in% us_makes,"US","Foreign"))
# box plot of hwy versus time
time_series_hwy <- ggplot(fuel_data)+
geom_boxplot(aes(x = factor(year), y = hwy))+
# position the figure caption to the left of the plot
labs(caption = "Figure 3. Plot of highway miles per gallon from 1999 and 2008 for 38 popular models of cars.")+
theme(plot.caption = element_text(hjust = 0))+
xlab("year")+
ylab("highway miles per gallon")
time_series_hwy
# determine whether US or foreign cars are more fuel efficient
region_plot <- ggplot(fuel_data)+
geom_point(aes(x = region, y = hwy))+
# position the figure caption to the left of the plot
labs(caption = "Figure 4. Plot of highway miles per gallon from 1999 and 2008 for 38 popular models of cars by region.")+
theme(plot.caption = element_text(hjust = 0))+
xlab("region")+
ylab("highway miles per gallon")
region_plot
# make a box plot by car type versus fuel efficiency
class_hwy_plot <- ggplot(fuel_data)+
geom_boxplot(aes(x = class, y = hwy))+
# position the figure caption to the left of the plot
labs(caption = "Figure 5. Plot of highway miles per gallon from 1999 and 2008 for 38 popular models of cars by vehicle class.")+
theme(plot.caption = element_text(hjust = 0))+
xlab("vehicle class")+
ylab("highway miles per gallon")
class_hwy_plot
# group by class, then summarize to see hwy statistics
class_hwy_group <- fuel_data %>%
group_by(class) %>%
summarize(mean_hwy = mean(hwy), sd_hwy = sd(hwy))
class_hwy_group
# get the count of unique model types for class of subcompact
subcompact_subset <- filter(fuel_data, class == "subcompact")
count_subcompact <- unique(subcompact_subset$model)
count_subcompact
length(count_subcompact)
# get the count of unique model types for class of 2seater
twoseater_subset <- filter(fuel_data, class == "2seater")
count_twoseater <- unique(twoseater_subset$model)
count_twoseater
length(count_twoseater)
expanded_epa_dataset <- read.csv('vehicles.csv')
head(expanded_epa_dataset, 3)
subset_vehicle_df <- expanded_epa_dataset %>% filter(ghgScore > -1)
ghg_fuel_type_plot <- ggplot(subset_vehicle_df)+
geom_boxplot(aes(x = reorder(fuelType, ghgScore), y = ghgScore))+
theme(axis.text.x = element_text(angle = 90))+
# position the figure caption to the left of the plot
labs(caption = "Figure 6. Plot of fuel type versus greenhouse gas score from 1984 to 2022. Data were obtained from a full EPA\nfuel efficiency dataset.")+
theme(plot.caption = element_text(hjust = 0))+
xlab("fuel type")+
ylab("greenhouse gas score")
ghg_fuel_type_plot
