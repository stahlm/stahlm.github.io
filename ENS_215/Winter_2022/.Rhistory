dem_df <- raster::as.data.frame(dem_raster, centroids = T, xy = T)
library(metR)
ggplot(dem_df, aes(x, y, z = layer)) +
geom_contour_fill() +
geom_contour_tanaka() +
scale_fill_gradient(low = "white", high = "black")
dem_df <- dem_df %>%
rename(z = file656819f662b)
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka() +
scale_fill_gradient(low = "white", high = "black")
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka() +
scale_fill_gradient(low = "white", high = "black") +
coord_equal()
aoi_to_use <- rnaturalearth::ne_countries(country = "Israel", scale = "large", returnclass = "sf")
#aoi_to_use <- AOI::aoi_get(list("Bolton Landing, NY", 45,25))
dem_raster <- get_elev_raster(aoi_to_use, z = 7, clip = "locations")
dem_df <- raster::as.data.frame(dem_raster, centroids = T, xy = T)
dem_df$z <- dem[,3]
dem_df$z <- dem_df[,3]
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka() +
scale_fill_gradient(low = "white", high = "black") +
coord_equal()
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 20) +
scale_fill_gradient(low = "white", high = "black") +
coord_equal()
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 80) +
scale_fill_gradient(low = "white", high = "black") +
coord_equal()
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
scale_fill_gradient(low = "white", high = "black") +
coord_equal()
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
scale_fill_gradient(low = "white", high = "black") +
coord_equal() +
theme_void()
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
scale_fill_gradient(low = "white", high = "black") +
coord_equal() +
theme_void() +
theme(legend.position = "none")
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
scale_fill_divergent() +
#scale_fill_gradient(low = "white", high = "black") +
coord_equal() +
theme_void() +
theme(legend.position = "none")
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
scale_fill_divergent() +
#scale_fill_gradient(low = "white", high = "black") +
coord_equal() +
theme_void() +
theme(legend.position = "none", plot.background = "black")
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
scale_fill_divergent() +
#scale_fill_gradient(low = "white", high = "black") +
coord_equal() +
theme_void() +
plot.background = element_rect(fill="black")
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
scale_fill_divergent() +
#scale_fill_gradient(low = "white", high = "black") +
coord_equal() +
theme_void() +
theme(plot.background = element_rect(fill="black"))
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
scale_fill_divergent() +
#scale_fill_gradient(low = "white", high = "black") +
coord_equal() +
theme_void() +
theme(plot.background = element_rect(fill="black"), legend.position = "none")
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
#scale_fill_divergent() +
scale_fill_gradient(low = "white", high = "black") +
coord_equal() +
theme_void() +
theme(plot.background = element_rect(fill="black"), legend.position = "none")
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
#scale_fill_divergent() +
scale_fill_gradient(low = "white", high = "black") +
coord_equal() +
theme_void() +
theme(plot.background = element_rect(fill="none"), legend.position = "none")
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
#scale_fill_divergent() +
scale_fill_gradient(low = "white", high = "black") +
coord_equal() +
theme_void() +
theme(plot.background = element_rect(fill="white"), legend.position = "none")
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
#scale_fill_divergent() +
scale_fill_gradient(low = "white", high = "black") +
coord_equal() +
theme_void() +
theme(legend.position = "none")
dem_raster <- get_elev_raster(aoi_to_use, z = 8, clip = "locations")
dem_df <- raster::as.data.frame(dem_raster, centroids = T, xy = T)
dem_df$z <- dem_df[,3]
ggplot(dem_df, aes(x, y, z = z)) +
geom_contour_fill() +
geom_contour_tanaka(sun.angle = 60, smooth = 1) +
#scale_fill_divergent() +
scale_fill_gradient(low = "white", high = "black") +
coord_equal() +
theme_void() +
theme(legend.position = "none")
tmap_mode("plot")
tm_shape(dem_raster) +
tm_raster(style = "cont",
title = "Elev (m)") +
tm_shape(aoi_to_use) +
tm_borders() +
tm_layout(legend.outside = T)
tmap_mode("plot")
tm_shape(dem_raster) +
tm_raster(style = "cont",
title = "Elev (m)") +
tm_shape(aoi_to_use) +
tm_borders() +
tm_layout(legend.outside = T, frame = F)
tmap_mode("plot")
tm_shape(dem_raster) +
tm_raster(style = "cont", palette = terrain.colors(10),
title = "Elev (m)") +
tm_shape(aoi_to_use) +
tm_borders() +
tm_layout(legend.outside = T, frame = F)
tmap_mode("plot")
tm_shape(dem_raster) +
tm_raster(style = "cont", palette = terrain.colors(20),
title = "Elev (m)") +
tm_shape(aoi_to_use) +
tm_borders() +
tm_layout(legend.outside = T, frame = F)
tmap_mode("plot")
tm_shape(dem_raster) +
tm_raster(style = "cont", palette = "cividis",
title = "Elev (m)") +
tm_shape(aoi_to_use) +
tm_borders() +
tm_layout(legend.outside = T, frame = F)
tmap_mode("plot")
tm_shape(dem_raster) +
tm_raster(style = "cont",
title = "Elev (m)") +
tm_shape(aoi_to_use) +
tm_borders() +
tm_layout(legend.outside = T, frame = F)
tmap_mode("plot")
tm_shape(dem_raster) +
tm_raster(style = "cont", midpoint = 500,
title = "Elev (m)") +
tm_shape(aoi_to_use) +
tm_borders() +
tm_layout(legend.outside = T, frame = F)
library(leaflet)
library(tidyverse)
leaflet() %>%
addTiles()
leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)
library(tmap)
library(spData)
library(sf)
world_map_data <- world # save the world data from the spData package to our own R object
tm_shape(world_map_data) +
tm_polygons("lifeExp")
library(leaflet)
library(tidyverse)
leaflet() %>%
addTiles()
leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)
state_cap_locs <- read_csv("https://stahlm.github.io/ENS_215/Data/us_capitals_locs.csv", skip = 2)
install.packages("tmaptools")
library(leaflet)
library(tidyverse)
library(tmap)
library(spData)
library(sf)
world_map_data <- world # save the world data from the spData package to our own R object
tm_shape(world_map_data) +
tm_polygons("lifeExp")
install.packages(c("aqp", "arsenal", "autocogs", "backports", "BH", "BiocManager", "bitops", "blob", "bookdown", "brew", "brio", "broom", "bslib", "cachem", "callr", "car", "carData", "caret", "caTools", "cli", "clipr", "colorspace", "colourpicker", "commonmark", "conquer", "corrplot", "countrycode", "crayon", "credentials", "crosstalk", "crul", "curl", "data.table", "dataRetrieval", "DBI", "dbplyr", "deldir", "dendextend", "DEoptim", "desc", "devtools", "diffobj", "digest", "diptest", "dismo", "distill", "distributional", "doParallel", "dotCall64", "downlit", "dplyr", "DT", "e1071", "elevatr", "ellipsis", "evaluate", "expint", "extrafont", "fabletools", "fansi", "farver", "fastmap", "fda", "feasts", "fields", "forcats", "foreach", "fs", "furrr", "future", "gdtools", "generics", "geodata", "geojsonio", "geojsonsf", "geoknife", "geosphere", "gert", "GGally", "ggExtra", "ggnewscale", "ggplot2", "ggplotify", "ggrepel", "ggridges", "ggsignif", "ggthemes", "gh", "gifski", "git2r", "glue", "goftest", "gower", "gstat", "h2o", "haven", "hdrcde", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "igraph", "infer", "ipred", "isoband", "iterators", "jpeg", "jqr", "jsonlite", "kableExtra", "kernlab", "knitr", "ks", "later", "lava", "leafem", "leaflet", "leafpop", "lifecycle", "linprog", "lme4", "lubridate", "lwgeom", "magic", "magick", "magrittr", "manipulateWidget", "mapproj", "maps", "mapsf", "maptools", "mapview", "mathjaxr", "MatrixModels", "matrixStats", "mclust", "memoise", "metR", "mime", "misc3d", "modeldata", "moderndive", "multicool", "mvtnorm", "ncdf4", "nloptr", "oce", "openair", "openssl", "openxlsx", "osmdata", "osmplotr", "pagedown", "parallelly", "pbkrtest", "pcaPP", "pillar", "pixmap", "pkgbuild", "pkgload", "plot3D", "plotKML", "plotly", "plotrix", "plyr", "polynom", "pracma", "prettydoc", "pROC", "processx", "progressr", "proj4", "promises", "protolite", "proxy", "ps", "quadmesh", "quantreg", "R6", "ranger", "rappdirs", "raster", "rasterVis", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppThread", "RCurl", "readr", "readxl", "recipes", "remotes", "repr", "reprex", "reshape", "reticulate", "rex", "rgdal", "rgee", "rgeos", "rgl", "rio", "rJava", "rjson", "rlang", "rmarkdown", "RNetCDF", "rnoaa", "rorcid", "roxygen2", "rprojroot", "rsample", "rstatix", "rsvg", "Rttf2pt1", "rvcheck", "rversions", "rvest", "sass", "satellite", "servr", "sessioninfo", "sf", "shiny", "shinyjs", "skimr", "slider", "sp", "spacetime", "spam", "SparseM", "spatstat", "spatstat.data", "spatstat.utils", "spData", "SQUAREM", "statmod", "stringdist", "stringi", "svglite", "systemfonts", "terra", "testthat", "tibble", "tidycensus", "tidygeocoder", "tidyr", "tidyselect", "tidyverse", "tiff", "tigris", "tinytex", "treemap", "trelliscopejs", "tsibble", "tzdb", "USAboundaries", "usethis", "utf8", "uuid", "V8", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "websocket", "whitebox", "withr", "xfun", "XML", "xml2", "yaml", "zip", "zoo"))
library(tmap)
library(spData)
library(sf)
world_map_data <- world # save the world data from the spData package to our own R object
tm_shape(world_map_data) +
tm_polygons("lifeExp")
map_1 <- tm_shape(world_map_data) +
tm_fill()
map_2 <- tm_shape(world_map_data) +
tm_fill("lifeExp")
map_3 <- tm_shape(world_map_data) +
tm_fill("lifeExp") +
tm_borders("black")
tmap_arrange(map_1, map_2, map_3) # arrange the three maps
fpath("C:/Users/stahlm/Documents/Research_Projects/Soil_moisture/Soil_moisture_revisions/rev_unmasked_frozen/Soil_moisture/output/rasters/anomalies_cluster_raster.tif")
fpath <- "C:/Users/stahlm/Documents/Research_Projects/Soil_moisture/Soil_moisture_revisions/rev_unmasked_frozen/Soil_moisture/output/rasters/anomalies_cluster_raster.tif"
raster_sm <- raster::raster(fpath)
world_map_data <- world # save the world data from the spData package to our own R object
tm_shape(raster_sm) +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
tmap_mode("view")
tm_shape(raster_sm) +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
tm_shape(world_map_data) +
tm_borders() +
tm_shape(raster_sm) +
tm_raster()
map_1 <- tm_shape(world_map_data) +
tm_borders() +
tm_shape(raster_sm) +
tm_raster()
map_1
raster_sm
map_1 <- tm_shape(world_map_data) +
tm_borders() +
tm_shape(raster_sm) +
tm_raster()
map_1 <- tm_shape(world_map_data) +
tm_borders() +
tm_shape(raster_sm) +
tm_raster()
map_1
tmap_mode("plot")
map_1 <- tm_shape(world_map_data) +
tm_borders() +
tm_shape(raster_sm) +
tm_raster()
map_1
map_1 <-
tm_shape(raster_sm) +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
map_1 <-
tm_shape(raster_sm) +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
map_1
map_1 <-
tm_shape(raster_sm$anomalies_cluster_raster) +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
map_1
tmap_mode("plot")
tmap_mode("view")
map_1 <-
tm_shape(raster_sm$anomalies_cluster_raster) +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
map_1
tmap_mode("plot")
map_1 <-
tm_shape(raster_sm$anomalies_cluster_raster) +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
map_1
map_1 <-
tm_shape(raster_sm$anomalies_cluster_raster) +
tm_raster(style = "cat") +
tm_shape(world_map_data) +
tm_borders()
map_1
tmap_mode("view")
map_1 <-
tm_shape(raster_sm$anomalies_cluster_raster) +
tm_raster(style = "cat") +
tm_shape(world_map_data) +
tm_borders()
map_1
tmap_mode("plot")
map_1 <-
tm_shape(raster_sm$anomalies_cluster_raster) +
tm_raster(style = "cat") +
tm_shape(world_map_data) +
tm_borders()
map_1
map_1 <-
tm_shape(spData::elev) +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
map_1
rst <- ne_download(scale = 50, type = 'MSR_50M', category = 'raster', destdir = getwd())
rst <- rnaturalearth::ne_download(scale = 50, type = 'MSR_50M', category = 'raster', destdir = getwd())
map_1 <-
tm_shape(rst) +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
map_1
tmap_mode("view")
map_1 <-
tm_shape(rst) +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
map_1
rst
library(mapview)
mapview(raster_sm)
raster_sm
tmap_mode("plot")
map_1 <-
tm_shape(raster_sm) +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
map_1
map_1 <-
tm_shape(raster_sm) +
tm_raster(style = "cat") +
tm_shape(world_map_data) +
tm_borders()
map_1
world_map_data
raster_sm_2 <- raster::projectRaster(raster_sm, to = st_crs(world_map_data))
raster_sm_2 <- raster::projectRaster(raster_sm, to = "+proj=longlat +datum=WGS84")
raster_sm_2 <- raster::projectRaster(raster_sm, crs = "+proj=longlat +datum=WGS84")
map_1 <-
tm_shape(raster_sm_2) +
tm_raster(style = "cat") +
tm_shape(world_map_data) +
tm_borders()
map_1
map_1 <-
tm_shape(raster_sm_2) +
#tm_raster(style = "cat") +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
map_1
tmap_mode("view")
map_1 <-
tm_shape(raster_sm_2) +
#tm_raster(style = "cat") +
tm_raster() +
tm_shape(world_map_data) +
tm_borders()
map_1
map_1 <-
tm_shape(raster_sm_2) +
tm_raster(style = "cat") +
#tm_raster() +
tm_shape(world_map_data) +
tm_borders()
map_1
map_1 <-
tm_shape(raster_sm_2) +
#tm_raster(style = "cat") +
tm_raster(breaks = c(0,1,2,3,4,5)) +
tm_shape(world_map_data) +
tm_borders()
map_1
raster_sm_2
raster_sm_2[raster_sm_2 == NA] <- NA
raster_sm_2
map_1 <-
tm_shape(raster_sm_2) +
tm_raster(style = "cat") +
#tm_raster(breaks = c(0,1,2,3,4,5)) +
tm_shape(world_map_data) +
tm_borders()
map_1
map_1 <-
tm_shape(raster_sm_2) +
#tm_raster(style = "cat") +
tm_raster(breaks = c(0,1,2,3,4,5)) +
tm_shape(world_map_data) +
tm_borders()
map_1
pal2use <- c("#beaed4ff",    # Modified 8-JAN-2022
"#ffff99ff",
"#386cb0ff",
"#fdc086ff",
"#7fc97fff")
map_1 <-
tm_shape(raster_sm_2) +
#tm_raster(style = "cat") +
tm_raster(breaks = c(0,1,2,3,4,5), palette = pal2use) +
tm_shape(world_map_data) +
tm_borders()
map_1
map_1 <-
tm_shape(raster_sm_2) +
#tm_raster(style = "cat") +
tm_raster(breaks = c(0,1.1,2.1,3.1,4.1,5.1), palette = pal2use) +
tm_shape(world_map_data) +
tm_borders()
map_1
raster::hist(raster_sm)
library(climateR)
kenya = AOI::aoi_get(country = "Kenya")
library(USAboundaries)
kenya = AOI::aoi_get(country = "Kenya")
kenya = AOI::aoi_get(country = "Kenya")
library(AOI)
install.packages("USAboundaries")
library(climateR)
library(climateR)
install.packages("vctrs")
knitr::opts_chunk$set(message = F, warning = F, echo = F, dpi = 400)
file_list <- list.files(path = "./data/smap/soil_moisture_weekly_masked_revised") # Updated 16-DEC-2021
raster_sm <- raster::stack(paste("./data/smap/soil_moisture_weekly_masked_revised/", # Updated 16-DEC-2021
file_list,
sep = "") )
raster_sm
library(tidyverse)
library(tidyverse)
library(tidyverse)
# load the packages
library(rvest)
library(dplyr)
# specify the URL to scrape
url <- "https://www.wunderground.com/history/daily/us/ny/new-york-city/KNYC"
# read the HTML from the URL
html <- read_html(url)
# use CSS selectors to extract the relevant data
data <- html %>%
html_nodes(".history-table .no-metars") %>%
html_table()
# view the data
data
# specify the URL to scrape
url <- "https://www.wunderground.com/history/daily/us/ny/new-york-city/KNYC"
# read the HTML from the URL
html <- read_html(url)
# use CSS selectors to extract the relevant data
data <- html %>%
html_nodes(".history-table .no-metars") %>%
html_table()
# specify the URL to scrape
url <- "https://www.wunderground.com/history/daily/us/ny/new-york-city/KLGA"
# read the HTML from the URL
html <- read_html(url)
# use CSS selectors to extract the relevant data
data <- html %>%
html_nodes(".history-table .no-metars") %>%
html_table()
# view the data
data
# load the packages
library(rvest)
library(ggplot2)
# specify the URL to scrape
url <- "https://www.wunderground.com/history/daily/us/ma/boston/KBOS"
# read the HTML from the URL
html <- read_html(url)
# use CSS selectors to extract the relevant data
data <- html %>%
html_nodes(".history-table .no-metars") %>%
html_table()
# view the data
data
# plot the time-series
ggplot(data, aes(x = Date, y = Mean.TemperatureF)) +
geom_line() +
labs(title = "Boston Temperature Time-Series") +
xlab("Date") +
ylab("Temperature (F)")
# Read the US GDP data
df <- read_csv("US_GDP.csv")
# load the packages
library(rvest)
library(dplyr)
library(tidyverse)
# Read the US GDP data
df <- read_csv("US_GDP.csv")
