df_seasonality_precip <- df_seasonality_precip[[2]]
df_seasonality_precip
df_seasonality_precip %>%
ggplot(aes(y = reorder(group_name, SI), x = SI)) +
geom_point(size = 2) +
geom_segment(aes(x = 0, xend = SI, yend = group_name)) +
theme_bw(base_size = 12)
df_monthly_normals %>%
filter(group_name %in% c("Rhode Island", "California", "Idaho")) %>%
ggplot() +
geom_col(aes(x = factor(Month), y = observation_value))
df_monthly_normals %>%
filter(group_name %in% c("Rhode Island", "California", "Idaho")) %>%
ggplot() +
geom_col(aes(x = factor(Month), y = observation_value)) +
facet_wrap(~group_name) +
theme_bw()
View(df_seasonality_precip)
state_dictionary <- tibble(NAME = state.name, state_cd = state.abb)
state_dictionary <- tibble(NAME = state.name, state_cd = state.abb)
View(state_dictionary)
df_seasonality_precip <- df_seasonality_precip %>%
rename(NAME = group_name) %>%
left_join(state_dictionary)
library(sf)
library(tmap)
sf_states <- spData::us_states
View(sf_states)
sf_seasonality_precip <- sf_states %>%
right_join(df_seasonality_precip)
View(sf_seasonality_precip)
sf_seasonality_precip <- sf_seasonality_precip %>%
filter(NAME != "Alaska", NAME != "Hawaii")
tmap_mode("view")
sf_seasonality_precip %>%
tm_shape() +
tm_polygons(col = "SI") +
tm_shape(sf_states) +
tm_borders()
sf_seasonality_precip %>%
tm_shape() +
tm_polygons(col = "SI") +
tm_shape(sf_states) +
tm_borders()
sf_seasonality_precip %>%
tm_shape() +
tm_polygons(col = "SI", palette = "viridis") +
tm_shape(sf_states) +
tm_borders()
sf_seasonality_precip %>%
tm_shape() +
tm_polygons(col = "SI", palette = "viridis") +
tm_shape(sf_states) +
tm_borders()
sf_seasonality_precip %>%
tm_shape() +
tm_polygons(col = "SI", palette = "viridis",
style = "cont") +
tm_shape(sf_states) +
tm_borders()
sf_seasonality_precip %>%
tm_shape() +
tm_polygons(col = "SI", palette = "viridis",
style = "cont") +
tm_shape(sf_states) +
tm_borders()
sf_seasonality_precip %>%
tm_shape() +
tm_polygons(col = "SC", palette = "viridis",
style = "cont") +
tm_shape(sf_states) +
tm_borders()
sf_seasonality_precip %>%
filter(SI >= 0.1) %>%
tm_shape() +
tm_polygons(col = "SC", palette = "viridis",
style = "cont") +
tm_shape(sf_states) +
tm_borders()
df_stream_data <-  read_csv("https://stahlm.github.io/ENS_215/Data/USGS_01354500_flow.csv")
View(df_stream_data)
df_stream_data <- df_stream_data %>%
mutate(Year = year(Date),
Month = month(Date),
Day = day(Date)
)
df_stream_monthly_normals <-  df_stream_data %>%
filter(Year >= 2014 & Year <= 2024) %>%
group_by(Month, site_no) %>%
summarize(observation_value = mean(Flow, na.rm = T)) %>%
rename(group_name = site_no)
View(df_stream_monthly_normals)
df_stream_monthly_normals %>%
ggplot(aes(x = Month, y = observation_value)) +
geom_col() +
scale_x_continuous(breaks = 1:12) +
theme_classic()
df_seasonality_flow <- compute_seasonality_indices(df_stream_monthly_normals)
df_seasonality_flow <- df_seasonality_flow[[2]]
df_seasonality_flow
met_df <- read_csv("https://stahlm.github.io/ENS_215/Data/gsod_alb.csv")
View(met_df)
library(tidyverse)
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/noaa_cag_state_precipitation.csv")
precip_data <- precip_data %>%
rename(Year = YEAR,
Month = MONTH,
Precip_inches = Value
)
precip_data <- precip_data %>%
mutate(Month = as.numeric(Month))
df_monthly_normals <- precip_data %>%
filter(Year >= 1980) %>%
group_by(STATE, Month) %>%
summarise(observation_value = mean(Precip_inches)) %>%
rename(group_name = STATE)
source("https://stahlm.github.io/functions/compute_seasonality_indices.R")
df_seasonality_precip <- compute_seasonality_indices(df_monthly_normals)
df_seasonality_precip <- df_seasonality_precip[[2]]
df_seasonality_precip
df_seasonality_precip %>%
ggplot(aes(y = reorder(group_name, SI), x = SI)) +
geom_point(size = 2) +
geom_segment(aes(x = 0, xend = SI, yend = group_name)) +
theme_bw(base_size = 12)
df_monthly_normals %>%
filter(group_name %in% c("Rhode Island", "California", "Idaho")) %>%
ggplot() +
geom_col(aes(x = factor(Month), y = observation_value)) +
facet_wrap(~group_name) +
theme_bw()
state_dictionary <- tibble(NAME = state.name, state_cd = state.abb)
df_seasonality_precip <- df_seasonality_precip %>%
rename(NAME = group_name) %>%
left_join(state_dictionary)
library(sf)
library(tmap)
sf_states <- spData::us_states
sf_seasonality_precip <- sf_states %>%
right_join(df_seasonality_precip)
sf_seasonality_precip <- sf_seasonality_precip %>%
filter(NAME != "Alaska", NAME != "Hawaii")
tmap_mode("view")
sf_seasonality_precip %>%
tm_shape() +
tm_polygons(col = "SI", palette = "viridis",
style = "cont") +
tm_shape(sf_states) +
tm_borders()
df_stream_monthly_normals %>%
ggplot(aes(x = Month, y = observation_value)) +
geom_col() +
scale_x_continuous(breaks = 1:12) +
theme_classic()
library(tidyverse)
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/noaa_cag_state_precipitation.csv")
precip_data <- precip_data %>%
rename(Year = YEAR,
Month = MONTH,
Precip_inches = Value
)
precip_data <- precip_data %>%
mutate(Month = as.numeric(Month))
df_monthly_normals <- precip_data %>%
filter(Year >= 1980) %>%
group_by(STATE, Month) %>%
summarise(observation_value = mean(Precip_inches)) %>%
rename(group_name = STATE)
source("https://stahlm.github.io/functions/compute_seasonality_indices.R")
df_seasonality_precip <- compute_seasonality_indices(df_monthly_normals)
df_seasonality_precip <- df_seasonality_precip[[2]]
df_seasonality_precip
df_seasonality_precip %>%
ggplot(aes(y = reorder(group_name, SI), x = SI)) +
geom_point(size = 2) +
geom_segment(aes(x = 0, xend = SI, yend = group_name)) +
theme_bw(base_size = 12)
df_monthly_normals %>%
filter(group_name %in% c("Rhode Island", "California", "Idaho")) %>%
ggplot() +
geom_col(aes(x = factor(Month), y = observation_value)) +
facet_wrap(~group_name) +
theme_bw()
state_dictionary <- tibble(NAME = state.name, state_cd = state.abb)
df_seasonality_precip <- df_seasonality_precip %>%
rename(NAME = group_name) %>%
left_join(state_dictionary)
library(sf)
library(tmap)
sf_states <- spData::us_states
sf_seasonality_precip <- sf_states %>%
right_join(df_seasonality_precip)
sf_seasonality_precip <- sf_seasonality_precip %>%
filter(NAME != "Alaska", NAME != "Hawaii")
tmap_mode("view")
sf_seasonality_precip %>%
tm_shape() +
tm_polygons(col = "SI", palette = "viridis",
style = "cont") +
tm_shape(sf_states) +
tm_borders()
df_stream_monthly_normals %>%
ggplot(aes(x = Month, y = observation_value)) +
geom_col() +
scale_x_continuous(breaks = 1:12) +
theme_classic()
df_stream_monthly_normals <-  df_stream_data %>%
filter(Year >= 2014 & Year <= 2024) %>%
group_by(Month, site_no) %>%
summarize(observation_value = mean(Flow, na.rm = T)) %>%
rename(group_name = site_no)
library(tidyverse)
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/noaa_cag_state_precipitation.csv")
precip_data <- precip_data %>%
rename(Year = YEAR,
Month = MONTH,
Precip_inches = Value
)
precip_data <- precip_data %>%
mutate(Month = as.numeric(Month))
df_monthly_normals <- precip_data %>%
filter(Year >= 1980) %>%
group_by(STATE, Month) %>%
summarise(observation_value = mean(Precip_inches)) %>%
rename(group_name = STATE)
source("https://stahlm.github.io/functions/compute_seasonality_indices.R")
df_seasonality_precip <- compute_seasonality_indices(df_monthly_normals)
df_seasonality_precip <- df_seasonality_precip[[2]]
df_seasonality_precip
df_seasonality_precip %>%
ggplot(aes(y = reorder(group_name, SI), x = SI)) +
geom_point(size = 2) +
geom_segment(aes(x = 0, xend = SI, yend = group_name)) +
theme_bw(base_size = 12)
df_monthly_normals %>%
filter(group_name %in% c("Rhode Island", "California", "Idaho")) %>%
ggplot() +
geom_col(aes(x = factor(Month), y = observation_value)) +
facet_wrap(~group_name) +
theme_bw()
state_dictionary <- tibble(NAME = state.name, state_cd = state.abb)
df_seasonality_precip <- df_seasonality_precip %>%
rename(NAME = group_name) %>%
left_join(state_dictionary)
library(sf)
library(tmap)
sf_states <- spData::us_states
sf_seasonality_precip <- sf_states %>%
right_join(df_seasonality_precip)
sf_seasonality_precip <- sf_seasonality_precip %>%
filter(NAME != "Alaska", NAME != "Hawaii")
tmap_mode("view")
sf_seasonality_precip %>%
tm_shape() +
tm_polygons(col = "SI", palette = "viridis",
style = "cont") +
tm_shape(sf_states) +
tm_borders()
df_stream_monthly_normals <-  df_stream_data %>%
filter(Year >= 2014 & Year <= 2024) %>%
group_by(Month, site_no) %>%
summarize(observation_value = mean(Flow, na.rm = T)) %>%
rename(group_name = site_no)
library(tidyverse)
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/noaa_cag_state_precipitation.csv")
precip_data <- precip_data %>%
rename(Year = YEAR,
Month = MONTH,
Precip_inches = Value
)
precip_data <- precip_data %>%
mutate(Month = as.numeric(Month))
df_monthly_normals <- precip_data %>%
filter(Year >= 1980) %>%
group_by(STATE, Month) %>%
summarise(observation_value = mean(Precip_inches)) %>%
rename(group_name = STATE)
source("https://stahlm.github.io/functions/compute_seasonality_indices.R")
df_seasonality_precip <- compute_seasonality_indices(df_monthly_normals)
df_seasonality_precip <- df_seasonality_precip[[2]]
df_seasonality_precip
df_seasonality_precip %>%
ggplot(aes(y = reorder(group_name, SI), x = SI)) +
geom_point(size = 2) +
geom_segment(aes(x = 0, xend = SI, yend = group_name)) +
theme_bw(base_size = 12)
df_monthly_normals %>%
filter(group_name %in% c("Rhode Island", "California", "Idaho")) %>%
ggplot() +
geom_col(aes(x = factor(Month), y = observation_value)) +
facet_wrap(~group_name) +
theme_bw()
state_dictionary <- tibble(NAME = state.name, state_cd = state.abb)
df_seasonality_precip <- df_seasonality_precip %>%
rename(NAME = group_name) %>%
left_join(state_dictionary)
library(sf)
library(tmap)
sf_states <- spData::us_states
sf_seasonality_precip <- sf_states %>%
right_join(df_seasonality_precip)
sf_seasonality_precip <- sf_seasonality_precip %>%
filter(NAME != "Alaska", NAME != "Hawaii")
tmap_mode("view")
sf_seasonality_precip %>%
tm_shape() +
tm_polygons(col = "SI", palette = "viridis",
style = "cont") +
tm_shape(sf_states) +
tm_borders()
sf_seasonality_precip %>%
filter(SI >= 0.1) %>%
tm_shape() +
tm_polygons(col = "SC", palette = "viridis",
style = "cont") +
tm_shape(sf_states) +
tm_borders()
df_stream_data <-  read_csv("https://stahlm.github.io/ENS_215/Data/USGS_01354500_flow.csv")
df_stream_data <- df_stream_data %>%
mutate(Year = year(Date),
Month = month(Date),
Day = day(Date)
)
df_stream_monthly_normals <-  df_stream_data %>%
filter(Year >= 2014 & Year <= 2024) %>%
group_by(Month, site_no) %>%
summarize(observation_value = mean(Flow, na.rm = T)) %>%
rename(group_name = site_no)
df_stream_monthly_normals %>%
ggplot(aes(x = Month, y = observation_value)) +
geom_col() +
scale_x_continuous(breaks = 1:12) +
theme_classic()
library(rgeoboundaries)
library(sf)
library(tmap)
sf_borders_0 <- gb_adm0("United States of America") # Level 0 (country border)
sf_borders_0 <- gb_adm0("United States of America") # Level 0 (country border)
View(sf_borders_0)
sf_borders_1 <- gb_adm1("United States of America") # Level 0 (country border)
View(sf_borders_1)
View(sf_borders_1)
library(tigris)
a <- tigris::places(state = "VT")
library(tidyverse)
library(sf)
library(tmap)
tmap_mode("view")
a %>%
tm_shape() +
tm_borders()
a %>%
tm_shape() +
tm_borders()
View(a)
a %>%
tm_shape() +
tm_polygons()
library(tidyverse)
library(tmap)
library(sf)
library(terra)
df_agent_orange <- read_csv("./agent_orange_data.csv")
df_agent_orange <- df_agent_orange %>%
separate(col = Coordinates, into = c("Lat", "Long"), sep = ",")
df_agent_orange <- df_agent_orange %>%
mutate(Lat = as.numeric(Lat),
Long = as.numeric(Long),
Lat_va = Lat,
Long_va = Long,
DATE = mdy(Date),
YEAR = year(DATE),
MONTH = month(DATE),
DAY = day(DATE)
)
df_agent_orange <- df_agent_orange %>%
st_as_sf(coords = c("Long", "Lat"))
tmap_mode("view")
fig_map <- df_agent_orange %>%
tm_shape() +
tm_dots(col = "purple") +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar()
fig_map <-  fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
fig_map
crsuggest::suggest_crs(df_agent_orange)
df_agent_orange <- st_set_crs(df_agent_orange, "EPSG:4326") # set CRS
df_agent_orange_projected = st_transform(df_agent_orange,
crs = "+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=19500000 +y_0=0 +ellps=krass +units=m +no_defs")
raster_template = rast(ext(df_agent_orange_projected),
resolution = 20000, # in meters
crs = crs(df_agent_orange_projected))
ch_raster3 = rasterize(df_agent_orange_projected, raster_template,
field = "Gallons", fun = sum, na.rm = TRUE)
ch_raster3 %>%
tm_shape() +
tm_raster(palette = "plasma", style = "quantile") +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar()
library(tidyverse)
library(moderndive)
library(tidyverse)
library(moderndive)
df_flow_precip <- read_csv("https://stahlm.github.io/ENS_215/Data/precip_mv_flow_01351500.csv")
df_flow_precip <- df_flow_precip %>%
select(Year, Month, Precip_inches, flow_inches)
df_flow_precip <- df_flow_precip %>%
mutate(Month_group = str_pad(Month, side = "left", pad = "0", width = 2))
df_flow_precip
df_flow_precip %>%
ggplot(aes(x = Precip_inches, y = flow_inches)) +
geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
coord_equal() +
theme_classic()
df_flow_precip %>%
ggplot(aes(x = Precip_inches, y = flow_inches)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
coord_equal() +
theme_classic()
lm_flow <- lm(data = df_flow_precip, formula = flow_inches ~ Precip_inches)
lm_flow
get_regression_table(lm_flow, digits = 3)
get_regression_summaries(lm_flow)
df_flow_precip %>%
ggplot(aes(x = Precip_inches, y = flow_inches)) +
geom_point(alpha = 0.25) +
geom_smooth(method = "lm", se = F) +
geom_abline(slope = 1, intercept = 0,
color = "red", linetype = "dashed"
) +
facet_wrap(~Month_group) +
theme_bw()
df_flow_precip %>%
ggplot(aes(x = Precip_inches, y = flow_inches)) +
geom_point(alpha = 0.25) +
geom_smooth(method = "lm", se = F) +
geom_abline(slope = 1, intercept = 0,
color = "red", linetype = "dashed"
) +
facet_wrap(~Month_group) +
theme_bw()
lm_flow_may <- lm(formula = flow_inches ~ Precip_inches,
data = df_flow_precip,
subset = Month_group == "05"
)
get_regression_table(lm_flow_may)
get_regression_summaries(lm_flow_may)
library(tidyverse)
library(tmap)
library(sf)
library(readxl)
library(AOI)
library(tidygeocoder)
library(kableExtra)
library(moderndive)
# Load in data
Street_Trees <- read_csv("./Data/Tree_Sites_Public_View.csv")
# Load in data
Street_Trees <- read_csv("./Tree_Sites_Public_View.csv")
# Select Street Tree Cols
Street_Trees <- Street_Trees %>% select(created, modified, park, add_num, add_str, growspac, landuse, site_typ, species, genus, botanic, common, diameter, height, conditn)
# Select Insect Cols
Insect_data <- Insect_data %>% select(observed_on, quality_grade, num_identification_agreements, place_guess, latitude, longitude, scientific_name, common_name)
# Create combined address column
Street_Trees <- mutate(Street_Trees, addr = paste(add_num, add_str, ", Burlington, VT"))
# Find coords for each tree from addresses
tree_coords <- geocode(.tbl = Street_Trees, address = addr, method = 'census')
# Find coords for each tree from addresses
tree_coords <- geocode(.tbl = Street_Trees[1:100,], address = addr, method = 'osm' )
View(tree_coords)
unique(Street_Trees$addr)
# Find coords for each tree from addresses
tree_coords <- geocode(.tbl = Street_Trees[1:100,], address = addr, method = 'arcgis')
# Find coords for each tree from addresses
tree_coords <- geocode(.tbl = Street_Trees[1:100,], address = addr, method = 'census')
View(tree_coords)
# Find coords for each tree from addresses
tree_coords <- geocode(.tbl = Street_Trees[1:100,], address = addr, method = 'census')
# Find coords for each tree from addresses
tree_coords <- geocode(.tbl = Street_Trees[1:100,], address = addr, method = 'census')
View(Street_Trees)
add2use <- distinct(Street_Trees$addr)
add2use <- Street_Trees %>% select(add2use) %>% distinct()
add2use <- Street_Trees %>% select(addr) %>% distinct()
View(add2use)
# Find coords for each tree from addresses
tree_coords <- geocode(.tbl = Street_Trees[1:100,], address = addr, method = 'census')
View(Street_Trees)
View(tree_coords)
library(tidyverse)
library(tmap)
library(sf)
library(readxl)
library(AOI)
library(tidygeocoder)
library(kableExtra)
library(moderndive)
# Load in data
Street_Trees <- read_csv("./Tree_Sites_Public_View.csv")
# Select Street Tree Cols
Street_Trees <- Street_Trees %>% select(created, modified, park, add_num, add_str, growspac, landuse, site_typ, species, genus, botanic, common, diameter, height, conditn)
# Create combined address column
Street_Trees <- mutate(Street_Trees, addr = paste(add_num, add_str, ", Burlington, VT"))
# Find coords for each tree from addresses
tree_coords <- geocode(.tbl = Street_Trees, address = addr, method = 'census')
