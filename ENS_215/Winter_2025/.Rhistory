tm_dots(col = "COMMODITY") +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode(mode = "view")
fig_map <- shape_deps_selected %>%
tm_shape() +
tm_dots(col = "COMMODITY") +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
shape_deps_selected <- shape_deps %>%
filter(str_detect(tolower(COMMODITY) ,"gold") )
shape_deps_selected$COMMODITY <- fct_drop(shape_deps_selected$COMMODITY)
tmap_mode(mode = "view")
fig_map <- shape_deps_selected %>%
tm_shape() +
tm_dots(col = "COMMODITY") +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode(mode = "view")
fig_map <- shape_deps_selected %>%
tm_shape() +
tm_bubbles(col = "COMMODITY") +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode(mode = "view")
fig_map <- shape_deps_selected %>%
tm_shape() +
tm_bubbles(col = "COMMODITY", size = 1) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode(mode = "view")
fig_map <- shape_deps_selected %>%
tm_shape() +
tm_bubbles(col = "COMMODITY", size = 0.5) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode(mode = "view")
fig_map <- shape_deps_selected %>%
tm_shape() +
tm_bubbles(col = "COMMODITY", size = 0.1) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode(mode = "view")
fig_map <- shape_deps_selected %>%
tm_shape() +
tm_dots(col = "COMMODITY", size = 1) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode(mode = "view")
fig_map <- shape_deps_selected %>%
tm_shape() +
tm_dots(col = "COMMODITY", size = 0.5) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
View(shape_deps_selected)
tmap_mode(mode = "view")
fig_map <- shape_deps_selected %>%
tm_shape() +
tm_dots(col = "COMMODITY", size = 0.25) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
View(shape_deps)
tmap_mode(mode = "view")
fig_map <- shape_deps %>%
filter(to_lower(CATEGORY) == "gold") %>%
tm_shape() +
tm_dots(col = "COMMODITY", size = 0.25) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
tmap_mode(mode = "view")
fig_map <- shape_deps %>%
filter(tolower(CATEGORY) == "gold") %>%
tm_shape() +
tm_dots(col = "COMMODITY", size = 0.25) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode(mode = "view")
fig_map <- shape_deps %>%
filter(tolower(CATEGORY) == "gold") %>%
tm_shape() +
tm_dots(col = "CATERGORY", size = 0.25) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode(mode = "view")
fig_map <- shape_deps %>%
filter(tolower(CATEGORY) == "gold") %>%
tm_shape() +
tm_dots(col = "CATEGORY", size = 0.25) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
unique(shape_deps$CATEGORY)
tmap_mode(mode = "view")
fig_map <- shape_deps %>%
filter(tolower(CATEGORY) == "gold") %>%
tm_shape() +
tm_dots(col = "DEP_TYPE", size = 0.25) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode(mode = "view")
fig_map <- shape_deps %>%
filter(tolower(CATEGORY) == "gold") %>%
tm_shape() +
tm_dots(col = "DEP_TYPE", size = 0.25,
popup.vars = c("CATEGORY", "COMMODITY", "DEP_NAME")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode(mode = "view")
fig_map <- shape_deps %>%
filter(tolower(CATEGORY) == "gold") %>%
tm_shape() +
tm_dots(col = "DEP_TYPE", size = 0.25,
popup.vars = c("CATEGORY", "COMMODITY", "DEP_TYPE", "DEP_NAME")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
View(shape_deps)
tmap_mode(mode = "view")
fig_map <- shape_deps %>%
filter(tolower(CATEGORY) == "copper") %>%
tm_shape() +
tm_dots(col = "DEP_TYPE", size = 0.25,
popup.vars = c("CATEGORY", "COMMODITY", "DEP_TYPE", "DEP_NAME")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
library(tidyverse)
library(stationaRy)
library(sf)
library(tmap)
library(spData)
library(AOI)
library(climateR)
library(raster)
library(rasterVis)
library(patchwork)
# Get the data
#loc2use <- 'Death Valley National Park'
loc2use <- 'Union College'
AOI = AOI::geocode(loc2use,
pt = TRUE)
ts  = getGridMET(AOI, varname = c("tmmx","tmmn", "pr"),
startDate = "2024-01-01",
endDate = "2024-10-31")
# convert units
ts <- ts |>
mutate(tmax = ((tmmx - 273.15)*(9/5) +32),
tmin = ((tmmn - 273.15)*(9/5) +32),
prcp = pr/25.4
)
# convert units
ts <- ts %>%
mutate(tmax = ((tmmx - 273.15)*(9/5) +32),
tmin = ((tmmn - 273.15)*(9/5) +32),
prcp = pr/25.4
)
library(tidyverse)
library(tmap)
library(sf)
shape_deps <- st_read("../Data/USGS_OFR_20051294/ofr20051294/ofr20051294.shp")
shape_deps <- st_read("../Data/USGS_OFR_20051294/ofr20051294/ofr20051294.shp")
shape_deps <- st_read("../../Data/USGS_OFR_20051294/ofr20051294/ofr20051294.shp")
View(shape_deps)
tmap_mode(mode = "view")
fig_map <- shape_deps %>%
filter(tolower(CATEGORY) == "copper") %>%
tm_shape() +
tm_dots(col = "DEP_TYPE", size = 0.25,
popup.vars = c("CATEGORY", "COMMODITY", "DEP_TYPE", "DEP_NAME")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
fig_map
library(tidyverse)
library(tmap)
library(sf)
library(AOI)
locs <- AOI::aoi_get(x = c("Boston, MA"))
View(locs)
locs <- AOI::aoi_get(x = c("Boston, MA", "Schenectady, NY"))
locs <- aoi_get(state = c("CA", "NY"))
View(locs)
locs <- aoi_get(x = list("China", "Argentina"))
locs <- aoi_get(x = c("China", "Argentina"))
locs <- aoi_get(country = c("China", "Argentina"))
View(locs)
locs_state <- aoi_get(state = c("CA", "NY"))
locs_country <- aoi_get(country = c("China", "Argentina"))
tmap_mode("view")
locs_country %>%
tm_shape() +
tm_polygons()
locs_country %>%
tm_shape() +
tm_polygons(fill = "lightblue")
locs_country %>%
tm_shape() +
tm_polygons(col = "lightblue")
locs_country %>%
tm_shape() +
tm_polygons(col = "lightblue", border.col = "black")
locs_country %>%
tm_shape() +
tm_polygons(col = "lightblue", border.col = "black") +
tm_shape(locs_state) +
tm_polygons(col = "lightblue", border.col = "black")
locs_country %>%
tm_shape() +
tm_polygons(col = "orange", border.col = "black") +
tm_shape(locs_state) +
tm_polygons(col = "lightblue", border.col = "black")
locs_country %>%
tm_shape() +
tm_polygons(col = "orange", border.col = "black") +
tm_shape(locs_state) +
tm_polygons(col = "orange", border.col = "black")
library(tidyverse)
library(stationaRy)
library(sf)
library(tmap)
library(spData)
library(AOI)
library(climateR)
library(raster)
library(rasterVis)
library(patchwork)
# Get the data
#loc2use <- 'Death Valley National Park'
loc2use <- 'Union College'
AOI = AOI::geocode(loc2use,
pt = TRUE)
ts  = getGridMET(AOI, varname = c("tmmx","tmmn", "pr"),
startDate = "2024-01-01",
endDate = "2024-12-31")
# Get the data
#loc2use <- 'Death Valley National Park'
loc2use <- 'Union College'
AOI = AOI::geocode(loc2use,
pt = TRUE)
ts  = getGridMET(AOI, varname = c("tmmx","tmmn", "pr"),
startDate = "2024-01-01",
endDate = "2024-11-31")
# Get the data
#loc2use <- 'Death Valley National Park'
loc2use <- 'Union College'
AOI = AOI::geocode(loc2use,
pt = TRUE)
ts  = getGridMET(AOI, varname = c("tmmx","tmmn", "pr"),
startDate = "2024-01-01",
endDate = "2024-10-31")
# Get the data
#loc2use <- 'Death Valley National Park'
loc2use <- 'Union College'
AOI = AOI::geocode(loc2use,
pt = TRUE)
ts  = getGridMET(AOI, varname = c("tmmx","tmmn", "pr"),
startDate = "2024-01-01",
endDate = "2024-11-30")
# Get the data
#loc2use <- 'Death Valley National Park'
loc2use <- 'Union College'
AOI = AOI::geocode(loc2use,
pt = TRUE)
ts  = getGridMET(AOI, varname = c("tmmx","tmmn", "pr"),
startDate = "2024-01-01",
endDate = "2024-12-25")
# convert units
ts <- ts %>%
mutate(tmax = ((tmmx - 273.15)*(9/5) +32),
tmin = ((tmmn - 273.15)*(9/5) +32),
prcp = pr/25.4
)
# Summary table
ts %>%
summarize(pcrp_max = max(prcp),
temp_max = max(tmax),
temp_min = min(tmin),
temp_mean = mean((tmin+tmax)/2),
temp_max_change = max(tmax - tmin),
n_days = n()
)
# Summary table
ts %>%
summarize(pcrp_max = max(prcp),
temp_max = max(tmax),
temp_min = min(tmin),
temp_mean = mean((tmin+tmax)/2),
temp_max_change = max(tmax - tmin),
n_days = n()
)
# Make the figures
fig_01 <- ts %>%
ggplot() +
geom_line(aes(x = date, y = tmax), color = "red") +
geom_line(aes(x = date, y = tmin), color = "blue") +
labs(x = "",
y = "Temperature (F)"
) +
geom_hline(yintercept = 32, linetype = "dashed") +
theme_bw()
fig_02 <- ts %>%
ggplot() +
geom_col(aes(x = date, y = prcp), color = "black") +
labs(y = "Precipitation (inches)") +
theme_bw()
# Make the figures
(fig_01 / fig_02) +
plot_annotation(title = paste(loc2use,": Temperature and precipitation", sep = ""),
caption = "Data source: GridMET",
tag_levels = "a"
)
library(dataRetrieval)
library(lubridate)
df_stream_data <- readNWISdv(siteNumbers = "09380000",
parameterCd = c("00060"),
statCd = "00003") %>%
renameNWISColumns()
df_stream_data %>%
ggplot(aes(x = Date, y = Flow)) +
geom_line() +
theme_classic()
table_flows <- df_stream_data %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarize(mean_flow = mean(Flow, na.rm= T),
min_flow = min(Flow, na.rm = T),
max_flow = max(Flow, na.rm = T),
n_meas = n()) %>%
filter(n_meas > 350)
table_flows
fig_max <- table_flows %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = max_flow), size = 1, color = "blue") +
#geom_line(aes(y = min_flow), size = 1, color = "red") +
#geom_line(aes(y = mean_flow), size = 1, color = "black") +
theme_classic()
fig_min <- table_flows %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = min_flow), size = 1, color = "red") +
#geom_line(aes(y = mean_flow), size = 1, color = "black") +
theme_classic()
fig_mean <- table_flows %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = mean_flow), size = 1, color = "black") +
theme_classic()
fig_mean/fig_max/fig_min
library(tidycensus)
Schdy <- get_acs(
state = "NY",
county = "Schenectady",
geography = "tract",
variables = "B19013_001",
geometry = TRUE,
year = 2020
)
tmap_mode("plot")
fig_map <- r_inches %>%
tm_shape() +
tm_raster(style = "cont") +
tm_shape(spData::us_states) +
tm_borders()
library(tidyverse)
library(stationaRy)
library(sf)
library(tmap)
library(spData)
library(AOI)
library(climateR)
library(raster)
library(rasterVis)
library(patchwork)
# Get the data
#loc2use <- 'Death Valley National Park'
loc2use <- 'Union College'
AOI = AOI::geocode(loc2use,
pt = TRUE)
ts  = getGridMET(AOI, varname = c("tmmx","tmmn", "pr"),
startDate = "2024-01-01",
endDate = "2024-12-25")
# convert units
ts <- ts %>%
mutate(tmax = ((tmmx - 273.15)*(9/5) +32),
tmin = ((tmmn - 273.15)*(9/5) +32),
prcp = pr/25.4
)
# Summary table
ts %>%
summarize(pcrp_max = max(prcp),
temp_max = max(tmax),
temp_min = min(tmin),
temp_mean = mean((tmin+tmax)/2),
temp_max_change = max(tmax - tmin),
n_days = n()
)
# Make the figures
fig_01 <- ts %>%
ggplot() +
geom_line(aes(x = date, y = tmax), color = "red") +
geom_line(aes(x = date, y = tmin), color = "blue") +
labs(x = "",
y = "Temperature (F)"
) +
geom_hline(yintercept = 32, linetype = "dashed") +
theme_bw()
fig_02 <- ts %>%
ggplot() +
geom_col(aes(x = date, y = prcp), color = "black") +
labs(y = "Precipitation (inches)") +
theme_bw()
# Make the figures
(fig_01 / fig_02) +
plot_annotation(title = paste(loc2use,": Temperature and precipitation", sep = ""),
caption = "Data source: GridMET",
tag_levels = "a"
)
hurricane_data = getGridMET(aoi_get(state = c("NC")),
varname = "pr",
startDate = "2024-09-23", endDate = "2024-09-28")
r = terra::rast(hurricane_data)
r_inches <- r/25.4
tmap_mode("plot")
fig_map <- r_inches %>%
tm_shape() +
tm_raster(style = "cont") +
tm_shape(spData::us_states) +
tm_borders()
fig_map <-  fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode("view")
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
tmap_mode("view")
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
fig_map
tmap_mode("plot")
fig_map <- r_inches %>%
tm_shape() +
tm_raster(style = "cont") +
tm_shape(spData::us_states) +
tm_borders()
fig_map
tmap_mode("view")
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
fig_map %>%
tmap_leaflet %>%
leaflet.extras::addFullscreenControl()
url = "https://gitlab.com/meter-group-inc/pubpackages/zentracloud"
remotes::install_git(url = url, build_vignettes = TRUE)
remotes::install_git(url = url, build_vignettes = TRUE)
url = "https://gitlab.com/meter-group-inc/pubpackages/zentracloud"
remotes::install_git(url = url, build_vignettes = TRUE)
remotes::install_gitlab(url = url, build_vignettes = TRUE)
