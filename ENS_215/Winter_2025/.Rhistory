ggplot(aes(x = Date, y = flow_cfs)) +
geom_line() +
theme_classic() +
scale_y_log10() +
labs(title = "USGS Gage 01351500",
y = "Flow (cfs)",
x = "")
flow %>%
mutate(decade = Year - Year %% 10) %>%
ggplot(aes(x = Date, y = flow_cfs)) +
geom_line() +
scale_y_log10() +
theme_bw() +
facet_wrap(~ decade, scales = "free_x")
midpoint2use <- median(log10(flow$flow_cfs))
flow %>%
mutate(DOY = yday(Date)) %>%
ggplot(aes(x = DOY, y = Year,
fill = log10(flow_cfs))) +
scale_fill_gradient2(low = "red", mid = "green", high = "blue",
midpoint = midpoint2use) +
geom_tile() +
theme_classic() +
labs(title = "Schoharie Creek Flows",
subtitle = "USGS Gage 01351500",
y = "Year",
x = "Day of year",
fill = "log(flow)")
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/noaa_cag_state_precipitation.csv")
precip_data <- precip_data %>%
rename(Precip_inches = Value)
precip_data %>%
filter(STATE == "California", YEAR >= 1960, YEAR < 2025) %>%
ggplot(aes(y = factor(MONTH), x = YEAR)) +
geom_tile(aes(fill = percent_rank(Precip_inches)), color = "black") +
scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0.5) +
coord_equal() +
theme_classic() +
labs(y = "Month",
fill = "Precip rank")
mauna_loa <- read_csv("https://stahlm.github.io/ENS_215/Data/Mauna_loa_CO2_data.csv", skip = 2)
mauna_loa <- read_csv("https://stahlm.github.io/ENS_215/Data/Mauna_loa_CO2_data.csv", skip = 2)
mauna_loa <- read_csv("https://stahlm.github.io/ENS_215/Data/Mauna_loa_CO2_data.csv", skip = 2)
mauna_loa <- read_csv("https://stahlm.github.io/ENS_215/Data/Mauna_loa_CO2_data.csv", skip = 2)
mauna_loa <- read_csv("https://stahlm.github.io/ENS_215/Data/Mauna_loa_CO2_data.csv", skip = 2)
mauna_loa <- read_csv("https://stahlm.github.io/ENS_215/Data/Mauna_loa_CO2_data.csv", skip = 2)
mauna_loa <- read_csv("https://stahlm.github.io/ENS_215/Data/Mauna_loa_CO2_data.csv", skip = 2)
View(mauna_loa)
mauna_loa %>%
ggplot(aes(x = make_date(Year, Month, 15), y = CO2_ppm)) +
geom_line(size = 1) +
theme_bw() +
labs(title = expression("Atmospheric CO"[2]),
subtitle = "Measured at Mauna Loa, Hawaii",
x = "",
y = expression("CO"[2]* " (ppm)"),
caption = "Data source: NOAA/ESRL")
mauna_loa %>%
filter(Year >= 2010) %>%
ggplot(aes(x = Month, y = CO2_ppm, group = Year, color = Year)) +
geom_line() +
scale_color_gradient(low = "blue", high = "red") +
theme_classic() +
labs(title = expression("Atmospheric CO"[2]),
subtitle = "Measured at Mauna Loa, Hawaii",
x = "Month",
y = expression("CO"[2]* " (ppm)"),
caption = "Data source: NOAA/ESRL") +
scale_x_continuous(breaks = seq(1:12))
flow %>%
group_by(Year,Month) %>%
summarize(mean_flow_cfs = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(y = factor(Month), x = Year)) +
geom_tile(aes(fill = percent_rank(mean_flow_cfs)), color = "black") +
scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0.5) +
coord_equal() +
theme_classic() +
labs(y = "Month",
fill = "Flow rank")
flow %>%
group_by(Year, Month) %>%
summarize(mean_flow_cfs = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Month, y = mean_flow_cfs, group = Year, color = Year)) +
geom_line() +
scale_color_gradient(low = "blue", high = "red") +
scale_y_log10() +  # y scale log10
theme_bw()
flow %>%
group_by(Year, Month) %>%
summarize(mean_flow_cfs = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Month, y = mean_flow_cfs, group = Year, color = Year)) +
geom_line() +
scale_color_gradient(low = "blue", high = "red") +
scale_y_log10() +  # y scale log10
theme_bw()
precip_data %>%
filter(STATE == "California", YEAR >= 1960, YEAR < 2025) %>%
ggplot(aes(y = factor(MONTH), x = YEAR)) +
geom_tile(aes(fill = percent_rank(Precip_inches)), color = "black") +
scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0.5) +
coord_equal() +
theme_classic() +
labs(y = "Month",
fill = "Precip rank")
precip_data %>%
filter(STATE == "California", YEAR >= 1960, YEAR < 2025) %>%
ggplot(aes(y = factor(MONTH), x = YEAR)) +
geom_tile(aes(fill = percent_rank(Precip_inches)), color = "black") +
scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0.5) +
coord_equal() +
theme_classic() +
labs(y = "Month",
fill = "Precip rank")
precip_data %>%
filter(STATE == "California", YEAR >= 1960, YEAR < 2025) %>%
ggplot(aes(y = factor(MONTH), x = YEAR)) +
geom_tile(aes(fill = percent_rank(Precip_inches)), color = "black") +
scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0.5) +
coord_equal() +
theme_classic() +
labs(y = "Month",
fill = "Precip rank")
precip_data %>%
filter(STATE == "California", YEAR >= 1960, YEAR < 2025) %>%
ggplot(aes(y = factor(MONTH), x = YEAR)) +
geom_tile(aes(fill = percent_rank(Precip_inches)), color = "black") +
scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0.5) +
coord_equal() +
theme_classic() +
labs(y = "Month",
fill = "Precip rank")
precip_data %>%
filter(STATE == "California", YEAR >= 1960, YEAR < 2025) %>%
ggplot(aes(y = factor(MONTH), x = YEAR)) +
geom_tile(aes(fill = percent_rank(Precip_inches)), color = "black") +
scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0.5) +
coord_equal() +
theme_classic() +
labs(y = "Month",
fill = "Precip rank")
precip_data %>%
filter(STATE == "California", YEAR >= 1960, YEAR < 2025) %>%
ggplot(aes(y = factor(MONTH), x = YEAR)) +
geom_tile(aes(fill = percent_rank(Precip_inches)), color = "black") +
scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0.5) +
coord_equal() +
theme_classic() +
labs(y = "Month",
fill = "Precip rank")
flow %>%
group_by(Year, Month) %>%
summarize(mean_flow_cfs = mean(flow_cfs, na.rm = T)) %>%
ggplot(aes(x = Month, y = mean_flow_cfs, group = Year, color = Year)) +
geom_line() +
scale_color_gradient(low = "blue", high = "red") +
scale_x_continuous(breaks = seq(1:12)) +
scale_y_log10() +  # y scale log10
theme_bw()
library(tidyverse)
library(lubridate)
library(ggExtra)
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv") %>%
drop_na()
fig_1 <- bangladesh_gw %>%
ggplot(aes(x = WELL_DEPTH_m, y = LAT_DEG)) +
geom_point(alpha = 0.3) +
theme_classic()
fig_1
fig_2 <- ggMarginal(fig_1, type = "histogram", fill = "gray")
fig_2
bangladesh_gw %>%
ggplot(aes(x = WELL_DEPTH_m, y = LAT_DEG)) +
geom_hex() +
theme_classic()
bangladesh_gw %>%
ggplot(aes(x = WELL_DEPTH_m, y = LAT_DEG)) +
geom_hex() +
scale_fill_viridis_c() +
theme_classic()
flow <- read_csv("https://stahlm.github.io/ENS_215/Data/USGS_streamflow_01351500.csv") %>%
drop_na() %>%
filter(Year >= 1940 & Year < 2025) %>%  # select years 1940 through 2024
mutate(Date = make_date(Year, Month, Day)) # create a Date column that has the dates as an R date object
flow %>%
ggplot(aes(x = Date, y = flow_cfs)) +
geom_line() +
theme_classic() +
labs(title = "USGS Gage 01351500",
y = "Flow (cfs)",
x = "")
flow %>%
ggplot(aes(x = Date, y = flow_cfs)) +
geom_line() +
theme_classic() +
scale_y_log10() +
labs(title = "USGS Gage 01351500",
y = "Flow (cfs)",
x = "")
flow %>%
mutate(decade = Year - Year %% 10) %>%
ggplot(aes(x = Date, y = flow_cfs)) +
geom_line() +
scale_y_log10() +
theme_bw() +
facet_wrap(~ decade, scales = "free_x")
midpoint2use <- median(log10(flow$flow_cfs))
flow %>%
mutate(DOY = yday(Date)) %>%
ggplot(aes(x = DOY, y = Year,
fill = log10(flow_cfs))) +
geom_tile() +
scale_fill_gradient2(low = "red", mid = "green", high = "blue",
midpoint = midpoint2use) +
theme_classic() +
labs(title = "Schoharie Creek Flows",
subtitle = "USGS Gage 01351500",
y = "Year",
x = "Day of year",
fill = "log(flow)")
precip_data %>%
filter(STATE == "New York", YEAR >= 1960, YEAR < 2025) %>%
ggplot(aes(y = factor(MONTH), x = YEAR)) +
geom_tile(aes(fill = percent_rank(Precip_inches)), color = "black") +
scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0.5) +
coord_equal() +
theme_classic() +
labs(y = "Month",
fill = "Precip rank")
mauna_loa %>%
filter(Year >= 2010) %>%
ggplot(aes(x = Month, y = CO2_ppm, group = Year, color = Year)) +
geom_line(linewidth = 2) +
scale_color_gradient(low = "blue", high = "red") +
theme_classic() +
labs(title = expression("Atmospheric CO"[2]),
subtitle = "Measured at Mauna Loa, Hawaii",
x = "Month",
y = expression("CO"[2]* " (ppm)"),
caption = "Data source: NOAA/ESRL") +
scale_x_continuous(breaks = seq(1:12))
library(tidyverse)
library(lubridate)
library(ggExtra)
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv") %>%
drop_na()
fig_1 <- bangladesh_gw %>%
ggplot(aes(x = WELL_DEPTH_m, y = LAT_DEG)) +
geom_point(alpha = 0.3) +
theme_classic()
fig_1
fig_2 <- ggMarginal(fig_1, type = "histogram", fill = "gray")
fig_2
bangladesh_gw %>%
ggplot(aes(x = WELL_DEPTH_m, y = LAT_DEG)) +
geom_hex() +
theme_classic()
bangladesh_gw %>%
ggplot(aes(x = WELL_DEPTH_m, y = LAT_DEG)) +
geom_hex() +
scale_fill_viridis_c() +
theme_classic()
flow <- read_csv("https://stahlm.github.io/ENS_215/Data/USGS_streamflow_01351500.csv") %>%
drop_na() %>%
filter(Year >= 1940 & Year < 2025) %>%  # select years 1940 through 2024
mutate(Date = make_date(Year, Month, Day)) # create a Date column that has the dates as an R date object
flow %>%
ggplot(aes(x = Date, y = flow_cfs)) +
geom_line() +
theme_classic() +
labs(title = "USGS Gage 01351500",
y = "Flow (cfs)",
x = "")
flow %>%
ggplot(aes(x = Date, y = flow_cfs)) +
geom_line() +
theme_classic() +
scale_y_log10() +
labs(title = "USGS Gage 01351500",
y = "Flow (cfs)",
x = "")
flow %>%
mutate(decade = Year - Year %% 10) %>%
ggplot(aes(x = Date, y = flow_cfs)) +
geom_line() +
scale_y_log10() +
theme_bw() +
facet_wrap(~ decade, scales = "free_x")
midpoint2use <- median(log10(flow$flow_cfs))
flow %>%
mutate(DOY = yday(Date)) %>%
ggplot(aes(x = DOY, y = Year,
fill = log10(flow_cfs))) +
geom_tile() +
scale_fill_gradient2(low = "red", mid = "green", high = "blue",
midpoint = midpoint2use) +
theme_classic() +
labs(title = "Schoharie Creek Flows",
subtitle = "USGS Gage 01351500",
y = "Year",
x = "Day of year",
fill = "log(flow)")
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/noaa_cag_state_precipitation.csv")
precip_data <- precip_data %>%
rename(Precip_inches = Value)
precip_data %>%
filter(STATE == "California", YEAR >= 1960, YEAR < 2025) %>%
ggplot(aes(y = factor(MONTH), x = YEAR)) +
geom_tile(aes(fill = percent_rank(Precip_inches)), color = "black") +
scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0.5) +
coord_equal() +
theme_classic() +
labs(y = "Month",
fill = "Precip rank")
mauna_loa <- read_csv("https://stahlm.github.io/ENS_215/Data/Mauna_loa_CO2_data.csv", skip = 2)
mauna_loa %>%
ggplot(aes(x = make_date(Year, Month, 15), y = CO2_ppm)) +
geom_line(size = 1) +
theme_bw() +
labs(title = expression("Atmospheric CO"[2]),
subtitle = "Measured at Mauna Loa, Hawaii",
x = "",
y = expression("CO"[2]* " (ppm)"),
caption = "Data source: NOAA/ESRL")
mauna_loa %>%
filter(Year >= 2010) %>%
ggplot(aes(x = Month, y = CO2_ppm, group = Year, color = Year)) +
geom_line(linewidth = 2) +
scale_color_gradient(low = "blue", high = "red") +
theme_classic() +
labs(title = expression("Atmospheric CO"[2]),
subtitle = "Measured at Mauna Loa, Hawaii",
x = "Month",
y = expression("CO"[2]* " (ppm)"),
caption = "Data source: NOAA/ESRL") +
scale_x_continuous(breaks = seq(1:12))
mauna_loa %>%
filter(Year >= 2010) %>%
ggplot(aes(x = Month, y = CO2_ppm, group = Year, color = Year)) +
geom_line(linewidth = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
theme_classic() +
labs(title = expression("Atmospheric CO"[2]),
subtitle = "Measured at Mauna Loa, Hawaii",
x = "Month",
y = expression("CO"[2]* " (ppm)"),
caption = "Data source: NOAA/ESRL") +
scale_x_continuous(breaks = seq(1:12))
mauna_loa %>%
filter(Year >= 2010) %>%
ggplot(aes(x = Month, y = CO2_ppm, group = Year, color = Year)) +
geom_line(linewidth = 1) +
scale_color_gradient(low = "blue", high = "red") +
theme_classic() +
labs(title = expression("Atmospheric CO"[2]),
subtitle = "Measured at Mauna Loa, Hawaii",
x = "Month",
y = expression("CO"[2]* " (ppm)"),
caption = "Data source: NOAA/ESRL") +
scale_x_continuous(breaks = seq(1:12))
library(tidyverse)
library(patchwork) # we'll use this for some figures in this class
cube_it <- function(cube_me){
# Function computes the cube of the input
# inputs: cube_me is the value to cube
# output: the cube of cube_me
cube_me^3 # take the cube of the input cube_me
}
library(tidyverse)
library(patchwork) # we'll use this for some figures in this class
cube_it <- function(cube_me){
# Function computes the cube of the input
# inputs: cube_me is the value to cube
# output: the cube of cube_me
cube_me^3 # take the cube of the input cube_me
}
cube_it(5)
cube_it(cube_me = 5)
pow_it <- function(base_val, exp_val){
# Raises an input value to a specified power
# inputs: base_val is the value to be raised to a power; exp_val is the exponent value
# output: base_val raised to the exp_val
base_val^exp_val
}
pow_it(base_val = 2, exp_val = 3)
pow_it(exp_val = 3, base_val = 2)
pow_it(2, 3)
F_to_C <- function(deg_F){
(deg_F - 32)*(5/9)
}
pow_it <- function(base_val, exp_val = 1){
base_val^exp_val
}
pow_it(base_val = 3)
pow_it(base_val = 3, exp_val = 3)
add_something <- function(my_number){
add_number <- 1
my_number + add_number
}
add_something(my_number = 5)
add_number <- 4
add_something(my_number = 5)
add_something <- function(my_number){
my_number + add_number
}
add_number <- 10
add_something(my_number = 5)
get_stats_bad <- function(input_data){
min(input_data)
max(input_data)
mean(input_data)
}
my_data <- tibble(x = runif(1000, min = 0, max = 50))  #generate a vector of 1000 random values between 0 and 50
get_stats_bad(my_data$x)
get_stats_good <- function(input_data){
# Computes basic statistics on a univariate dataset
# inputs: input_data is a vector of values
# outputs: list containing the min, max, and mean of the input_data
stat_min <- min(input_data)
stat_max <- max(input_data)
stat_mean <- mean(input_data)
c(stat_min, stat_max, stat_mean)
}
get_stats_good(my_data$x)
library(tidyverse)
library(patchwork) # we'll use this for some figures in this class
cube_it <- function(cube_me){
# Function computes the cube of the input
# inputs: cube_me is the value to cube
# output: the cube of cube_me
cube_me^3 # take the cube of the input cube_me
}
cube_it(5)
cube_it(cube_me = 5)
pow_it <- function(base_val, exp_val){
# Raises an input value to a specified power
# inputs: base_val is the value to be raised to a power; exp_val is the exponent value
# output: base_val raised to the exp_val
base_val^exp_val
}
pow_it(base_val = 2, exp_val = 3)
pow_it(exp_val = 3, base_val = 2)
pow_it(2, 3)
F_to_C <- function(deg_F){
(deg_F - 32)*(5/9)
}
pow_it <- function(base_val, exp_val = 1){
base_val^exp_val
}
pow_it(base_val = 3)
pow_it(base_val = 3, exp_val = 3)
add_something <- function(my_number){
add_number <- 1
my_number + add_number
}
add_something(my_number = 5)
add_number <- 4
add_something(my_number = 5)
add_something <- function(my_number){
my_number + add_number
}
add_number <- 10
add_something(my_number = 5)
get_stats_bad <- function(input_data){
min(input_data)
max(input_data)
mean(input_data)
}
my_data <- tibble(x = runif(1000, min = 0, max = 50))  #generate a vector of 1000 random values between 0 and 50
get_stats_bad(my_data$x)
get_stats_good <- function(input_data){
# Computes basic statistics on a univariate dataset
# inputs: input_data is a vector of values
# outputs: list containing the min, max, and mean of the input_data
stat_min <- min(input_data)
stat_max <- max(input_data)
stat_mean <- mean(input_data)
c(stat_min, stat_max, stat_mean)
}
get_stats_good(my_data$x)
get_stats_good <- function(input_data){
stat_min <- min(input_data)
stat_max <- max(input_data)
stat_mean <- mean(input_data)
fig_hist <- ggplot() +
geom_histogram(aes(x = input_data)) +
theme_classic()
list(stat_min, stat_max, stat_mean, fig_hist)
}
get_stats_good(my_data$x)
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
state_climate_summary <- function(climate_data, state_abbrev){
table_months <- climate_data %>%
filter(state_cd == state_abbrev) %>%
group_by(Month) %>%
summarise(month_mean = mean(Avg_Temp_F), month_max = max(Avg_Temp_F), month_min = min(Avg_Temp_F) )
table_annual <- climate_data %>%
filter(state_cd == state_abbrev) %>%
group_by(Year) %>%
summarise(annual_mean = mean(Avg_Temp_F))
fig_annual <- table_annual %>%
ggplot(aes(x = Year, y = annual_mean)) +
geom_line() +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Annual mean temperature:",state_abbrev),
x = "",
y = "Annual Mean Temp (F)",
caption = "Data source: NOAA") +
theme_classic()
list(table_months, table_annual, fig_annual)
}
state_climate_summary(state_temps, "MA")
