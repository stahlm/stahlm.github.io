library(factoextra) # clustering algorithms & visualization
library(FactoMineR)
library(tmap)
library(sf)
set.seed(123)
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
table_cluster <- bangladesh_gw %>%
select(SAMPLE_ID,
Ba_mgL,
Ca_mgL,
Fe_mgL,
Mn_mgL,
K__mgL,
Mg_mgL,
Na_mgL,
Si_mgL,
SO4_mgL,
Sr_mgL) %>%
drop_na() # need to drop any samples with NA values since can't cluster sites with missing data
table_cluster <- column_to_rownames(table_cluster, var = "SAMPLE_ID")
head(table_cluster)
table_cluster_scaled <- scale(table_cluster)
head(table_cluster_scaled)
res.pca <- PCA(table_cluster_scaled,  graph = FALSE)
# Control variable colors using their contributions
fviz_pca_var(res.pca, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
library(tidyverse)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(FactoMineR)
library(tmap)
library(sf)
set.seed(123)
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
table_cluster <- bangladesh_gw %>%
select(SAMPLE_ID,
Ba_mgL,
Ca_mgL,
Fe_mgL,
Mn_mgL,
K__mgL,
Mg_mgL,
Na_mgL,
Si_mgL,
SO4_mgL,
Sr_mgL) %>%
drop_na() # need to drop any samples with NA values since can't cluster sites with missing data
table_cluster <- column_to_rownames(table_cluster, var = "SAMPLE_ID")
head(table_cluster)
table_cluster_scaled <- scale(table_cluster)
head(table_cluster_scaled)
res.pca <- PCA(table_cluster_scaled,  graph = FALSE)
# Control variable colors using their contributions
fviz_pca_var(res.pca, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_nbclust(
table_cluster_scaled,
pam,
k.max = 10,
method = "wss",
diss = get_dist(table_cluster, method = "spearman")
#diss = get_dist(table_cluster, method = "euclidean")
)
n_clust = 6
k_n = cluster::pam(table_cluster_scaled, k = n_clust)
fig_cluster <- fviz_cluster(k_n, data = table_cluster_scaled,
ellipse = T, palette = "Set2",
geom = "point") +
theme_classic()
fig_cluster
df_cluster_info <- tibble(SAMPLE_ID = row.names(table_cluster_scaled),
cluster_id = k_n$cluster)
bangladesh_gw <- bangladesh_gw %>%
left_join(df_cluster_info)
bangladesh_gw <- bangladesh_gw %>%
mutate(cluster_id = factor(cluster_id))
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = As_ugL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Fe_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = SO4_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Si_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = WELL_DEPTH_m, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
summary(bangladesh_gw$cluster_id)
sf_bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "As_ugL", palette = "viridis", breaks = c(0,5,10,50,100,200),
popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar() +
tm_facets(by = "cluster_id", sync = T)
sf_bangladesh_gw <- bangladesh_gw %>%
st_as_sf(coords = c("LONG_DEG", "LAT_DEG"))
sf_bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "As_ugL", palette = "viridis", breaks = c(0,5,10,50,100,200),
popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar() +
tm_facets(by = "cluster_id", sync = T)
tmap_mode("view")
sf_bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "As_ugL", palette = "viridis", breaks = c(0,5,10,50,100,200),
popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar() +
tm_facets(by = "cluster_id", sync = T)
sf_bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "As_ugL", palette = "viridis", breaks = c(0,5,10,50,100,200),
popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar() +
tm_facets(by = "cluster_id", sync = T)
library(tidyverse)
library(lubridate)
library(leaflet)
library(sf)
library(tmap)
library(dataRetrieval)
pCode <- c("00940")
sites_Cl <- whatWQPdata(stateCd = "CT",
parameterCd = pCode,
startDate = "2015-01-01"
) %>%
filter(ResolvedMonitoringLocationTypeName %in% c("Stream"))
View(sites_Cl)
data_Cl <- readWQPqw(siteNumbers = sites_Cl$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = "2015-01-01"
)
View(data_Cl)
pCode <- c("00930")
sites_Na <- whatWQPdata(stateCd = "CT",
parameterCd = pCode,
startDate = "2015-01-01"
) %>%
filter(ResolvedMonitoringLocationTypeName %in% c("Stream"))
data_Na <- readWQPqw(siteNumbers = sites_Na$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = "2015-01-01"
)
View(data_Na)
data_select_Cl <- data_Cl %>%
select(ActivityStartDate, CharacteristicName, ResultMeasureValue, ResultMeasure.MeasureUnitCode)
View(data_select_Cl)
data_select_Cl <- data_Cl %>%
select(ActivityStartDate, MonitoringLocationIdentifier,
CharacteristicName, USGSPCode,
ResultMeasureValue, ResultMeasure.MeasureUnitCode)
data_select_Cl <- data_Cl %>%
select(ActivityStartDate, MonitoringLocationIdentifier,
CharacteristicName_Cl = CharacteristicName,
USGSPCode_Cl = USGSPCode,
ResultMeasureValue_Cl = ResultMeasureValue,
ResultMeasure_MeasureUnitCode_Cl = ResultMeasure.MeasureUnitCode)
data_select_Na <- data_Na %>%
select(ActivityStartDate, MonitoringLocationIdentifier,
CharacteristicName_Na = CharacteristicName,
USGSPCode_Na = USGSPCode,
ResultMeasureValue_Na = ResultMeasureValue,
ResultMeasure_MeasureUnitCode_Na = ResultMeasure.MeasureUnitCode)
data_Na_Cl <- data_Na %>%
full_join(data_Cl)
data_Na_Cl <- data_select_Na %>%
full_join(data_select_Cl)
View(data_Na_Cl)
data_Na_Cl %>%
ggplot(aes(x = ResultMeasureValue_Na, y = ResultMeasureValue_Cl)) +
geom_point()
View(sites_Cl)
site_info_select <- sites_Cl %>%
bind_rows(sites_Na) %>%
distinct()
site_info_select <- site_info_select %>%
select(MonitoringLocationIdentifier,
MonitoringLocationName,
HUCEightDigitCode,
ResolvedMonitoringLocationTypeName,
StateName,
CountyName)
data_Na_Cl <- data_Na_Cl %>%
left_join(site_info_select)
View(site_info_select)
length(unique(site_info_select$MonitoringLocationIdentifier))
site_info_select <- site_info_select %>%
select(MonitoringLocationIdentifier,
MonitoringLocationName,
HUCEightDigitCode,
ResolvedMonitoringLocationTypeName,
StateName,
CountyName) %>%
duplicated()
data_Na_Cl <- data_select_Na %>%
full_join(data_select_Cl)
site_info_select <- sites_Cl %>%
bind_rows(sites_Na) %>%
distinct()
site_info_select <- site_info_select %>%
select(MonitoringLocationIdentifier,
MonitoringLocationName,
HUCEightDigitCode,
ResolvedMonitoringLocationTypeName,
StateName,
CountyName) %>%
distinct()
data_Na_Cl <- data_Na_Cl %>%
left_join(site_info_select)
View(data_Na_Cl)
site_info_select <- sites_Cl %>%
bind_rows(sites_Na) %>%
distinct()
data_Na_Cl <- data_select_Na %>%
full_join(data_select_Cl)
site_info_select <- site_info_select %>%
select(MonitoringLocationIdentifier,
MonitoringLocationName,
HUCEightDigitCode,
ResolvedMonitoringLocationTypeName,
StateName,
CountyName,
lat,
lon) %>%
distinct()
data_Na_Cl <- data_Na_Cl %>%
left_join(site_info_select)
site_summary <- data_Na_Cl %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(n = n())
View(site_summary)
site_summary <- data_Na_Cl %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(n_samples = n())
sites2plot <- site_summary %>%
filter(n_samples >= 10)
data_Na_Cl %>%
filter(MonitoringLocationIdentifier %in% sites2plot$MonitoringLocationIdentifier) %>%
ggplot(aes(x = ActivityStartDate, y = ResultMeasureValue_Na, group = MonitoringLocationIdentifier)) +
geom_point() +
geom_line()
data_Na_Cl %>%
filter(MonitoringLocationIdentifier %in% sites2plot$MonitoringLocationIdentifier) %>%
ggplot(aes(x = ActivityStartDate, y = ResultMeasureValue_Na, group = MonitoringLocationIdentifier)) +
geom_point() +
geom_line() +
facet_wrap(~MonitoringLocationIdentifier)
sites2plot <- site_summary %>%
filter(n_samples >= 50)
data_Na_Cl %>%
filter(MonitoringLocationIdentifier %in% sites2plot$MonitoringLocationIdentifier) %>%
ggplot(aes(x = ActivityStartDate, y = ResultMeasureValue_Na, group = MonitoringLocationIdentifier)) +
geom_point() +
geom_line() +
facet_wrap(~MonitoringLocationIdentifier)
sites2plot <- site_summary %>%
filter(n_samples >= 100)
sites2plot <- site_summary %>%
filter(n_samples >= 70)
data_Na_Cl %>%
filter(MonitoringLocationIdentifier %in% sites2plot$MonitoringLocationIdentifier) %>%
ggplot(aes(x = ActivityStartDate, y = ResultMeasureValue_Na, group = MonitoringLocationIdentifier)) +
geom_point() +
geom_line() +
facet_wrap(~MonitoringLocationIdentifier)
start_date <- "1995-01-01"
library(tidyverse)
library(lubridate)
library(leaflet)
library(sf)
library(tmap)
library(dataRetrieval)
start_date <- "1995-01-01"
pCode <- c("00940")
sites_Cl <- whatWQPdata(stateCd = "CT",
parameterCd = pCode,
startDate = start_date
) %>%
filter(ResolvedMonitoringLocationTypeName %in% c("Stream"))
data_Cl <- readWQPqw(siteNumbers = sites_Cl$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = start_date
)
pCode <- c("00930")
sites_Na <- whatWQPdata(stateCd = "CT",
parameterCd = pCode,
startDate = start_date
) %>%
filter(ResolvedMonitoringLocationTypeName %in% c("Stream"))
data_Na <- readWQPqw(siteNumbers = sites_Na$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = start_date
)
data_select_Cl <- data_Cl %>%
select(ActivityStartDate, MonitoringLocationIdentifier,
CharacteristicName_Cl = CharacteristicName,
USGSPCode_Cl = USGSPCode,
ResultMeasureValue_Cl = ResultMeasureValue,
ResultMeasure_MeasureUnitCode_Cl = ResultMeasure.MeasureUnitCode)
data_select_Na <- data_Na %>%
select(ActivityStartDate, MonitoringLocationIdentifier,
CharacteristicName_Na = CharacteristicName,
USGSPCode_Na = USGSPCode,
ResultMeasureValue_Na = ResultMeasureValue,
ResultMeasure_MeasureUnitCode_Na = ResultMeasure.MeasureUnitCode)
data_Na_Cl <- data_select_Na %>%
full_join(data_select_Cl)
data_select_Cl <- data_select_Cl %>%
group_by(ActivityStartDate, MonitoringLocationIdentifier) %>%
summarize(CharacteristicName_Cl = first(CharacteristicName_Cl),
USGSPCode_Cl = first(USGSPCode_Cl),
ResultMeasureValue_Cl = mean(ResultMeasureValue_Cl, na.rm = T),
ResultMeasure_MeasureUnitCode_Cl = first(ResultMeasure_MeasureUnitCode_Cl)
)
data_select_Cl <- data_Cl %>%
select(ActivityStartDate, MonitoringLocationIdentifier,
CharacteristicName_Cl = CharacteristicName,
USGSPCode_Cl = USGSPCode,
ResultMeasureValue_Cl = ResultMeasureValue,
ResultMeasure_MeasureUnitCode_Cl = ResultMeasure.MeasureUnitCode)
data_select_Cl <- data_select_Cl %>%
group_by(ActivityStartDate, MonitoringLocationIdentifier) %>%
summarize(CharacteristicName_Cl = first(CharacteristicName_Cl),
USGSPCode_Cl = first(USGSPCode_Cl),
ResultMeasureValue_Cl = mean(ResultMeasureValue_Cl, na.rm = T),
ResultMeasure_MeasureUnitCode_Cl = first(ResultMeasure_MeasureUnitCode_Cl)
)
data_select_Na <- data_Na %>%
select(ActivityStartDate, MonitoringLocationIdentifier,
CharacteristicName_Na = CharacteristicName,
USGSPCode_Na = USGSPCode,
ResultMeasureValue_Na = ResultMeasureValue,
ResultMeasure_MeasureUnitCode_Na = ResultMeasure.MeasureUnitCode)
data_select_Na <- data_select_Na %>%
group_by(ActivityStartDate, MonitoringLocationIdentifier) %>%
summarize(CharacteristicName_Na = first(CharacteristicName_Na),
USGSPCode_Na = first(USGSPCode_Na),
ResultMeasureValue_Na = mean(ResultMeasureValue_Na, na.rm = T),
ResultMeasure_MeasureUnitCode_Na = first(ResultMeasure_MeasureUnitCode_Na)
)
data_Na_Cl <- data_select_Na %>%
full_join(data_select_Cl)
site_info_select <- sites_Cl %>%
bind_rows(sites_Na) %>%
distinct()
site_info_select <- site_info_select %>%
select(MonitoringLocationIdentifier,
MonitoringLocationName,
HUCEightDigitCode,
ResolvedMonitoringLocationTypeName,
StateName,
CountyName,
lat,
lon) %>%
distinct()
data_Na_Cl <- data_Na_Cl %>%
left_join(site_info_select)
write_csv(x = data_Na_Cl, file = "./data_Na_Cl.csv")
write_csv(x = data_Na_Cl, file = "./data_Na_Cl.csv")
data_Na_Cl %>%
ggplot(aes(x = ResultMeasureValue_Na, y = ResultMeasureValue_Cl)) +
geom_point()
site_summary <- data_Na_Cl %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(n_samples = n())
sites2plot <- site_summary %>%
filter(n_samples >= 70)
sites2plot <- site_summary %>%
filter(n_samples >= 125)
sites2plot <- site_summary %>%
filter(n_samples >= 150)
sites2plot <- site_summary %>%
filter(n_samples >= 200)
sites2plot <- site_summary %>%
filter(n_samples >= 300)
sites2plot <- site_summary %>%
filter(n_samples >= 250)
sites2plot <- site_summary %>%
filter(n_samples >= 210)
sites2plot <- site_summary %>%
filter(n_samples >= 220)
sites2plot <- site_summary %>%
filter(n_samples >= 225)
sites2plot <- site_summary %>%
filter(n_samples >= 230)
data_Na_Cl %>%
filter(MonitoringLocationIdentifier %in% sites2plot$MonitoringLocationIdentifier) %>%
ggplot(aes(x = ActivityStartDate, y = ResultMeasureValue_Na, group = MonitoringLocationIdentifier)) +
geom_point() +
geom_line() +
facet_wrap(~MonitoringLocationIdentifier)
library(tidyverse)
library(lubridate)
library(tmap)
library(sf)
library(climateR)
library(AOI)
library(spData)
library(dygraphs)
library(xts)
raster_tc_ppt <- climateR::dap(
URL= "http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_ppt_1958_CurrentYear_GLOBE.nc",
catalog = NULL,
AOI = my_aoi,
grid = NULL,
varname = NULL,
endDate = "2023-01-01",
startDate =  "2022-05-01",
toptobottom = FALSE,
verbose = TRUE
)
my_aoi <- AOI::aoi_get(county = "Ulster", state = "NY")
raster_tc_ppt <- climateR::dap(
URL= "http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_ppt_1958_CurrentYear_GLOBE.nc",
catalog = NULL,
AOI = my_aoi,
grid = NULL,
varname = NULL,
endDate = "2023-01-01",
startDate =  "2022-05-01",
toptobottom = FALSE,
verbose = TRUE
)
terra::plot(raster_tc_ppt)
terra::plot(raster_tc_ppt$ppt)
raster_tc_ppt <- climateR::dap(
URL= "http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_ppt_1958_CurrentYear_GLOBE.nc",
catalog = NULL,
AOI = my_aoi,
grid = NULL,
varname = NULL,
endDate = "2024-05-01",
startDate =  "2023-05-01",
toptobottom = FALSE,
verbose = TRUE
)
a <- params
a <- catalog
View(a)
library(RNetCDF)
lat.range=c(-40,-44)        #! Ranges instead of point values. Order does not matter
lon.range=c(140,150)
baseurlagg <- paste0(paste0("http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_",var),"_1958_CurrentYear_GLOBE.nc")
var="ppt"
baseurlagg <- paste0(paste0("http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_",var),"_1958_CurrentYear_GLOBE.nc")
nc <- open.nc(baseurlagg)
lon <- var.get.nc(nc, "lon")
lat <- var.get.nc(nc, "lat")
lat.range <- sort(lat.range)                              #!sort user input values from low to high
lon.range <-sort(lon.range)
lat.index <- which(lat>=lat.range[1]&lat<=lat.range[2])    #! index values within specified range
lon.index <- which(lon>=lon.range[1]&lon<=lon.range[2])
lat.n <- length(lat.index)                                #!value for count
lon.n <- length(lon.index)
start <- c(lon.index[1], lat.index[1], 1)
count <- c(lon.n, lat.n, NA)
data <-var.get.nc(nc, variable = var,start = start, count,unpack=TRUE)
data
r_LCMAP <- getLCMAP(my_aoi, year = 2019, type = "primary landcover", ID = NULL)
terra::plot(r_LCMAP)
r_LCMAP
a <- read_live_catalog()
