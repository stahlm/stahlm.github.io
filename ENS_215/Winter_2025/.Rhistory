startDate = "2023-02-04"
)
p <- p$daily_minimum_temperature
p <- terra::crop(p, border_NY)
p <- terra::mask(p, border_NY)
p %>%
tm_shape() +
tm_raster(palette = "Blues", n = 10) +
tm_shape(border_NY) +
tm_borders()
p
p
p <- p - 273.15
p %>%
tm_shape() +
tm_raster(palette = "Blues", n = 10) +
tm_shape(border_NY) +
tm_borders()
borders_hires <- rnaturalearth::ne_countries(country = "Lesotho",
scale = "large",
returnclass = "sf")
params %>%
filter(id == "terraclim_normals") %>%
select(varname, units, description)
catalog %>%
filter(id == "terraclim_normals") %>%
select(varname, units, description)
climate_raster <- getTerraClimNormals(
AOI = borders_hires,
varname = "ppt",
scenario = "19812010",
month = 1:12,
verbose = FALSE,
dryrun = FALSE
)
climate_raster <- climate_raster$ppt_19812010
climate_raster <- raster::crop(climate_raster, borders_hires)
climate_raster <- terra::crop(climate_raster, borders_hires)
climate_raster <- getTerraClimNormals(
AOI = borders_hires,
varname = "ppt",
scenario = "19812010",
month = 1:12,
verbose = T,
dryrun = FALSE
)
climate_raster <- climate_raster$ppt
climate_raster <- terra::crop(climate_raster, borders_hires)
climate_raster <- terra::mask(climate_raster, borders_hires)
climate_raster %>%
tm_shape() +
tm_raster(palette = "RdBu", n = 10) +
tm_shape(borders_hires) +
tm_borders()
lesotho_tot_prcp <- sum(climate_raster)
lesotho_tot_prcp$sum %>%
tm_shape() +
tm_raster(palette = "RdBu", n = 10) +
tm_shape(borders_hires) +
tm_borders()
climate_raster_monthly <- getTerraClim(AOI = borders_hires,
varname = "ppt",
startDate = "2021-01-01")
climate_raster_monthly <- climate_raster_monthly$ppt
climate_raster_monthly <- raster::crop(climate_raster_monthly, borders_hires)
climate_raster_monthly <- raster::mask(climate_raster_monthly, borders_hires)
climate_raster_monthly %>%
tm_shape() +
tm_raster(palette = "RdBu", n = 10) +
tm_shape(borders_hires) +
tm_borders()
## Basemaps
library(basemaps)
loc_path <- basemap_geotif(borders_hires,
map_service = "esri",
map_type = "world_imagery",
map_res = 1.0)
loc_path
loc_basemap <- raster::stack(loc_path)
loc_basemap
#raster::plotRGB(loc_basemap)
map_full <- tm_shape(loc_basemap) +
tm_rgb() +
tm_shape(borders_hires) +
tm_borders(col = "red")
map_full
loc_path <- basemap_geotif(border_NY,
map_service = "esri",
map_type = "world_imagery",
map_res = 1.0)
loc_path
loc_basemap <- raster::stack(loc_path)
loc_basemap
#raster::plotRGB(loc_basemap)
map_full <- tm_shape(loc_basemap) +
tm_rgb() +
tm_shape(border_NY) +
tm_borders(col = "red")
map_full
library(tidyverse)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(FactoMineR)
library(tmap)
library(sf)
set.seed(123)
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
table_cluster <- bangladesh_gw %>%
select(SAMPLE_ID,
Ba_mgL,
Ca_mgL,
Fe_mgL,
Mn_mgL,
K__mgL,
Mg_mgL,
Na_mgL,
Si_mgL,
SO4_mgL,
Sr_mgL) %>%
drop_na() # need to drop any samples with NA values since can't cluster sites with missing data
table_cluster <- column_to_rownames(table_cluster, var = "SAMPLE_ID")
table_cluster_scaled <- scale(table_cluster)
res.pca <- PCA(table_cluster_scaled,  graph = FALSE)
# Control variable colors using their contributions
fviz_pca_var(res.pca, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_nbclust(
table_cluster_scaled,
pam,
k.max = 10,
method = "wss",
diss = get_dist(table_cluster, method = "spearman")
#diss = get_dist(table_cluster, method = "euclidean")
)
n_clust = 6
#k_n <- kmeans(table_cluster_scaled, centers = n_clust, nstart = 100, iter.max = 15000)
k_n = cluster::pam(table_cluster_scaled, k = n_clust)
fig_cluster <- fviz_cluster(k_n, data = table_cluster_scaled, ellipse = T, palette = "Set2",
geom = "point") +
theme_classic()
fig_cluster
df_cluster_info <- tibble(SAMPLE_ID = row.names(table_cluster_scaled),
cluster_id = k_n$cluster)
bangladesh_gw <- bangladesh_gw %>%
left_join(df_cluster_info)
bangladesh_gw <- bangladesh_gw %>%
mutate(cluster_id = factor(cluster_id))
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = As_ugL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Fe_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = SO4_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Si_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = WELL_DEPTH_m, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
summary(bangladesh_gw$cluster_id)
sf_bangladesh_gw <- bangladesh_gw %>%
st_as_sf(coords = c("LONG_DEG", "LAT_DEG"))
tmap_mode("view")
sf_bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "cluster_id", palette = "Set2",
popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar()
sf_bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "cluster_id", palette = "Set2",
popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar()
library(tidyverse)
library(patchwork)
library(lubridate)
map_data_usa <- map_data("state")
View(map_data_usa)
map_us <- map_data_usa %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group))
map_us
map_us <- map_data_usa %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group),
color = "black", fill = "grey"
)
map_us
View(map_data_usa)
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude, start_time = "0000:00:00", end_time = "23:59:59"){
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?"
full_url <- paste0(base_url,"starttime=", start_date, "%", start_time, "&",
"endtime=", end_date, "%", end_time, "&",
"minmagnitude=", min_magnitude, "&",
"orderby=time"
)
}
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude = 2.5, start_time = "0000:00:00", end_time = "23:59:59"){
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?"
full_url <- paste0(base_url,"starttime=", start_date, "%", start_time, "&",
"endtime=", end_date, "%", end_time, "&",
"minmagnitude=", min_magnitude, "&",
"orderby=time"
)
}
a <- get_usgs_earthquakes(start_date = "2025-01-01", end_date = "2025-01-05", min_magnitude = 3.5)
a
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude = 2.5, start_time = "0000:00:00", end_time = "23:59:59"){
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?"
full_url <- paste0(base_url,"starttime=", start_date, "%", start_time, "&",
"endtime=", end_date, "%", end_time, "&",
"minmagnitude=", min_magnitude, "&",
"orderby=time"
)
df_earthquakes <- read.csv(full_url)
}
a <- get_usgs_earthquakes(start_date = "2025-01-01", end_date = "2025-01-05", min_magnitude = 3.5)
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude = 2.5, start_time = "0000:00:00", end_time = "23:59:59"){
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?"
full_url <- paste0(base_url,"starttime=", start_date, "%", start_time, "&",
"endtime=", end_date, "%", end_time, "&",
"minmagnitude=", min_magnitude, "&",
"orderby=time"
)
df_earthquakes <- full_url
}
a <- get_usgs_earthquakes(start_date = "2025-01-01", end_date = "2025-01-05", min_magnitude = 3.5)
a <- get_usgs_earthquakes(start_date = "2025-01-01", end_date = "2025-01-05", min_magnitude = 3.5)
a
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude = 2.5, start_time = "0000:00:00", end_time = "2023:59:59"){
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?"
full_url <- paste0(base_url,"starttime=", start_date, "%", start_time, "&",
"endtime=", end_date, "%", end_time, "&",
"minmagnitude=", min_magnitude, "&",
"orderby=time"
)
df_earthquakes <- full_url
}
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude = 2.5, start_time = "0000:00:00", end_time = "23:59:59"){
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?"
full_url <- paste0(base_url,"starttime=", start_date, "%", start_time, "&",
"endtime=", end_date, "%20", end_time, "&",
"minmagnitude=", min_magnitude, "&",
"orderby=time"
)
df_earthquakes <- full_url
}
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude = 2.5, start_time = "0000:00:00", end_time = "23:59:59"){
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?"
full_url <- paste0(base_url,"starttime=", start_date, "%", start_time, "&",
"endtime=", end_date, "%20", end_time, "&",
"minmagnitude=", min_magnitude, "&",
"orderby=time"
)
df_earthquakes <- read.csv(full_url)
}
a <- get_usgs_earthquakes(start_date = "2025-01-01", end_date = "2025-01-05", min_magnitude = 3.5)
a
source("C:/Users/stahlm/Documents/Teaching_UnionCollege/Environmental_Data_Analysis/stahlm.github.io/functions/get_usgs_earthquakes.R")
source("C:/Users/stahlm/Documents/Teaching_UnionCollege/Environmental_Data_Analysis/stahlm.github.io/functions/get_usgs_earthquakes.R")
source("C:/Users/stahlm/Documents/Teaching_UnionCollege/Environmental_Data_Analysis/stahlm.github.io/functions/get_usgs_earthquakes.R")
source("C:/Users/stahlm/Documents/Teaching_UnionCollege/Environmental_Data_Analysis/stahlm.github.io/functions/get_usgs_earthquakes.R")
install.packages("docstring")
source("C:/Users/stahlm/Documents/Teaching_UnionCollege/Environmental_Data_Analysis/stahlm.github.io/functions/get_usgs_earthquakes.R")
state.region
remotes::install_github("wmgeolab/rgeoboundaries")
library(rgeoboundaries)
library(rgeoboundaries)
library(sf)
mli_sen <- gb_adm0(c("mali", "senegal"), type = "sscgs")
plot(st_geometry(mli_sen))
us <- gb_adm1("USA")
plot(st_geometry(us),
col = rgb(red = 1, green = 0, blue = 0, alpha = 0.5),
axes = TRUE, graticule = TRUE)
rgeoboundaries::gb_adm0("Cambodia")
us <- gb_adm1("Cambodia")
plot(st_geometry(us),
col = rgb(red = 1, green = 0, blue = 0, alpha = 0.5),
axes = TRUE, graticule = TRUE)
us <- gb_adm0("Cambodia")
plot(st_geometry(us),
col = rgb(red = 1, green = 0, blue = 0, alpha = 0.5),
axes = TRUE, graticule = TRUE)
us <- gb_adm2("Cambodia")
plot(st_geometry(us),
col = rgb(red = 1, green = 0, blue = 0, alpha = 0.5),
axes = TRUE, graticule = TRUE)
us <- gb_adm3("Cambodia")
plot(st_geometry(us),
col = rgb(red = 1, green = 0, blue = 0, alpha = 0.5),
axes = TRUE, graticule = TRUE)
us <- gb_adm2("Cambodia")
plot(st_geometry(us),
col = rgb(red = 1, green = 0, blue = 0, alpha = 0.5),
axes = TRUE, graticule = TRUE)
us <- gb_adm1("Cambodia")
plot(st_geometry(us),
col = rgb(red = 1, green = 0, blue = 0, alpha = 0.5),
axes = TRUE, graticule = TRUE)
View(us)
library(tmap)
library(spData)
library(sf)
world_map_data <- world # save the world data from the spData package to our own R object
View(world_map_data)
library(tidyverse)
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
state_mean_temps_pre <- state_temps %>%
filter(Year <= 1960) %>%
group_by(state_cd) %>%
summarize(mean_temp_pre = mean(Avg_Temp_F))
state_mean_temps_post <- state_temps %>%
filter(Year > 1960) %>%
group_by(state_cd) %>%
summarize(mean_temp_post = mean(Avg_Temp_F))
state_mean_temps_change <- left_join(state_mean_temps_post, state_mean_temps_pre) %>%
mutate(temp_change = mean_temp_post - mean_temp_pre)
state_mean_temps_change <- left_join(state_mean_temps_change, state_name_table)
state_name_table = tibble(state_name = tolower(state.name),
state_cd = state.abb, us_region = state.region)
state_mean_temps_change <- left_join(state_mean_temps_change, state_name_table)
state_mean_temps_change <- state_mean_temps_change %>%
rename(region = state_name)
map_data_usa_temps_change <- left_join(map_data_usa, state_mean_temps_change)
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
state_name_table = tibble(state_name = tolower(state.name),
state_cd = state.abb, us_region = state.region)
map_data_usa <- map_data("state") # get data frame with the spatial data for borders of lower 48 states
state_mean_temps_pre <- state_temps %>%
filter(Year <= 1960) %>%
group_by(state_cd) %>%
summarize(mean_temp_pre = mean(Avg_Temp_F))
state_mean_temps_post <- state_temps %>%
filter(Year > 1960) %>%
group_by(state_cd) %>%
summarize(mean_temp_post = mean(Avg_Temp_F))
state_mean_temps_change <- left_join(state_mean_temps_post, state_mean_temps_pre) %>%
mutate(temp_change = mean_temp_post - mean_temp_pre)
state_mean_temps_change <- left_join(state_mean_temps_change, state_name_table)
state_mean_temps_change <- state_mean_temps_change %>%
rename(region = state_name)
map_data_usa_temps_change <- left_join(map_data_usa, state_mean_temps_change)
map_data_usa_temps_change %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = temp_change), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
coord_map(projection = "bonne", lat0 = 50) +
labs(title = "Changes in mean temperature",
subtitle = "Difference between post and pre-1960 means",
caption = "Data source: NOAA",
fill = "Temp. increase (deg. F)") +
theme_void()
earthquakes <- read_csv("https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2025-01-01%0000:00:00&endtime=2025-02-08%2023:59:59&minmagnitude=2.5&orderby=time")
map_world_data <- map_data("world")
earthquake_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 2.5 magnitude since the start of 2025",
subtitle = "Date window: 1-Jan to 8-Feb-2025",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
library(tidyverse)
earthquakes <- read_csv("https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2025-01-01%0000:00:00&endtime=2025-02-08%2023:59:59&minmagnitude=2.5&orderby=time")
head(earthquakes)
map_world_data <- map_data("world")
View(map_world_data)
world_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group),
color = "black", fill = "lightgrey")
world_map
world_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group),
color = "black", fill = "lightgrey") +
coord_quickmap()
world_map
View(earthquakes)
world_map +
geom_point(data = earthquakes, aes(x = longitude, y = latitude,
color = mag),
shape = 21, fill = "NA"
)
world_map +
geom_point(data = earthquakes, aes(x = longitude, y = latitude,
color = mag),
shape = 21, fill = "NA"
) +
scale_color_gradient(low = "blue", high = "red")
world_map +
geom_point(data = earthquakes, aes(x = longitude, y = latitude,
color = mag),
shape = 21, fill = "NA"
) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes")
world_map +
geom_point(data = earthquakes, aes(x = longitude, y = latitude,
color = mag),
shape = 21, fill = "NA"
) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes") +
theme_void()
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
View(state_temps)
state_name_table = tibble(state_name = tolower(state.name),
state_cd = state.abb, us_region = state.region)
map_data_usa <- map_data("state") # get data frame with the spatial data for borders of lower 48 states
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
head(state_temps)
state_mean_temps_pre <- state_temps %>%
filter(Year <= 1960) %>%
group_by(state_cd) %>%
summarize(mean_temp_pre = mean(Avg_Temp_F))
state_mean_temps_pre
state_mean_temps_post <- state_temps %>%
filter(Year > 1960) %>%
group_by(state_cd) %>%
summarize(mean_temp_post = mean(Avg_Temp_F))
state_mean_temps_post
state_mean_temps_change <- state_mean_temps_post %>%
left_join(state_mean_temps_pre)
state_mean_temps_change
state_mean_temps_change <- state_mean_temps_change %>%
mutate(temp_change = mean_temp_post - mean_temp_pre)
state_mean_temps_change
View(map_data_usa)
View(state_mean_temps_change)
state_name_table = tibble(state_name = tolower(state.name),
state_cd = state.abb,
us_region = state.region)
state_name_table = tibble(state_name = tolower(state.name),
state_cd = state.abb,
us_region = state.region)
state_name_table
state_mean_temps_change <- state_mean_temps_change %>%
left_join(state_name_table)
state_mean_temps_change <- state_mean_temps_change %>%
rename(region = state_name)
map_data_usa_temps_change <- left_join(map_data_usa, state_mean_temps_change)
View(map_data_usa_temps_change)
map_data_usa_temps_change %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = temp_change), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
coord_map(projection = "bonne", lat0 = 50) +
labs(title = "Changes in mean temperature",
subtitle = "Difference between post and pre-1960 means",
caption = "Data source: NOAA",
fill = "Temp. increase (deg. F)") +
theme_void()
library(leaflet)
library(tidyverse)
leaflet() %>%
addTiles()
leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)
leaflet() %>%
addProviderTiles(providers$Stamen.Toner)
leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery)
leaflet() %>%
addProviderTiles(providers$OpenWeatherMap)
leaflet() %>%
addProviderTiles(providers$OpenWeatherMap.Precipitation)
leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)
