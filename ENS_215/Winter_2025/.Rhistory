world_map +
geom_point(data = earthquakes, aes(x = longitude, y = latitude,
color = mag),
shape = 21, fill = "NA"
)
world_map +
geom_point(data = earthquakes, aes(x = longitude, y = latitude,
color = mag),
shape = 21, fill = "NA"
) +
scale_color_gradient(low = "blue", high = "red")
world_map +
geom_point(data = earthquakes, aes(x = longitude, y = latitude,
color = mag),
shape = 21, fill = "NA"
) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes")
world_map +
geom_point(data = earthquakes, aes(x = longitude, y = latitude,
color = mag),
shape = 21, fill = "NA"
) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes") +
theme_void()
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
View(state_temps)
state_name_table = tibble(state_name = tolower(state.name),
state_cd = state.abb, us_region = state.region)
map_data_usa <- map_data("state") # get data frame with the spatial data for borders of lower 48 states
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
head(state_temps)
state_mean_temps_pre <- state_temps %>%
filter(Year <= 1960) %>%
group_by(state_cd) %>%
summarize(mean_temp_pre = mean(Avg_Temp_F))
state_mean_temps_pre
state_mean_temps_post <- state_temps %>%
filter(Year > 1960) %>%
group_by(state_cd) %>%
summarize(mean_temp_post = mean(Avg_Temp_F))
state_mean_temps_post
state_mean_temps_change <- state_mean_temps_post %>%
left_join(state_mean_temps_pre)
state_mean_temps_change
state_mean_temps_change <- state_mean_temps_change %>%
mutate(temp_change = mean_temp_post - mean_temp_pre)
state_mean_temps_change
View(map_data_usa)
View(state_mean_temps_change)
state_name_table = tibble(state_name = tolower(state.name),
state_cd = state.abb,
us_region = state.region)
state_name_table = tibble(state_name = tolower(state.name),
state_cd = state.abb,
us_region = state.region)
state_name_table
state_mean_temps_change <- state_mean_temps_change %>%
left_join(state_name_table)
state_mean_temps_change <- state_mean_temps_change %>%
rename(region = state_name)
map_data_usa_temps_change <- left_join(map_data_usa, state_mean_temps_change)
View(map_data_usa_temps_change)
map_data_usa_temps_change %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = temp_change), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
coord_map(projection = "bonne", lat0 = 50) +
labs(title = "Changes in mean temperature",
subtitle = "Difference between post and pre-1960 means",
caption = "Data source: NOAA",
fill = "Temp. increase (deg. F)") +
theme_void()
library(leaflet)
library(tidyverse)
leaflet() %>%
addTiles()
leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)
leaflet() %>%
addProviderTiles(providers$Stamen.Toner)
leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery)
leaflet() %>%
addProviderTiles(providers$OpenWeatherMap)
leaflet() %>%
addProviderTiles(providers$OpenWeatherMap.Precipitation)
leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)
library(rgeoboundaries)
library(sf)
library(tmap)
sf_borders <- gb_adm1("Cambodia")
sf_borders_01 <- gb_adm0("Cambodia")
sf_borders_0 <- gb_adm0("Cambodia")
sf_borders_0 %>%
tm_shape() +
tm_borders()
sf_borders_0 <- gb_adm0("Cambodia") # Level 0 (country border)
sf_borders_1 <- gb_adm1("Cambodia") # Level 1 (state level border)
sf_borders_0 %>%
tm_shape() +
tm_borders()
sf_borders_1 %>%
tm_shape() +
tm_borders()
library(rnaturalearth)
sf_borders <- rnaturalearth::countries110
View(sf_borders)
sf_borders <- st_as_sf(rnaturalearth::countries110)
sf_borders %>%
tm_shape() +
tm_borders()
tmap_options(check.and.fix = TRUE)
sf_borders %>%
tm_shape() +
tm_borders()
sf_borders <- st_as_sf(rnaturalearth::countries110)
sf_borders <- ne_countries(scale = "large", type = "countries", returnclass = "sf")
tmap_options(check.and.fix = TRUE)
sf_borders %>%
tm_shape() +
tm_borders()
sf_borders <- st_make_valid(sf_borders)
tmap_options(check.and.fix = TRUE)
sf_borders %>%
tm_shape() +
tm_borders()
library(spData)
sf_world <- spData::world
View(sf_world)
sf_world %>%
tm_shape() +
tm_borders()
sf_borders <- ne_countries(scale = "large", country = "United States of America", returnclass = "sf")
sf_borders %>%
tm_shape() +
tm_borders()
View(sf_borders)
sf_usa <- spData::us_states
sf_usa %>%
tm_shape() +
tm_borders()
sf_borders_1 <- gb_adm1("United States of America") # Level 1 (state level border)
sf_borders_1 %>%
tm_shape() +
tm_borders()
View(sf_borders_1)
library(tigris)
sf_state <- tigris::states(resolution = "20m")
sf_state %>%
tm_shape() +
tm_borders()
View(sf_state)
sf_state %>%
filter(STUSPS == "NY") %>%
tm_shape() +
tm_borders()
sf_state %>%
filter(STUSPS == "NY") %>%
tm_shape() +
tm_borders()
sf_state %>%
filter(STUSPS == "NY") %>%
tm_shape() +
tm_borders()
sf_state %>%
filter(STUSPS == "NY") %>%
tm_shape() +
tm_polygons()
sf_state %>%
filter(STUSPS == "NY") %>%
tm_shape() +
tm_borders()
sf_state %>%
dplyr::filter(STUSPS == "NY") %>%
tm_shape() +
tm_borders()
sf_state <- tigris::nation(resolution = "20m")
sf_state %>%
tm_shape() +
tm_borders()
View(sf_state)
sf_nation <- tigris::nation(resolution = "20m")
sf_nation %>%
tm_shape() +
tm_borders()
sf_state <- tigris::states()
sf_state %>%
dplyr::filter(STUSPS == "NY") %>%
tm_shape() +
tm_borders()
sf_state %>%
dplyr::filter(STUSPS == "VT") %>%
tm_shape() +
tm_borders()
sf_state %>%
dplyr::filter(STUSPS == "MA") %>%
tm_shape() +
tm_borders()
sf_state %>%
dplyr::filter(STUSPS == "NY") %>%
tm_shape() +
tm_borders()
sf_counties <- tigris::counties(state = "NY")
sf_counties %>%
tm_shape() +
tm_borders()
install.packages('spDataLarge',
repos='https://nowosad.github.io/drat/', type='source')
library(tidyverse)
library(tmap)
library(sf)
library(maps)
library(climateR)
library(terra)
library(AOI)
my_aoi <- AOI::aoi_get(state = "New York", county = "Schenectady")
a <- catalog
raster_nlcd <- vrt_crop_get(
URL = "/vsicurl/https://storage.googleapis.com/feddata-r/nlcd/2019_Land_Cover_L48.tif",
catalog = NULL,
AOI = my_aoi,
grid = NULL,
varname = NULL,
start = NULL,
end = NULL,
toptobottom = FALSE,
verbose = TRUE
)
r_nlcd <- raster_nlcd$`NLCD Land Cover Class`
terra::plot(r_nlcd)
terra::cats(r_nlcd)
terra::values(r_nlcd)
terra::levels(r_nlcd)
terra::categories(r_nlcd)
terra::cats(r_nlcd)
df_cats <- terra::cats(r_nlcd)
View(df_cats)
df_cats <- terra::cats(r_nlcd)[[]]
df_cats <- terra::cats(r_nlcd)[[1]]
View(df_cats)
r_nlcd$`NLCD Land Cover Class`["NLCD Land Cover Class" == "Woody Wetlands" | "NLCD Land Cover Class" == "Emergent Herbaceous Wetlands
"]
r_nlcd$`NLCD Land Cover Class`["NLCD Land Cover Class" == "Woody Wetlands"]
r_nlcd$`NLCD Land Cover Class`[`NLCD Land Cover Class` == "Woody Wetlands"]
r_nlcd$`NLCD Land Cover Class`['NLCD Land Cover Class' == "Woody Wetlands"]
r_nlcd[`NLCD Land Cover Class` == "Woody Wetlands"]
r_nlcd$`NLCD Land Cover Class`["NLCD Land Cover Class" == "Woody Wetlands"]
r_nlcd["NLCD Land Cover Class" == "Woody Wetlands"]
r_nlcd["NLCD Land Cover Class" == "Woody Wetlands"]
r_nlcd <- raster_nlcd$`NLCD Land Cover Class`
terra::plot(r_nlcd)
r_nlcd["NLCD Land Cover Class" == "Woody Wetlands"]
r_nlcd[r_nlcd == "Woody Wetlands"]
r_nlcd %>%
tm_shape() +
tm_raster()
r_nlcd %>%
tm_shape() +
tm_raster() +
tm_facets(by = "NLCD Land Cover Class")
r_wetlands <- r_nlcd
r_wetlands[r_wetlands != "Woody Wetlands" | r_wetlands != "Emergent Herbaceous Wetlands"] <- 0
r_wetlands[r_wetlands == "Woody Wetlands" | r_wetlands == "Emergent Herbaceous Wetlands"]
r_wetlands <- r_wetlands[r_wetlands == "Woody Wetlands" | r_wetlands == "Emergent Herbaceous Wetlands"]
r_wetlands %>%
tm_shape() +
tm_raster()
r_wetlands <- r_nlcd
r_wetlands[r_wetlands == "Woody Wetlands" | r_wetlands == "Emergent Herbaceous Wetlands"]
r_wetlands[r_wetlands == "Woody Wetlands" | r_wetlands == "Emergent Herbaceous Wetlands"] <- 1
r_wetlands %>%
tm_shape() +
tm_raster()
View(a)
df_raster <- terra::as.data.frame(x = r_nlcd)
View(df_raster)
df_raster <- terra::as.data.frame(x = r_nlcd, xy = T)
df_raster <- df_raster %>%
dplyr::filter(`NLCD Land Cover Class` %in% c("Woody Wetlands", "Emergent Herbaceous Wetlands"))
r_wetlands <-	rast(x = df_raster , type="xyz")
r_wetlands %>%
tm_shape() +
tm_raster()
r_wetlands %>%
tm_shape() +
tm_raster()
r_wetlands <-	rast(x = df_raster , type="xyz", crs = st_crs(r_nlcd))
r_wetlands %>%
tm_shape() +
tm_raster()
r_wetlands
r_nlcd
st_crs(r_nlcd)
r_wetlands <-	rast(x = df_raster , type="xyz")
crs(r_wetlands) <- st_crs(r_nlcd)
sf::st_crs(r_nlcd)
a <- sf::st_crs(r_nlcd)
a$wkt
a$input
a <- sf::st_crs(r_nlcd)
a <- a$wkt
crs(r_wetlands) <- a
r_wetlands %>%
tm_shape() +
tm_raster()
library(leaflet)
library(tidyverse)
leaflet() %>%
addTiles()
leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)
state_cap_locs <- read_csv("https://stahlm.github.io/ENS_215/Data/us_capitals_locs.csv", skip = 2)
state_cap_locs <- state_cap_locs %>%
filter(state_cd %in% state.abb) # remove locations that aren't US state list (e.g. Puerto Rico, Guam, ...)
map_cap <- leaflet(data = state_cap_locs) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng = ~long_deg, lat = ~lat_deg, label = ~state_cd)
map_cap
leaflet(state_cap_locs) %>%
addTiles() %>%
addCircles(lng = ~long_deg, lat = ~lat_deg, radius = 30*10^3, fillColor = "transparent")
library(geojsonio)
state_borders <- geojson_read("https://stahlm.github.io/ENS_215/Data/gz_2010_us_040_00_5m.geojson", what = "sp")
# geojson state boundaries from http://eric.clst.org/tech/usgeojson/
map_cap %>%
addPolygons(data = state_borders)
leaflet(state_cap_locs) %>%
addTiles(group = "OSM") %>%
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addProviderTiles(providers$Stamen.Watercolor, group = "Watercolor") %>%
addMarkers(lng = ~long_deg, lat = ~lat_deg, label = ~state_cd, group = "Capitals") %>%
addPolygons(data = state_borders, group = "Borders") %>%
addLayersControl(
baseGroups = c("OSM", "Toner","Watercolor"),   # specify the base map groups that we can toggle between
overlayGroups = c("Capitals", "Borders"),   # specify the geometry layer groups that we can toggle between
options = layersControlOptions(collapsed = FALSE)
)
library(tmap)
library(spData)
library(sf)
world_map_data <- world # save the world data from the spData package to our own R object
tm_shape(world_map_data) +
tm_polygons("lifeExp")
map_1 <- tm_shape(world_map_data) +
tm_fill()
map_2 <- tm_shape(world_map_data) +
tm_fill("lifeExp")
map_3 <- tm_shape(world_map_data) +
tm_fill("lifeExp") +
tm_borders("black")
tmap_arrange(map_1, map_2, map_3) # arrange the three maps
tm_shape(world_map_data) +
tm_fill("continent") +
tm_borders() +
tm_facets(by = "continent", free.coords = TRUE)
world_map_data %>%
filter(gdpPercap > 10000) %>%
tm_shape(projection= "+proj=moll") +
tm_borders() +
tm_graticules(labels.size = 0.5, n.x = 20, alpha = 0.5) +
tm_fill(fil = "lightblue") +
tm_shape(world_map_data) +
tm_borders()
world_map_data %>%
filter(gdpPercap > 10000) %>%
tm_shape(projection= "+proj=moll") +
tm_borders() +
tm_graticules(labels.size = 0.5, n.x = 20, alpha = 0.5) +
tm_fill(fill = "lightblue") +
tm_shape(world_map_data) +
tm_borders()
world_map_data %>%
filter(gdpPercap > 10000) %>%
tm_shape(projection= "+proj=moll") +
tm_borders() +
tm_graticules(labels.size = 0.5, n.x = 20, alpha = 0.5) +
tm_fill(col = "lightblue") +
tm_shape(world_map_data) +
tm_borders()
Linear_water_Schenectady <- linear_water(state = "NY", county = "Schenectady")  # download the data
library(tigris)
NY_counties <- counties(state = "NY",
cb = TRUE) # cb = TRUE specifies to download a lower resolution file (faster download)
library(tmap)
library(terra)
library(tmap)
library(tmap)
library(terra)
library(tmap)
library(elevatr)
library(tmap)
library(terra)
library(tmap)
library(elevatr)
library(AOI)
aoi2use <- AOI::aoi_get(state = "NY", county = "Schenectady")
aoi2use <- AOI::aoi_get(state = "NY", county = "Schenectady")
r_elev <- get_elev_raster(locations = aoi2use, z = 4)
terra::plot(r_elev)
r_elev_04 <- get_elev_raster(locations = aoi2use, z = 4)
r_elev_04
r_elev_12 <- get_elev_raster(locations = aoi2use, z = 12)
r_elev_12
terra::plot(r_elev_12)
r_elev_02 <- get_elev_raster(locations = aoi2use, z = 2)
r_elev_02
terra::plot(r_elev_02)
r_elev_14 <- get_elev_raster(locations = aoi2use, z = 14)
r_elev_14
r_elev_01 <- get_elev_raster(locations = aoi2use, z = 1)
r_elev_01
terra::plot(r_elev_01)
r_elev_01 <- get_elev_raster(locations = aoi2use, z = 1)
r_elev_01
r_elev_01 <- get_elev_raster(locations = aoi2use, z = 2)
r_elev_01
aoi2use <- AOI::aoi_get(state = "NY", county = "Schenectady")
r_elev_02 <- get_elev_raster(locations = aoi2use, z = 2)
r_elev_02
terra::plot(r_elev_01)
r_elev_04 <- get_elev_raster(locations = aoi2use, z = 4)
r_elev_04
terra::plot(r_elev_02)
terra::plot(r_elev_04)
r_elev_05 <- get_elev_raster(locations = aoi2use, z = 5)
r_elev_05
terra::plot(r_elev_05)
r_elev_06 <- get_elev_raster(locations = aoi2use, z = 6)
r_elev_06
terra::plot(r_elev_06)
r_elev_08 <- get_elev_raster(locations = aoi2use, z = 8)
r_elev_08
terra::plot(r_elev_08)
terra::plot(r_elev_12)
r_elev_13 <- get_elev_raster(locations = aoi2use, z = 13)
r_elev_13
terra::plot(r_elev_13)
aoi2use <- AOI::aoi_get(state = "NY", county = "Schenectady")
r_elev_08 <- get_elev_raster(locations = aoi2use, z = 8)
r_elev_08
r_elev_13 <- get_elev_raster(locations = aoi2use, z = 13)
r_elev_13
raster_world_elev <- rast("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/World_elev.TIFF")
raster_world_elev <- raster_world_elev$World_elev
# Data was obtained from: https://neo.sci.gsfc.nasa.gov/view.php?datasetId=SRTM_RAMP2_TOPO
my_raster <- rast("./World_elev.tif")
global(my_raster, fun = "min")
global(my_raster, fun = "max")
global(my_raster, fun = "mean")
global(my_raster, fun = "mean", na.rm = T)
cities_world <- world.cities
library(tidyverse)
library(tmap)
library(sf)
library(maps)
library(terra)
library(AOI)
library(elevatr)
loc2use <- aoi_get(x = list("Schenectady, NY",5,5) )
#elevation <- get_elev_raster(loc2use, z = 14, clip = "bbox")
#writeRaster(elevation, "./elevation_schdy.tiff")
elevation <- rast("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Winter_2022/Lectures/Data/elevation_schdy.tif")
elevation %>%
tm_shape() +
tm_raster(style = "cont", palette = terrain.colors(10), title = "Elev (m)") +
tm_layout(legend.outside = T,
main.title = "Schenectady elevation map")
raster_world_elev <- rast("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/World_elev.TIFF")
raster_world_elev <- raster_world_elev$World_elev
# Data was obtained from: https://neo.sci.gsfc.nasa.gov/view.php?datasetId=SRTM_RAMP2_TOPO
raster_world_elev
terra::plot(raster_world_elev)
global(raster_world_elev,
fun = "max")
raster_world_elev[raster_world_elev == 99999] <- NA
terra::plot(raster_world_elev)
raster_world_elev__ft <- raster_world_elev * 3.28084
coeff_p0 <- 1 # Sea level standard atmospheric pressure (Atmospheres)
coeff_T0 <- 288.16 # Sea level standard temperature(K)
coeff_g <- 9.80665 # 	Earth-surface gravitational acceleration (m/s^2)
coeff_M <- 0.02896968 # Molar mass of dry air (kg/mol)
coeff_R0 <- 8.314462618 #	Universal gas constant (J/(mol*K))
raster_atmos_pressure <- coeff_p0 * exp( -(coeff_g * raster_world_elev * coeff_M)/(coeff_T0 * coeff_R0) )
terra::plot(raster_atmos_pressure)
raster_day_temps <- rast("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Day_temp_2001_march.tif")
raster_day_temps[raster_day_temps == 99999] <- NA
raster_night_temps <- rast("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Night_temp_2001_march.TIFF")
raster_night_temps[raster_night_temps == 99999] <- NA
# Data from: https://neo.sci.gsfc.nasa.gov/view.php?datasetId=MOD_LSTD_CLIM_M
# Data from: https://neo.sci.gsfc.nasa.gov/view.php?datasetId=MOD_LSTN_CLIM_M
raster_temps_diff <- raster_day_temps - raster_night_temps
terra::plot(raster_temps_diff)
terra::hist(raster_temps_diff)
reclass_vec <- c(-100,3,6,15,100)
raster_temps_diff_reclass <- classify(raster_temps_diff, reclass_vec)
terra::plot(raster_temps_diff_reclass,
col = terrain.colors(4))
cities_world <- world.cities
cities_world <- cities_world %>%
filter(capital == 1)
View(cities_world)
View(r_elev_08)
library(tidyverse)
library(tmap)
library(sf)
library(maps)
library(climateR)
library(terra)
library(AOI)
