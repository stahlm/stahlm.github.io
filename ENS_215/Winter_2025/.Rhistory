quantile(ny_precip$Precip_inches,
probs = c(0.05,0.25,0.5,0.75,0.95))
quantile(ny_precip$Precip_inches,
probs = c(0.01,0.05,0.25,0.5,0.75,0.95,0.99))
ny_precip <- ny_precip %>%
mutate(frac = cume_dist(Precip_inches))
ny_precip %>%
group_by(time_period) %>%
summarize(precip_sd = sd(Precip_inches))
1.27/3.48
library(AOI)
library(elevatr)
library(tmap)
aoi2use <- aoi_get(x = "Rancho Palos Verdes, CA")
r_elev <- get_elev_raster(locations = aoi2use, z = 10)
terra::plot(r_elev)
r_elev <- get_elev_raster(locations = aoi2use, z = 10, clip = T)
r_elev <- get_elev_raster(locations = aoi2use, z = 10, clip = "locations")
terra::plot(r_elev)
r_elev <- r_elev$file58c065924471
r_elev[r_elev < 0] <- NA
terra::plot(r_elev)
r_elev <- get_elev_raster(locations = aoi2use, z = 14, clip = "locations")
r_elev_mod <- r_elev$file58c065924471
r_elev_mod <- r_elev$file58c072215c95
r_elev_mod[r_elev_mod < 0] <- NA
terra::plot(r_elev_mod)
terra::shade(terra::terrain(x = r_elev_mod, "slope"), terra::terrain(x = r_elev_mod, "aspect"))
terra::shade(terra::terrain(x = r_elev_mod, "slope"), terra::terrain(x = r_elev_mod, "aspect"), 40, 270)
terra::shade(terra::terrain(x = r_elev_mod, "slope", unit = "radians"),
terra::terrain(x = r_elev_mod, "aspect", unit = "radians"), 40, 270)
a <- terra::terrain(x = r_elev_mod, "slope", unit = "radians")
View(a)
a<-a$slope
a<- terra::terrain(x = r_elev_mod, "slope", unit = "radians")
b <- terra::terrain(x = r_elev_mod, "aspect", unit = "radians")
b <- b$aspect
terra::shade(a,b, 40, 270)
terra::shade(a,b, 40, 270)
terra::shade(slope = a,aspect = b, 40, 270)
a
a <- rast(a)
a <- terra::rast(a)
a
a <- terra::terrain(x = r_elev_mod, "slope", unit = "radians")
a <- a$slope
a <- terra::rast(a)
b <- terra::terrain(x = r_elev_mod, "aspect", unit = "radians")
b <- b$aspect
b <- terra::rast(b)
terra::shade(slope = a,aspect = b, 40, 270)
terra::shade(slope = a,aspect = b, 40, 270)
c <- terra::shade(slope = a,aspect = b, 40, 270)
terra::plot(c)
plot(c, col=grey(0:100/100), legend=FALSE, mar=c(2,2,1,4))
terra::plot(c, col=grey(0:100/100), legend=FALSE, mar=c(2,2,1,4))
d <- terra::shade(slope = a,aspect = b, angle = c(45, 45, 45, 80), direction = c(225, 270, 315, 135))
terra::plot(c)
terra::plot(d)
d <- Reduce(mean, d)
d <- mean(d)
terra::plot(c)
terra::plot(d)
c <- terra::shade(slope = a,aspect = b, 40, 270)
d <- terra::shade(slope = a,aspect = b, angle = c(45, 45, 45, 80), direction = c(225, 270, 315, 135))
d <- Reduce(mean, d)
d <- mean(d, na.rm = T)
terra::plot(c)
terra::plot(d)
terra::plot(c, col=grey(0:100/100), legend=FALSE, mar=c(2,2,1,4))
# aoi2use <- aoi_get(x = "Rancho Palos Verdes, CA")
aoi2use <- aoi_get(x = "Schenectady, NY")
r_elev <- get_elev_raster(locations = aoi2use, z = 14, clip = "locations")
r_elev_mod <- r_elev
r_elev_mod[r_elev_mod < 0] <- NA
terra::plot(r_elev_mod)
a <- terra::terrain(x = r_elev_mod, "slope", unit = "radians")
a <- a$slope
a <- terra::rast(a)
b <- terra::terrain(x = r_elev_mod, "aspect", unit = "radians")
b <- b$aspect
b <- terra::rast(b)
c <- terra::shade(slope = a,aspect = b, 40, 270)
terra::plot(c)
terra::plot(c, col=grey(0:100/100), legend=FALSE, mar=c(2,2,1,4))
library(tidyverse)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(FactoMineR)
library(tmap)
library(sf)
set.seed(123)
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
table_cluster <- bangladesh_gw %>%
select(SAMPLE_ID,
Ba_mgL,
Ca_mgL,
Fe_mgL,
Mn_mgL,
K__mgL,
Mg_mgL,
Na_mgL,
Si_mgL,
SO4_mgL,
Sr_mgL) %>%
drop_na() # need to drop any samples with NA values since can't cluster sites with missing data
table_cluster <- column_to_rownames(table_cluster, var = "SAMPLE_ID")
table_cluster_scaled <- scale(table_cluster)
res.pca <- PCA(table_cluster_scaled,  graph = FALSE)
# Control variable colors using their contributions
fviz_pca_var(res.pca, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_nbclust(
table_cluster_scaled,
pam,
k.max = 10,
method = "wss",
diss = get_dist(table_cluster, method = "spearman")
#diss = get_dist(table_cluster, method = "euclidean")
)
n_clust = 6
#k_n <- kmeans(table_cluster_scaled, centers = n_clust, nstart = 100, iter.max = 15000)
k_n = cluster::pam(table_cluster_scaled, k = n_clust)
fig_cluster <- fviz_cluster(k_n, data = table_cluster_scaled, ellipse = T, palette = "Set2",
geom = "point") +
theme_classic()
fig_cluster
df_cluster_info <- tibble(SAMPLE_ID = row.names(table_cluster_scaled),
cluster_id = k_n$cluster)
bangladesh_gw <- bangladesh_gw %>%
left_join(df_cluster_info)
bangladesh_gw <- bangladesh_gw %>%
mutate(cluster_id = factor(cluster_id))
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = As_ugL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Fe_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = SO4_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Si_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = WELL_DEPTH_m, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
summary(bangladesh_gw$cluster_id)
sf_bangladesh_gw <- bangladesh_gw %>%
st_as_sf(coords = c("LONG_DEG", "LAT_DEG"))
tmap_mode("view")
sf_bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "cluster_id", palette = "Set2",
popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar()
srp_gw <- read_csv("./SRP_merged_IC_ICPMS_WaterIsotopes.csv")
View(srp_gw)
table_cluster <- srp_gw %>%
select(Sample_ID,
F_ppm,
Cl_ppm,
Br_ppm,
NO3_ppm,
SO4_ppm,
Fe,
Ca,
Mg,
K,
V
) %>%
drop_na() # need to drop any samples with NA values since can't cluster sites with missing data
table_cluster <- column_to_rownames(table_cluster, var = "Sample_ID")
table_cluster <- srp_gw %>%
select(Sample_ID,
F_ppm,
Cl_ppm,
Br_ppm,
NO3_ppm,
SO4_ppm,
Fe,
Ca,
Mg,
K,
V
) %>%
drop_na() # need to drop any samples with NA values since can't cluster sites with missing data
table_cluster <- column_to_rownames(table_cluster, var = "Sample_ID")
View(table_cluster)
length(unique(table_cluster$Sample_ID))
a <-(unique(table_cluster$Sample_ID))
a
a <-(duplicated(table_cluster$Sample_ID))
a
View(srp_gw)
a <- srp_gw$Sample_ID[duplicated(table_cluster$Sample_ID)]
table_cluster <- srp_gw %>%
select(Sample_ID,
F_ppm,
Cl_ppm,
Br_ppm,
NO3_ppm,
SO4_ppm,
Fe,
Ca,
Mg,
K,
V
) %>%
drop_na() # need to drop any samples with NA values since can't cluster sites with missing data
table_cluster <- column_to_rownames(table_cluster, var = "Sample_ID")
a <- table_cluster$Sample_ID[duplicated(table_cluster$Sample_ID)]
table_cluster <- srp_gw %>%
select(Sample_ID,
F_ppm,
Cl_ppm,
Br_ppm,
NO3_ppm,
SO4_ppm,
Fe,
Ca,
Mg,
K,
V
) %>%
filter(Sample_ID != "CR4132") %>%
drop_na() # need to drop any samples with NA values since can't cluster sites with missing data
table_cluster <- column_to_rownames(table_cluster, var = "Sample_ID")
table_cluster_scaled <- scale(table_cluster)
res.pca <- PCA(table_cluster_scaled,  graph = FALSE)
# Control variable colors using their contributions
fviz_pca_var(res.pca, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_nbclust(
table_cluster_scaled,
pam,
k.max = 10,
method = "wss",
diss = get_dist(table_cluster, method = "spearman")
#diss = get_dist(table_cluster, method = "euclidean")
)
n_clust = 7
#k_n <- kmeans(table_cluster_scaled, centers = n_clust, nstart = 100, iter.max = 15000)
k_n = cluster::pam(table_cluster_scaled, k = n_clust)
fig_cluster <- fviz_cluster(k_n, data = table_cluster_scaled, ellipse = T, palette = "Set2",
geom = "point") +
theme_classic()
fig_cluster
df_cluster_info <- tibble(SAMPLE_ID = row.names(table_cluster_scaled),
cluster_id = k_n$cluster)
bangladesh_gw <- bangladesh_gw %>%
left_join(df_cluster_info)
srp_gw <- srp_gw %>%
left_join(df_cluster_info)
df_cluster_info <- tibble(Sample_ID = row.names(table_cluster_scaled),
cluster_id = k_n$cluster)
srp_gw <- srp_gw %>%
left_join(df_cluster_info)
srp_gw <- srp_gw %>%
mutate(cluster_id = factor(cluster_id))
summary(srp_gw$cluster_id)
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = As, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Fe, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = SO4_ppm, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Si, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = As, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Fe, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = SO4_ppm, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Ca, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
df <- data.frame(
trt = factor(c(1, 1, 2, 2)),
resp = c(1, 5, 3, 4),
group = factor(c(1, 2, 1, 2)),
se = c(0.1, 0.3, 0.3, 0.2)
)
View(df)
p <- ggplot(df, aes(resp, trt, colour = group))
library(tidyverse)
p <- ggplot(df, aes(resp, trt, colour = group))
p +
geom_point() +
geom_errorbarh(aes(xmax = resp + se, xmin = resp - se))
library(tmap)
library(sf)
earthquakes <- read_csv("https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2025-01-01%0000:00:00&endtime=2025-02-08%2023:59:59&minmagnitude=2.5&orderby=time")
View(earthquakes)
library(rnaturalearth)
borders_world <- ne_countries(returnclass = "sf")
library(tmap)
library(sf)
library(tmap)
library(sf)
library(rnaturalearth)
borders_world <- ne_countries(returnclass = "sf")
View(borders_world)
borders_world %>%
tm_shape() +
tm_borders()
tmap_options(check.and.fix = TRUE)
borders_world %>%
tm_shape() +
tm_borders()
borders_world <- borders_world %>%
filter(sovereignt == "Canada")
borders_world %>%
tm_shape() +
tm_borders()
earthquakes <- read_csv("https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2025-01-01%0000:00:00&endtime=2025-02-08%2023:59:59&minmagnitude=2.5&orderby=time")
View(earthquakes)
earthquakes_sf <- st_as_sf(earthquakes,
coords = c("longitude", "latitude"))
View(earthquakes_sf)
tmap_mode("view")
earthquakes_sf %>%
tm_shape() +
tm_dots()
tmap_mode("view")
borders_world %>%
tm_shape() +
tm_borders()
tmap_mode("plot")
borders_world %>%
tm_shape() +
tm_borders()
tmap_mode("view")
borders_world %>%
tm_shape() +
tm_borders() +
tm_shape(earthquakes_sf) +
tm_dots()
library(rgeoboundaries)
library(sf)
library(tmap)
sf_borders_0 <- gb_adm0("Central African Republic") # Level 0 (country border)
sf_borders_1 <- gb_adm1("Central African Republic") # Level 1 (state level border)
sf_borders_0 %>%
tm_shape() +
tm_borders()
tmap_mode("plot")
sf_borders_0 %>%
tm_shape() +
tm_borders()
sf_borders_1 %>%
tm_shape() +
tm_borders()
county_vec <- seq(1,115, by = 2)
county_vec <- seq(1,115, by = 2)
county_vec
county_vec <- seq(1,115, by = 2)
county_vec <- str_pad(county_vec, width = 3,side = "left", pad = "0")
county_vec <- seq(1,115, by = 2)
county_vec <- str_pad(county_vec, width = 3,side = "left", pad = "0")
county_vec
for (i_county in county_vec) {
print(i_county)
}
for (i_county in county_vec) {
url_2_use <- paste(base_url_a, i_county, base_url_b)
print(url_2_use)
}
base_url_a <- "https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/time-series/CA-"
base_url_b <- "/tavg/1/0/1895-2025/data.csv"
for (i_county in county_vec) {
url_2_use <- paste(base_url_a, i_county, base_url_b)
print(url_2_use)
}
for (i_county in county_vec) {
url_2_use <- paste0(base_url_a, i_county, base_url_b)
print(url_2_use)
}
read_csv(url_2_use)
a <-  read_csv(url_2_use)
a <- read_csv(url_2_use, skip = 3)
View(a)
df_i <- read_csv(url_2_use, skip = 3)
View(df_i)
df_i$FIPS <- i_county
i_loop <- 1
for (i_county in county_vec) {
url_2_use <- paste0(base_url_a, i_county, base_url_b)
print(url_2_use)
df_i <- read_csv(url_2_use, skip = 3)
df_i$FIPS <- i_county
if (i_loop == 1) {
df_all <- df_i
i_loop <- 2
} else{
df_all <- df_all %>%
bind_rows(df_i)
}
}
View(df_all)
df_all <- df_all %>%
mutate(YEAR = str_sub(Date,1,4))
View(df_all)
df_all <- df_all %>%
mutate(YEAR = str_sub(Date,1,4),
MONTH = str_sub(Date,5,6))
write_csv(x = df_all, "./noaa_cag_temperatures.csv")
base_url_a <- "https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/time-series/CA-"
base_url_b <- "/pcp/1/0/1895-2025/data.csv"
county_vec <- seq(1,115, by = 2)
county_vec <- str_pad(county_vec, width = 3,side = "left", pad = "0")
county_vec
i_loop <- 1
for (i_county in county_vec) {
url_2_use <- paste0(base_url_a, i_county, base_url_b)
print(url_2_use)
df_i <- read_csv(url_2_use, skip = 3)
df_i$FIPS <- i_county
if (i_loop == 1) {
df_all <- df_i
i_loop <- 2
} else{
df_all <- df_all %>%
bind_rows(df_i)
}
}
df_all <- df_all %>%
mutate(YEAR = str_sub(Date,1,4),
MONTH = str_sub(Date,5,6))
write_csv(x = df_all, "./noaa_cag_precipitation.csv")
