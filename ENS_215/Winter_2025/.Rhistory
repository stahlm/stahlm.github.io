ggplot(aes(x = cluster_id, y = Ca, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = V, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Se, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = As, fill = region_ID)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set1") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = U, fill = region_ID)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set1") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Fe, fill = region_ID)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set1") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = SO4_ppm, fill = region_ID)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set1") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Ca, fill = region_ID)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set1") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = V, fill = region_ID)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set1") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Se, fill = region_ID)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set1") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
summary(srp_gw$cluster_id)
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = region_ID, fill = cluster_id)) +
scale_fill_brewer(type = "qual", palette = "Set2") +
geom_bar()
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = V, y = As, fill = region_ID)) +
geom_point(shape = 21, size = 2) +
scale_fill_brewer(type = "qual", palette = "Set3") +
scale_x_log10() +
scale_y_log10() +
theme_classic() +
facet_wrap(~cluster_id)
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = SO4_ppm, y = As, fill = region_ID)) +
geom_point(shape = 21, size = 2) +
scale_fill_brewer(type = "qual", palette = "Set3") +
scale_x_log10() +
scale_y_log10() +
theme_classic() +
facet_wrap(~cluster_id)
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = V, y = As, fill = cluster_id)) +
geom_point(shape = 21, size = 2) +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_x_log10() +
scale_y_log10() +
theme_classic() +
facet_wrap(~region_ID)
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = Se, y = U, fill = cluster_id)) +
geom_point(shape = 21, size = 2) +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_x_log10() +
scale_y_log10() +
theme_classic() +
facet_wrap(~region_ID)
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = V, y = As, fill = region_ID)) +
geom_point(shape = 21, size = 2) +
scale_fill_brewer(type = "qual", palette = "Set3") +
scale_x_log10() +
scale_y_log10() +
theme_classic() +
facet_wrap(~cluster_id)
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = SO4_ppm, y = As, fill = region_ID)) +
geom_point(shape = 21, size = 2) +
scale_fill_brewer(type = "qual", palette = "Set3") +
scale_x_log10() +
scale_y_log10() +
theme_classic() +
facet_wrap(~cluster_id)
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = V, y = As, fill = region_ID)) +
geom_point(shape = 21, size = 2) +
scale_fill_brewer(type = "qual", palette = "Set3") +
scale_x_log10() +
scale_y_log10() +
theme_classic() +
facet_wrap(~cluster_id)
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = SO4_ppm, y = As, fill = region_ID)) +
geom_point(shape = 21, size = 2) +
scale_fill_brewer(type = "qual", palette = "Set3") +
scale_x_log10() +
scale_y_log10() +
theme_classic() +
facet_wrap(~cluster_id)
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = V, y = As, fill = region_ID)) +
geom_point(shape = 21, size = 2) +
scale_fill_brewer(type = "qual", palette = "Set3") +
scale_x_log10() +
scale_y_log10() +
theme_classic() +
facet_wrap(~cluster_id)
srp_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = SO4_ppm, y = As, fill = region_ID)) +
geom_point(shape = 21, size = 2) +
scale_fill_brewer(type = "qual", palette = "Set3") +
scale_x_log10() +
scale_y_log10() +
theme_classic() +
facet_wrap(~cluster_id)
library(tidyverse)
library(tmap)
library(sf)
df_chem <- read_csv("../Additional_examples/data_Na_Cl_2025_02_17.csv")
View(df_chem)
df_chem_summary <- df_chem %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(Na_mean = mean(ResultMeasureValue_Na, na.rm = T))
View(df_chem_summary)
df_chem_summary <- df_chem %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(Na_median = median(ResultMeasureValue_Na, na.rm = T))
df_chem_summary <- df_chem %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(Na_median = median(ResultMeasureValue_Na, na.rm = T),
Lat = first(lat),
Lon = first(lon)
)
df_chem_summary <- df_chem %>%
group_by(MonitoringLocationIdentifier) %>%
summarize(Na_median = median(ResultMeasureValue_Na, na.rm = T),
Cl_median = median(ResultMeasureValue_Cl, na.rm = T),
Lat = first(lat),
Lon = first(lon)
)
sf_ct_border <- tigris::counties(state = "CT")
sf_ct_border <- tigris::counties(state = "CT", year = 2022)
View(sf_ct_border)
sf_ct_border %>%
tm_shape() +
tm_borders()
sf_chem_summary <- st_as_sf(df_chem_summary, coords = c("Lon", "Lat"))
View(sf_chem_summary)
sf_ct_border %>%
tm_shape() +
tm_borders() +
tm_shape(sf_chem_summary) +
tm_markers(col = "Na_median")
sf_ct_border %>%
tm_shape() +
tm_borders() +
tm_shape(sf_chem_summary) +
tm_dots(col = "Na_median")
sf_ct_border %>%
tm_shape() +
tm_borders() +
tm_shape(sf_chem_summary) +
tm_dots(col = "Na_median", size = 2)
sf_ct_border %>%
tm_shape() +
tm_borders() +
tm_shape(sf_chem_summary) +
tm_bubbles(col = "Na_median", size = 2)
sf_chem_summary <- sf_chem_summary %>%
filter(Na_median <= 2000)
sf_ct_border %>%
tm_shape() +
tm_borders() +
tm_shape(sf_chem_summary) +
tm_bubbles(col = "Na_median", size = 2)
sf_ct_border %>%
tm_shape() +
tm_borders() +
tm_shape(sf_chem_summary) +
tm_bubbles(col = "Na_median", size = 1)
sf_ct_border %>%
tm_shape() +
tm_borders() +
tm_shape(sf_chem_summary) +
tm_bubbles(col = "Na_median", size = 1, palette = "viridis")
sf_ct_border %>%
tm_shape() +
tm_borders() +
tm_shape(sf_chem_summary) +
tm_bubbles(col = "Na_median", size = 1, palette = "viridis", style = "quantile")
tmap_mode(mode = "view")
sf_ct_border %>%
tm_shape() +
tm_borders() +
tm_shape(sf_chem_summary) +
tm_bubbles(col = "Na_median", size = 1, palette = "viridis", style = "quantile")
tmap_mode(mode = "view")
sf_ct_border %>%
tm_shape() +
tm_borders() +
tm_shape(sf_chem_summary) +
tm_bubbles(col = "Na_median", size = 1, palette = "viridis", style = "quantile")
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/noaa_cag_state_temperatures.csv")
View(state_temps)
state_temps <- state_temps %>%
rename(Avg_Temp_F = Value)
library(tidyverse)
library(patchwork) # we'll use this for some figures in this class
cube_it <- function(cube_me){
# Function computes the cube of the input
# inputs: cube_me is the value to cube
# output: the cube of cube_me
cube_me^3 # take the cube of the input cube_me
}
cube_it(5)
cube_it(cube_me = 5)
pow_it <- function(base_val, exp_val){
# Raises an input value to a specified power
# inputs: base_val is the value to be raised to a power; exp_val is the exponent value
# output: base_val raised to the exp_val
base_val^exp_val
}
pow_it(base_val = 2, exp_val = 3)
pow_it(exp_val = 3, base_val = 2)
pow_it(2, 3)
F_to_C <- function(deg_F){
(deg_F - 32)*(5/9)
}
pow_it <- function(base_val, exp_val = 1){
base_val^exp_val
}
pow_it(base_val = 3)
pow_it(base_val = 3, exp_val = 3)
add_something <- function(my_number){
add_number <- 1
my_number + add_number
}
add_something(my_number = 5)
add_number <- 4
add_something(my_number = 5)
add_something <- function(my_number){
my_number + add_number
}
add_number <- 10
add_something(my_number = 5)
get_stats_bad <- function(input_data){
min(input_data)
max(input_data)
mean(input_data)
}
my_data <- tibble(x = runif(1000, min = 0, max = 50))  #generate a vector of 1000 random values between 0 and 50
get_stats_bad(my_data$x)
get_stats_good <- function(input_data){
# Computes basic statistics on a univariate dataset
# inputs: input_data is a vector of values
# outputs: list containing the min, max, and mean of the input_data
stat_min <- min(input_data)
stat_max <- max(input_data)
stat_mean <- mean(input_data)
c(stat_min, stat_max, stat_mean)
}
get_stats_good(my_data$x)
get_stats_good <- function(input_data){
stat_min <- min(input_data)
stat_max <- max(input_data)
stat_mean <- mean(input_data)
fig_hist <- ggplot() +
geom_histogram(aes(x = input_data)) +
theme_classic()
list(stat_min, stat_max, stat_mean, fig_hist)
}
get_stats_good(my_data$x)
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/noaa_cag_state_temperatures.csv")
state_temps <- state_temps %>%
rename(Avg_Temp_F = Value)
state_climate_summary <- function(climate_data, state_abbrev){
table_months <- climate_data %>%
filter(state_cd == state_abbrev) %>%
group_by(Month) %>%
summarise(month_mean = mean(Avg_Temp_F), month_max = max(Avg_Temp_F), month_min = min(Avg_Temp_F) )
table_annual <- climate_data %>%
filter(state_cd == state_abbrev) %>%
group_by(Year) %>%
summarise(annual_mean = mean(Avg_Temp_F))
fig_annual <- table_annual %>%
ggplot(aes(x = Year, y = annual_mean)) +
geom_line() +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Annual mean temperature:", state_abbrev),
x = "",
y = "Annual Mean Temp (F)",
caption = "Data source: NOAA") +
theme_classic()
list(table_months, table_annual, fig_annual)
}
state_climate_summary(state_temps, "Massachusetts")
state_climate_summary <- function(climate_data, state_to_select){
table_months <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(Month) %>%
summarise(month_mean = mean(Avg_Temp_F), month_max = max(Avg_Temp_F), month_min = min(Avg_Temp_F) )
table_annual <- climate_data %>%
filter(state_cd == state_to_select) %>%
group_by(Year) %>%
summarise(annual_mean = mean(Avg_Temp_F))
fig_annual <- table_annual %>%
ggplot(aes(x = Year, y = annual_mean)) +
geom_line() +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Annual mean temperature:", state_to_select),
x = "",
y = "Annual Mean Temp (F)",
caption = "Data source: NOAA") +
theme_classic()
list(table_months, table_annual, fig_annual)
}
state_climate_summary(state_temps, "Massachusetts")
state_climate_summary <- function(climate_data, state_to_select){
table_months <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(Month) %>%
summarise(month_mean = mean(Avg_Temp_F), month_max = max(Avg_Temp_F), month_min = min(Avg_Temp_F) )
table_annual <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(Year) %>%
summarise(annual_mean = mean(Avg_Temp_F))
fig_annual <- table_annual %>%
ggplot(aes(x = Year, y = annual_mean)) +
geom_line() +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Annual mean temperature:", state_to_select),
x = "",
y = "Annual Mean Temp (F)",
caption = "Data source: NOAA") +
theme_classic()
list(table_months, table_annual, fig_annual)
}
state_climate_summary(state_temps, "Massachusetts")
state_climate_summary <- function(climate_data, state_to_select){
table_months <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(MONTH) %>%
summarise(month_mean = mean(Avg_Temp_F), month_max = max(Avg_Temp_F), month_min = min(Avg_Temp_F) )
table_annual <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(Year) %>%
summarise(annual_mean = mean(Avg_Temp_F))
fig_annual <- table_annual %>%
ggplot(aes(x = Year, y = annual_mean)) +
geom_line() +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Annual mean temperature:", state_to_select),
x = "",
y = "Annual Mean Temp (F)",
caption = "Data source: NOAA") +
theme_classic()
list(table_months, table_annual, fig_annual)
}
state_climate_summary(state_temps, "Massachusetts")
state_climate_summary <- function(climate_data, state_to_select){
table_months <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(MONTH) %>%
summarise(month_mean = mean(Avg_Temp_F), month_max = max(Avg_Temp_F), month_min = min(Avg_Temp_F) )
table_annual <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(YEAR) %>%
summarise(annual_mean = mean(Avg_Temp_F))
fig_annual <- table_annual %>%
ggplot(aes(x = YEAR, y = annual_mean)) +
geom_line() +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Annual mean temperature:", state_to_select),
x = "",
y = "Annual Mean Temp (F)",
caption = "Data source: NOAA") +
theme_classic()
list(table_months, table_annual, fig_annual)
}
state_climate_summary(state_temps, "Massachusetts")
state_temps <- state_temps %>%
rename(Avg_Temp_F = Value) %>%
filter(YEAR < 2025)
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/noaa_cag_state_temperatures.csv")
state_temps <- state_temps %>%
rename(Avg_Temp_F = Value) %>%
filter(YEAR < 2025)
state_climate_summary <- function(climate_data, state_to_select){
table_months <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(MONTH) %>%
summarise(month_mean = mean(Avg_Temp_F), month_max = max(Avg_Temp_F), month_min = min(Avg_Temp_F) )
table_annual <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(YEAR) %>%
summarise(annual_mean = mean(Avg_Temp_F))
fig_annual <- table_annual %>%
ggplot(aes(x = YEAR, y = annual_mean)) +
geom_line() +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Annual mean temperature:", state_to_select),
x = "",
y = "Annual Mean Temp (F)",
caption = "Data source: NOAA") +
theme_classic()
list(table_months, table_annual, fig_annual)
}
state_climate_summary(state_temps, "Massachusetts")
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude = 2.5, start_time = "0000:00:00", end_time = "23:59:59"){
## Function info
#' @description this function queries and downloads earthquake data from the USGS Earthquakes Hazards Program real-time database of global earthquakes
#' @param start_date start date for your query.  Entered as a text string in the format "YYYY-MM-DD"
#'
## Function code
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?"
full_url <- paste0(base_url,"starttime=", start_date, "%", start_time, "&",
"endtime=", end_date, "%20", end_time, "&",
"minmagnitude=", min_magnitude, "&",
"orderby=time")
df_earthquakes <- read.csv(full_url)
}
a <- get_usgs_earthquakes(start_date = "2025-02-01", end_time = "2025-02-05")
a <- get_usgs_earthquakes(start_date = "2025-02-01", end_date = "2025-02-05")
library(worldmet)
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
worldmet_data_chicago <- worldmet_data_chicago %>%
filter(!is.na(RH), !is.na(air_temp))   # remove observations that are missing RH and/or air temp data
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
worldmet_data_samwawah <- importNOAA(code = "406740-99999",
year = 2015)
worldmet_data_samwawah <- worldmet_data_samwawah %>%
filter(!is.na(RH), !is.na(air_temp))   # remove observations that are missing RH and/or air temp data
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
worldmet_data_chicago <- worldmet_data_chicago %>%
filter(!is.na(RH), !is.na(air_temp))   # remove observations that are missing RH and/or air temp data
library(worldmet)
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
worldmet_data_chicago <- worldmet_data_chicago %>%
filter(!is.na(RH), !is.na(air_temp))   # remove observations that are missing RH and/or air temp data
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
