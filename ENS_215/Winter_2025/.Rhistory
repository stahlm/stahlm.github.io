theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(y = "Population (millions)",
x = "",
title = "Population of European Countries (2007)"
)
my_gap %>%
filter(continent == "Europe", year == 2007) %>%
ggplot(aes(x = reorder(country, pop), y = pop/10^6, color = pop)) +
geom_point() +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(y = "Population (millions)",
x = "",
title = "Population of European Countries",
subtitle = "Year 2007"
)
my_gap %>%
filter(continent == "Europe", year == 2007) %>%
ggplot(aes(x = reorder(country, pop), y = pop/10^6, color = pop)) +
geom_point() +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(y = "Population (millions)",
x = "",
title = "Population of European Countries",
subtitle = "Year 2007",
caption = "Data source: Gapminder"
)
my_gap %>%
filter(continent == "Europe", year == 2007) %>%
ggplot(aes(x = reorder(country, pop), y = pop/10^6, color = pop)) +
geom_point() +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(y = "Population (millions)",
x = "",
title = "Population of European Countries",
subtitle = "Year 2007",
caption = "Data source: Gapminder",
color = "Population"
)
my_gap %>%
filter(continent == "Europe", year == 2007) %>%
ggplot(aes(x = reorder(country, pop), y = pop/10^6, color = pop/10^6)) +
geom_point() +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(y = "Population (millions)",
x = "",
title = "Population of European Countries",
subtitle = "Year 2007",
caption = "Data source: Gapminder",
color = "Population"
)
View(my_gap)
my_table <- my_gap %>%
filter(year %in% c(1952,2007))
View(my_gap)
View(my_table)
my_table <- my_gap %>%
filter(year %in% c(1952,2007)) %>%
group_by(country) %>%
arrange(country, year) %>%
summarize(continent = first(continent),
gdp_1952 = first(gdpPercap),
gdp_2007 = last(gdpPercap)
)
my_table %>%
ggplot(aes(x = gdp_1952, y = gdp_2007)) +
geom_point()
my_table %>%
ggplot(aes(x = gdp_1952, y = gdp_2007)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "red")
my_table %>%
ggplot(aes(x = gdp_1952, y = gdp_2007)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "red") +
coord_equal(ratio = 1)
my_table %>%
ggplot(aes(x = gdp_1952, y = gdp_2007)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "red") +
coord_equal(ratio = 1) +
facet_wrap(~continent)
my_table %>%
ggplot(aes(x = gdp_1952, y = gdp_2007)) +
geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, color = "red") +
coord_equal(ratio = 1) +
facet_wrap(~continent)
my_table %>%
ggplot(aes(x = gdp_1952, y = gdp_2007, color = continent)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "red") +
theme_bw() +
scale_x_log10(labels = trans_format('log10', math_format(10^.x)) ) +
scale_y_log10(labels = trans_format('log10', math_format(10^.x)), breaks = c(10^3, 10^4, 10^5) ) +
coord_equal(ratio = 1) +
facet_wrap(~continent) +
labs(x = "GDP per capita 1952 ($)",
y = "GDP per capita 2007 ($)",
title = "Per capita GDP over time",
subtitle = "Change between 1952 and 2007",
caption = "Data source: gapminder"
) +
theme(legend.position = "none")
my_gap %>%
filter(continent == "Asia", year %in% c(1952, 2007)) %>%
ggplot(aes(x = LifeExp,
y = reorder(country, lifeExp, FUN = max),
group = country
))
my_gap %>%
filter(continent == "Asia", year %in% c(1952, 2007)) %>%
ggplot(aes(x = lifeExp,
y = reorder(country, lifeExp, FUN = max),
group = country
))
my_gap %>%
filter(continent == "Asia", year %in% c(1952, 2007)) %>%
ggplot(aes(x = lifeExp,
y = reorder(country, lifeExp, FUN = max),
group = country
)) +
geom_point()
my_gap %>%
filter(continent == "Asia", year %in% c(1952, 2007)) %>%
ggplot(aes(x = lifeExp,
y = reorder(country, lifeExp, FUN = max),
group = country
)) +
geom_point(aes(color = year))
my_gap %>%
filter(continent == "Asia", year %in% c(1952, 2007)) %>%
ggplot(aes(x = lifeExp,
y = reorder(country, lifeExp, FUN = max),
group = country
)) +
geom_point(aes(color = year)) +
geom_line()
my_gap %>%
filter(continent == "Asia", year %in% c(1952, 2007)) %>%
ggplot(aes(x = lifeExp,
y = reorder(country, lifeExp, FUN = max),
group = country,
)) +
geom_point(aes(color = year)) +
geom_line()
my_gap %>%
filter(continent == "Asia", year %in% c(1952, 2007)) %>%
ggplot(aes(x = lifeExp,
y = reorder(country, lifeExp, FUN = max),
group = country,
)) +
geom_point(aes(color = year)) +
geom_line() +
scale_color_continuous(low = "darkgrey", high = "black")
my_gap %>%
filter(continent == "Asia", year %in% c(1952, 2007)) %>%
ggplot(aes(x = lifeExp,
y = reorder(country, lifeExp, FUN = max),
group = country,
)) +
geom_point(aes(color = year)) +
geom_line() +
scale_color_continuous(low = "darkgrey", high = "black") +
theme_classic() +
theme(legend.position = "none") +
labs(title = "Change in life expectancy in Asia ",
subtitle = "1952 to 2007",
x = "Life expectancy (yrs)",
y = "",
caption = "1952 data (grey) and 2007 data (black)")
library(tidyverse)
precip_untidy_MA <- read_csv("https://stahlm.github.io/ENS_215/Data/precip_untidy_MA.csv")
View(precip_untidy_MA)
month.abb
precip_tidy_MA <- precip_untidy_MA %>%
pivot_longer(cols = month.abb,
names_to = "Month",
values_to = "Precip_inches"
)
precip_tidy_MA
library(tidyverse)
precip_MA <- read_csv("https://stahlm.github.io/ENS_215/Data/precip_MA.csv")
precip_NY <- read_csv("https://stahlm.github.io/ENS_215/Data/precip_NY.csv")
precip_combined <- bind_rows(precip_MA, precip_NY)
# Your code here
# Your code here
dates_EPA <- read_csv("https://stahlm.github.io/ENS_215/Data/Sampling_dates_EPA_fish_tissue.csv")
dates_USGS <- read_csv("https://stahlm.github.io/ENS_215/Data/Sampling_dates_USGS_water_quality.csv")
dates_common <- intersect(dates_EPA, dates_USGS)
dates_only_USGS <- setdiff(dates_USGS, dates_EPA)
# Your code here
dates_USGS_EPA <- union(dates_USGS, dates_EPA)
years_USGS <- select(dates_USGS, Year)
months_days_USGS <- select(dates_USGS, Month, Day)
bind_example <- bind_cols(years_USGS, months_days_USGS)
head(bind_example)
temperature_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
temperature_data <- filter(temperature_data, !(Year == 2016 & state_cd == "NY")) # remove data for NY in year 2016
library(kableExtra)
head(precip_combined) %>%
kable() %>%
kable_styling(bootstrap_options = "condensed", position = "center") %>%
column_spec(column = c(1,2,4), background = "yellow") %>%
column_spec(column = c(3), background = "lightgrey")
head(temperature_data) %>%
kable() %>%
kable_styling(bootstrap_options = "condensed", position = "center") %>%
column_spec(column = c(1,2,4), background = "yellow") %>%
column_spec(column = c(3), background = "lightgrey")
climate_data <- inner_join(precip_combined, temperature_data)
head(climate_data)  %>%
kable() %>%
kable_styling(bootstrap_options = "condensed", position = "center")
climate_data <- left_join(precip_combined, temperature_data)
regions_data <- read_csv("https://stahlm.github.io/ENS_215/Data/state_regions.csv")
regions_data <- mutate(regions_data, state_cd = State_abb)
a <- left_join(climate_data, regions_data)
# Your code here
# Your code here
library(tidyverse)
precip_MA <- read_csv("https://stahlm.github.io/ENS_215/Data/precip_MA.csv")
precip_NY <- read_csv("https://stahlm.github.io/ENS_215/Data/precip_NY.csv")
precip_combined <- bind_rows(precip_MA, precip_NY)
precip_switched <- select(precip_MA, state_cd, everything())
a <- bind_rows(precip_switched, precip_NY)
precip_switched <- select(precip_MA, -state_cd)
bind_rows(precip_switched, precip_NY)
dates_EPA <- read_csv("https://stahlm.github.io/ENS_215/Data/Sampling_dates_EPA_fish_tissue.csv")
dates_USGS <- read_csv("https://stahlm.github.io/ENS_215/Data/Sampling_dates_USGS_water_quality.csv")
dates_common <- intersect(dates_EPA, dates_USGS)
View(dates_common)
dates_only_USGS <- setdiff(dates_USGS, dates_EPA)
dates_EPA_only <- setdiff(dates_EPA, dates_USGS)
dates_USGS_EPA <- union(dates_USGS, dates_EPA)
years_USGS <- select(dates_USGS, Year)
months_days_USGS <- select(dates_USGS, Month, Day)
bind_example <- bind_cols(years_USGS, months_days_USGS)
head(bind_example)
temperature_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
temperature_data <- filter(temperature_data, !(Year == 2016 & state_cd == "NY")) # remove data for NY in year 2016
head(precip_combined)
head(temperature_data)
library(kableExtra)
head(precip_combined) %>%
kable() %>%
kable_styling(bootstrap_options = "condensed", position = "center") %>%
column_spec(column = c(1,2,4), background = "yellow") %>%
column_spec(column = c(3), background = "lightgrey")
head(temperature_data) %>%
kable() %>%
kable_styling(bootstrap_options = "condensed", position = "center") %>%
column_spec(column = c(1,2,4), background = "yellow") %>%
column_spec(column = c(3), background = "lightgrey")
climate_data <- inner_join(precip_combined, temperature_data)
head(climate_data)  %>%
kable() %>%
kable_styling(bootstrap_options = "condensed", position = "center")
climate_data <- left_join(precip_combined, temperature_data)
regions_data <- read_csv("https://stahlm.github.io/ENS_215/Data/state_regions.csv")
View(regions_data)
regions_data <- mutate(regions_data, state_cd = State_abb)
a <- left_join(climate_data, regions_data)
right_join(precip_combined, temperature_data)
right_join(temperature_data, precip_combined)
full_join(precip_combined, temperature_data)
full_join(temperature_data, precip_combined)
library(gapminder)
my_gap <- gapminder
dams_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Dams_FAO_SelectCols_LabData.csv")
dams_data <- rename(dams_data, country = Country)
my_gap <- filter(my_gap, year == 2007) %>%
select(-lifeExp, -continent, -year)
dams_enhanced <- left_join(dams_data, my_gap)
View(dams_enhanced)
library(tidyverse)
library(dataRetrieval)
CT_sites_gw <- readWQPsummary(
statecode = "CT",
siteType = "Stream"
)
View(CT_sites_gw)
CT_usgs_sites <- CT_sites_gw %>%
filter(Provider == "NWIS")
CT_usgs_sites <- CT_sites_gw %>%
filter(Provider == "NWIS", CharacteristicName == "Chloride")
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:10],
characteristicName = "Chloride",
service = "StationWQX3"
)
View(data_sites)
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:10],
characteristicName = "Chloride",
service = "ResultWQX3"
)
View(data_sites)
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:10],
characteristicName = "Chloride",
dataProfile = "narrow",
service = "ResultWQX3"
)
View(data_sites)
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:100],
characteristicName = "Chloride",
dataProfile = "narrow",
service = "ResultWQX3"
)
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:10],
characteristicName = "Chloride",
dataProfile = "narrow",
service = "ResultWQX3"
)
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:20],
characteristicName = "Chloride",
dataProfile = "narrow",
service = "ResultWQX3"
)
View(data_sites)
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:40],
characteristicName = "Chloride",
dataProfile = "narrow",
service = "ResultWQX3"
)
View(data_sites)
sites_schdy <- whatNWISsites(countyCd = "36093",
parameterCd = c("00060","00065"),
service = "dv"
)
View(sites_schdy)
sites_what_data <- whatNWISdata(siteNumber = sites_schdy$site_no,
service = "dv",
parameterCd = c("00060","00065"),
statCd = "00003")
View(sites_what_data)
df_stream_data <- readNWISdv(siteNumbers = sites_what_data$site_no,
parameterCd = c("00060","00065"),
statCd = "00003")
View(df_stream_data)
df_stream_data <- df_stream_data %>%
renameNWISColumns()
df_stream_data %>%
filter(!is.na(Flow)) %>%
ggplot(aes(x =Date, y = Flow)) +
geom_line() +
facet_wrap(~ site_no, scales = "free")
df_stream_data %>%
filter(!is.na(Flow), year(Date) > 2020) %>%
ggplot(aes(x =Date, y = Flow)) +
geom_line() +
facet_wrap(~ site_no, scales = "free")
pCode <- c("00618")
NY_NO3_sites <- whatWQPdata(stateCd = "NY",
parameterCd = pCode,
startDate = "2015-01-01"
) %>%
pCode <- c("00618")
NY_NO3_sites <- whatWQPdata(stateCd = "NY",
parameterCd = pCode,
startDate = "2015-01-01"
) %>%
filter(ResolvedMonitoringLocationTypeName %in% c("Well", "Spring"))
View(NY_NO3_sites)
NY_NO3_recent_data <- readWQPqw(siteNumbers = NY_NO3_sites$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = "2015-01-01"
)
NY_NO3_recent_data <- readWQPqw(siteNumbers = NY_NO3_sites$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = "2015-01-01", legacy = F
)
NY_NO3_recent_data <- readWQPqw(siteNumbers = NY_NO3_sites$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = "2015-01-01", legacy = F
)
NY_NO3_recent_data <- readWQPqw(siteNumbers = NY_NO3_sites$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = "2015-01-01", legacy = T
)
View(NY_NO3_recent_data)
library(tidyverse)
library(lubridate)
library(leaflet)
# Let's also load in the `sf` and the `tmap` packages.  You will probably need to install these packages first.  FYI, both of these packages are used for spatial analysis and making maps.  We will learn much more about these topics in upcoming lectures.
library(sf)
library(tmap)
library(GSODR)
load(system.file("extdata", "isd_history.rda", package = "GSODR"))
library(leaflet)
map_gsod <- isd_history  %>% leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(~ LON, ~ LAT, popup = ~ STNID, clusterOptions = T)
map_gsod
map_gsod
met_df <- get_GSOD(years = 2023:2024, station = "681100-99999")
met_df %>%
ggplot() +
geom_line(aes(x = YEARMODA, y = MIN), color = "blue") +
geom_line(aes(x = YEARMODA, y = MAX), color = "red") +
labs(title = met_df$NAME[1],
x = "Date",
y = "Temperature (C)",
caption = paste("Data source GSOD station", met_df$STNID[1])
) +
theme_classic()
schdy_met_stations <- nearest_stations(LAT = 42.81,
LON = -73.94,
distance = 25)
schdy_met_stations
library(worldmet)
worldmet_site_df <- getMeta(plot = F)
getMeta(plot = T, returnMap = T)
getMeta(plot = T, returnMap = T)
worldmet_data <- importNOAA(code = "725180-14735",
year = 2024:2025)
worldmet_data %>%
ggplot(aes(x = date, y = air_temp)) +
geom_line() +
theme_bw()
worldmet_data %>%
ggplot(aes(x = date, y = RH)) +
geom_line() +
theme_bw()
library(dataRetrieval)
sites_schdy <- whatNWISsites(countyCd = "36093",
parameterCd = c("00060","00065"),
service = "dv"
)
sites_schdy
sites_what_data <- whatNWISdata(siteNumber = sites_schdy$site_no,
service = "dv",
parameterCd = c("00060","00065"),
statCd = "00003")
sites_what_data
fig_map <- sites_what_data %>%
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(~ dec_long_va, ~ dec_lat_va, popup = ~ station_nm)
fig_map
df_stream_data <- readNWISdv(siteNumbers = sites_what_data$site_no,
parameterCd = c("00060","00065"),
statCd = "00003")
df_stream_data <- df_stream_data %>%
renameNWISColumns()
df_stream_data %>%
filter(!is.na(GH)) %>% # remove NA gauge heights
ggplot(aes(x =Date, y = GH)) +
geom_line() +
facet_wrap(~ site_no, scales = "free")
df_stream_data %>%
filter(!is.na(Flow)) %>%
ggplot(aes(x =Date, y = Flow)) +
geom_line() +
facet_wrap(~ site_no, scales = "free")
parm_cd_df <- parameterCdFile
pCode <- c("00618")
NY_NO3_sites <- whatWQPdata(stateCd = "NY",
parameterCd = pCode,
startDate = "2015-01-01"
) %>%
filter(ResolvedMonitoringLocationTypeName %in% c("Well", "Spring"))
NY_NO3_recent_data <- readWQPqw(siteNumbers = NY_NO3_sites$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = "2015-01-01"
)
View(NY_NO3_sites)
View(NY_NO3_recent_data)
NY_NO3_recent_data_summary <- NY_NO3_recent_data %>%
filter(!is.na(ResultMeasureValue)) %>%  # remove rows with NA values for the measurement of interest
group_by(MonitoringLocationIdentifier) %>%
summarize(NO3_max = max(ResultMeasureValue, na.rm = T)) %>%
left_join(attr(NY_NO3_recent_data, "siteInfo")) # joining our water quality data with the data frame that contains site information
tmap_mode("view")
fig_map_NO3 <- NY_NO3_recent_data_summary %>%
filter(!is.na(LatitudeMeasure), !is.na(LongitudeMeasure)) %>%
st_as_sf(coords = c("LongitudeMeasure", "LatitudeMeasure")) %>%
tm_shape() +
tm_dots(col = "NO3_max", style = "quantile", size = 0.2, palette = "viridis")
fig_map_NO3
fig_map_NO3
earthquakes <- read_csv("https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2023-01-01%0000:00:00&endtime=2023-02-12%2023:59:59&minmagnitude=2.5&orderby=time")
earthquakes <- read_csv("https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2024-01-01%0000:00:00&endtime=2025-02-04%2023:59:59&minmagnitude=2.5&orderby=time")
earthquakes <- read_csv("https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2025-01-01%0000:00:00&endtime=2025-02-04%2023:59:59&minmagnitude=2.5&orderby=time")
head(earthquakes)
View(earthquakes)
map_world_data <- map_data("world")
earthquake_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 2.5 magnitude since the start of 2023",
subtitle = "Date window: 1-Jan to 12-Feb-2023",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
earthquake_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 2.5 magnitude since the start of 2025",
subtitle = "Date window: 1-Jan to 4-Feb-2025",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
