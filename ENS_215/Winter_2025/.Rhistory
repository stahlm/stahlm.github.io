r_elev_08
r_elev_13 <- get_elev_raster(locations = aoi2use, z = 13)
r_elev_13
raster_world_elev <- rast("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/World_elev.TIFF")
raster_world_elev <- raster_world_elev$World_elev
# Data was obtained from: https://neo.sci.gsfc.nasa.gov/view.php?datasetId=SRTM_RAMP2_TOPO
my_raster <- rast("./World_elev.tif")
global(my_raster, fun = "min")
global(my_raster, fun = "max")
global(my_raster, fun = "mean")
global(my_raster, fun = "mean", na.rm = T)
cities_world <- world.cities
library(tidyverse)
library(tmap)
library(sf)
library(maps)
library(terra)
library(AOI)
library(elevatr)
loc2use <- aoi_get(x = list("Schenectady, NY",5,5) )
#elevation <- get_elev_raster(loc2use, z = 14, clip = "bbox")
#writeRaster(elevation, "./elevation_schdy.tiff")
elevation <- rast("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Winter_2022/Lectures/Data/elevation_schdy.tif")
elevation %>%
tm_shape() +
tm_raster(style = "cont", palette = terrain.colors(10), title = "Elev (m)") +
tm_layout(legend.outside = T,
main.title = "Schenectady elevation map")
raster_world_elev <- rast("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/World_elev.TIFF")
raster_world_elev <- raster_world_elev$World_elev
# Data was obtained from: https://neo.sci.gsfc.nasa.gov/view.php?datasetId=SRTM_RAMP2_TOPO
raster_world_elev
terra::plot(raster_world_elev)
global(raster_world_elev,
fun = "max")
raster_world_elev[raster_world_elev == 99999] <- NA
terra::plot(raster_world_elev)
raster_world_elev__ft <- raster_world_elev * 3.28084
coeff_p0 <- 1 # Sea level standard atmospheric pressure (Atmospheres)
coeff_T0 <- 288.16 # Sea level standard temperature(K)
coeff_g <- 9.80665 # 	Earth-surface gravitational acceleration (m/s^2)
coeff_M <- 0.02896968 # Molar mass of dry air (kg/mol)
coeff_R0 <- 8.314462618 #	Universal gas constant (J/(mol*K))
raster_atmos_pressure <- coeff_p0 * exp( -(coeff_g * raster_world_elev * coeff_M)/(coeff_T0 * coeff_R0) )
terra::plot(raster_atmos_pressure)
raster_day_temps <- rast("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Day_temp_2001_march.tif")
raster_day_temps[raster_day_temps == 99999] <- NA
raster_night_temps <- rast("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Night_temp_2001_march.TIFF")
raster_night_temps[raster_night_temps == 99999] <- NA
# Data from: https://neo.sci.gsfc.nasa.gov/view.php?datasetId=MOD_LSTD_CLIM_M
# Data from: https://neo.sci.gsfc.nasa.gov/view.php?datasetId=MOD_LSTN_CLIM_M
raster_temps_diff <- raster_day_temps - raster_night_temps
terra::plot(raster_temps_diff)
terra::hist(raster_temps_diff)
reclass_vec <- c(-100,3,6,15,100)
raster_temps_diff_reclass <- classify(raster_temps_diff, reclass_vec)
terra::plot(raster_temps_diff_reclass,
col = terrain.colors(4))
cities_world <- world.cities
cities_world <- cities_world %>%
filter(capital == 1)
View(cities_world)
View(r_elev_08)
library(tidyverse)
library(tmap)
library(sf)
library(maps)
library(climateR)
library(terra)
library(AOI)
pow_it <- function(base_val, exp_val){
# Raises an input value to a specified power
# inputs: base_val is the value to be raised to a power; exp_val is the exponent value
# output: base_val raised to the exp_val
base_val^exp_val
}
library(tidyverse)
library(tmap)
library(sf)
library(elevatr)
library(tigris)
library(elevatr)
library(tigris)
NY_counties <- counties(state = "NY",
cb = TRUE)
county_schenectady <- NY_counties %>%
filter(NAME == "Schenectady")
raster_elev <- get_elev_raster(county_schenectady,
z = 12,
clip = "locations")
terra::plot(raster_elev)
library(rnaturalearth)
borders_hires <- ne_countries(country = "Luxembourg",
scale = "large",
returnclass = "sf")
raster_elev <- get_elev_raster(borders_hires,
z = 9,
clip = "locations")
raster_elev %>%
tm_shape() +
tm_raster(style = "cont", palette = terrain.colors(n = 10)) +
tm_shape(borders_hires) +
tm_borders()
borders_hires <- ne_countries(country = "Lesotho",
scale = "large",
returnclass = "sf")
raster_elev <- get_elev_raster(borders_hires,
z = 9,
clip = "locations")
raster_elev %>%
tm_shape() +
tm_raster(style = "cont", palette = terrain.colors(n = 10)) +
tm_shape(borders_hires) +
tm_borders()
library(climateR)
sf::sf_use_s2(FALSE)
library(tidyverse)
library(tmap)
library(sf)
library(elevatr)
library(tigris)
NY_counties <- counties(state = "NY",
cb = TRUE)
county_schenectady <- NY_counties %>%
filter(NAME == "Schenectady")
raster_elev <- get_elev_raster(county_schenectady,
z = 12,
clip = "locations")
library(tidyverse)
library(tmap)
library(sf)
library(elevatr)
library(tigris)
NY_counties <- counties(state = "NY",
cb = TRUE)
county_schenectady <- NY_counties %>%
filter(NAME == "Schenectady")
raster_elev <- get_elev_raster(county_schenectady,
z = 12,
clip = "locations")
terra::plot(raster_elev)
library(rnaturalearth)
borders_hires <- ne_countries(country = "Lesotho",
scale = "large",
returnclass = "sf")
raster_elev <- get_elev_raster(borders_hires,
z = 9,
clip = "locations")
raster_elev %>%
tm_shape() +
tm_raster(style = "cont", palette = terrain.colors(n = 10)) +
tm_shape(borders_hires) +
tm_borders()
library(climateR)
border_NY <- ne_states(country = "United States of America", returnclass = "sf")
border_NY <- border_NY %>%
filter(name == "New York")
catalog %>%
filter(id == "gridmet") %>%
select(varname, units, description)
p <- getGridMET(AOI = border_NY,
varname = c("tmmn"),
startDate = "2023-02-04"
)
p <- p$daily_minimum_temperature
p <- terra::crop(p, border_NY)
p <- terra::mask(p, border_NY)
p
p <- p - 273.15
p %>%
tm_shape() +
tm_raster(palette = "Blues", n = 10) +
tm_shape(border_NY) +
tm_borders()
borders_hires <- rnaturalearth::ne_countries(country = "Lesotho",
scale = "large",
returnclass = "sf")
catalog %>%
filter(id == "terraclim_normals") %>%
select(varname, units, description)
climate_raster <- getTerraClimNormals(
AOI = borders_hires,
varname = "ppt",
scenario = "19812010",
month = 1:12,
verbose = T,
dryrun = FALSE
)
climate_raster <- climate_raster$ppt
climate_raster <- terra::crop(climate_raster, borders_hires)
climate_raster <- terra::mask(climate_raster, borders_hires)
climate_raster %>%
tm_shape() +
tm_raster(palette = "RdBu", n = 10) +
tm_shape(borders_hires) +
tm_borders()
lesotho_tot_prcp <- sum(climate_raster)
lesotho_tot_prcp$sum %>%
tm_shape() +
tm_raster(palette = "RdBu", n = 10) +
tm_shape(borders_hires) +
tm_borders()
climate_raster_monthly <- getTerraClim(AOI = borders_hires,
varname = "ppt",
startDate = "2021-01-01")
climate_raster_monthly <- climate_raster_monthly$ppt
climate_raster_monthly <- raster::crop(climate_raster_monthly, borders_hires)
climate_raster_monthly <- raster::mask(climate_raster_monthly, borders_hires)
climate_raster_monthly %>%
tm_shape() +
tm_raster(palette = "RdBu", n = 10) +
tm_shape(borders_hires) +
tm_borders()
library(tidyverse)
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Precip_LabData.csv")
ny_precip <- filter(precip_data, state_cd == "NY")
# Your code here
ny_precip <- ny_precip %>%
mutate(time_period = if_else(Year >= 1950,"Post-1950","Pre-1950"))
quantile(ny_precip$Precip_inches, probs = c(0.001, 0.25, 0.50, 0.75, 0.95))
ny_precip %>%
mutate(frac = cume_dist(Precip_inches))
#arrange(Precip_inches) %>%
#mutate(quant = (seq(1,nrow(ny_precip)) - 0.5)/nrow(ny_precip))
var_example <- tibble(A = rnorm(200, 5, 0.10), B = rnorm(200, 5, 0.75)) %>%
gather(`A`,`B`, key = "Group", value = "Measurement")
var_example %>% ggplot(aes(x = Group, y = Measurement, fill = Group)) +
geom_jitter(height = 0, width = 0.2, shape = 21, size = 1.5, color = "grey") +
scale_fill_manual(values = c("red2","blue3")) +
theme_classic() +
theme(axis.text = element_text(size = 8), axis.title = element_text(size = 10))
quantile(ny_precip$Precip_inches, probs = 0.75) - quantile(ny_precip$Precip_inches, probs = 0.25) # using quantile
IQR(ny_precip$Precip_inches) # using IQR function
shape_symm <- tibble(x= rnorm(5*10^5, mean = 0, sd = 1))
shape_symm %>% ggplot(aes(x)) +
geom_density(fill = "gray") +
theme_classic() +
labs(title = "Unimodal distribution",
x = "",
y = ""
)
shape_symm <- tibble(x= c(rnorm(5*10^5, mean = -2, sd = 0.75), rnorm(5*10^5, mean = 2, sd = 0.75)) )
shape_symm %>% ggplot(aes(x)) +
geom_density(fill = "gray") +
theme_classic() +
labs(title = "Bimodal distribution",
x = "",
y = ""
)
shape_symm <- tibble(x= rnorm(5*10^5, mean = 0, sd = 1))
shape_symm %>% ggplot(aes(x)) +
geom_density(fill = "gray") +
theme_classic() +
labs(title = "Symmetric distribution",
x = "",
y = ""
)
shape_right <- tibble(x = rgamma(5*10^5, shape = 2, rate = 10))
shape_right %>% ggplot(aes(x)) +
geom_density(fill = "gray") +
theme_classic() +
labs(title = "Right-skewed",
x = "",
y = ""
)
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "lightblue") +
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "lightblue") +
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "lightblue") +
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "lightblue") +
labs(y = "Precip (inches)",
x = ""
)
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "lightblue") +
labs(y = "Precip (inches)",
x = ""
) +
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "orange") +
labs(y = "Precip (inches)",
x = ""
) +
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "blue") +
labs(y = "Precip (inches)",
x = ""
) +
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "purple") +
labs(y = "Precip (inches)",
x = ""
) +
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "purple1") +
labs(y = "Precip (inches)",
x = ""
) +
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "purple2") +
labs(y = "Precip (inches)",
x = ""
) +
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "grey") +
labs(y = "Precip (inches)",
x = ""
) +
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "grey") +
geom_jitter(alpha = 0.25, width = 0.15, height = 0) +
theme_classic()
ny_precip %>%
ggplot(aes(x = state_cd, y = Precip_inches)) +
geom_boxplot(fill = "grey") +
geom_jitter(alpha = 0.1, width = 0.15, height = 0) +
labs(y = "Precip (inches)",
x = ""
) +
theme_classic()
ny_precip %>%
ggplot(aes(x = time_period, y = Precip_inches)) +
geom_boxplot(fill = "grey", notch = TRUE) +
labs(y = "Precip (inches)",
x = ""
) +
theme_classic()
ny_precip %>%
ggplot(aes(x = time_period, y = Precip_inches)) +
geom_boxplot(fill = "grey", notch = TRUE) +
labs(y = "Precip (inches)",
x = ""
) +
theme_classic()
precip_data %>%
group_by(state_cd) %>%
summarize(p_25 = quantile(Precip_inches, probs = 0.25),
p_50 = median(Precip_inches),
p_75 = quantile(Precip_inches, probs = 0.75)) %>%
ggplot() +
geom_point(aes(y = reorder(state_cd, p_50), x = p_50 )) +
geom_point(aes(y = state_cd, x = p_25), shape = 21, fill = "red") +
geom_point(aes(y = state_cd, x = p_75), shape = 21, fill = "blue") +
theme_classic() +
xlim(0,7) +
labs(title = "Monthly Precipition Quartiles",
subtitle = "US States",
y = "",
x = "Monthly precipitation (inches)",
caption = "25th (red), 50th (black), 75th (blue)")
library(tidyverse)
library(lubridate)
library(plotly)
install.packages("plotly")
library(tidyverse)
library(lubridate)
library(plotly)
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
fig_1<- state_temps %>%
filter(state_cd == "CA") %>%
ggplot(aes(x = factor(Month), y = Avg_Temp_F)) +
geom_boxplot() +
theme_classic() +
labs(title = "CA Monthly temperatures",
x = "Month",
y = "Temperature (F)")
fig_1
ggplotly(fig_1)
mauna_loa <- read_csv("https://stahlm.github.io/ENS_215/Data/Mauna_Loa_CO2.csv", skip = 2)
fig_mauna_loa <- mauna_loa %>%
filter(Year >= 2010) %>%
ggplot(aes(x = Month, y = CO2_ppm, group = Year, color = Year)) +
geom_line() +
scale_color_gradient(low = "blue", high = "red") +
theme_classic() +
labs(title = "Atmospheric CO2",
subtitle = "Measured at Mauna Loa, Hawaii",
x = "Month",
y = "CO2 (ppm)",
caption = "Data source: NOAA/ESRL") +
scale_x_continuous(breaks = seq(1:12))
fig_mauna_loa
ggplotly(fig_mauna_loa)
library(gapminder)
my_gap <- gapminder
fig_gap <- my_gap %>%
ggplot(aes(x = gdpPercap, y = lifeExp, fill = continent, group = country)) +
geom_point(shape = 21, alpha = 0.75, color = "black", size = 2) +
scale_x_log10() +
theme_classic()
fig_gap
ggplotly(fig_gap, tooltip = c("group","x","y"))
ggplotly(fig_gap, tooltip = c("group","x","y"))
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
color_ramp <- colorRamp(c("blue", "yellow", "red"))
plot_ly(bangladesh_gw, x = ~LONG_DEG, y = ~LAT_DEG, z = ~-WELL_DEPTH_m, name = ~DIVISION) %>%
add_markers(color = ~log10(As_ugL), colors = color_ramp, text = ~paste("As =", As_ugL))
plot_ly(bangladesh_gw, x = ~LONG_DEG, y = ~LAT_DEG, z = ~-WELL_DEPTH_m, name = ~DIVISION) %>%
add_markers(color = ~log10(As_ugL), colors = color_ramp, text = ~paste("As =", As_ugL))
library(dygraphs)
library(xts)
flow <- read_csv("https://stahlm.github.io/ENS_215/Data/USGS_flow_01351500.csv") %>%
drop_na() %>%
filter(Year >= 1940 & Year <= 2016) %>%  # select years 1940 through 2016
mutate(Date = make_date(Year, Month, Day)) %>% # create a Date column that has the dates as an R date object
select(Date, flow_cfs)
flow_ts <- xts(flow[,"flow_cfs"], order.by = flow$Date)
dygraph(flow_ts)
dygraph(flow_ts, ylab = "Flow (cfs)") %>%
dySeries("flow_cfs", label = "Schoharie Creek") %>%
dyRangeSelector(height = 50) %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.5,
hideOnMouseOut = FALSE) %>%
dyOptions(drawGrid = FALSE)
library(gganimate)
library(gifski)
fig_mauna_loa <- mauna_loa %>%
filter(Year >= 1980) %>%
ggplot(aes(x = Month, y = CO2_ppm, group = Year, color = Year)) +
geom_line() +
scale_color_gradient(low = "blue", high = "red") +
theme_classic() +
labs(title = "Atmospheric CO2",
subtitle = "Year: {frame_along}",
x = "Month",
y = "CO2 (ppm)",
caption = "Data source: NOAA/ESRL") +
scale_x_continuous(breaks = seq(1:12))
fig_mauna_loa
fig_mauna_loa + transition_reveal(Year)
View(mauna_loa)
mauna_loa %>%
filter(Year >= 1958) %>%
mutate(Year = round(Year,2)) %>%  # round the years to the 2nd decimal place (makes dynamic plot title nicer)
ggplot(aes(x = Month, y = CO2_ppm, group = Year, color = Year)) +
geom_line() +
scale_color_gradient(low = "blue", high = "red") +
theme_classic() +
labs(title = "Atmospheric CO2",
subtitle = "Year: {frame_along}",
x = "Month",
y = "CO2 (ppm)",
caption = "Data source: NOAA/ESRL") +
scale_x_continuous(breaks = seq(1:12)) +
transition_reveal(Year) # create the animation
anim_save("./Mauna_Loa_seasonal.gif") # save the animation to your current directory
fig_mauna_loa_ts <- mauna_loa %>%
ggplot(aes(x = make_date(Year, Month, 15), y = CO2_ppm)) +
geom_line(size = 1) +
theme_bw() +
labs(title = expression("Atmospheric CO"[2]),
subtitle = "Measured at Mauna Loa, Hawaii",
x = "",
y = expression("CO"[2]* " (ppm)"),
caption = "Data source: NOAA/ESRL")
fig_mauna_loa_ts
fig_mauna_loa_ts + transition_reveal(make_date(Year, Month, 15)) # create the animation
anim_save("./Mauna_Loa_ts.gif") # save the animation to your current directory
devtools::install_github("tylermorganwall/rayshader")
library(tidyverse)
library(tmap)
library(sf)
library(elevatr)
library(tigris)
NY_counties <- counties(state = "NY",
cb = TRUE)
county_schenectady <- NY_counties %>%
filter(NAME == "Schenectady")
raster_elev <- get_elev_raster(county_schenectady,
z = 12,
clip = "locations")
terra::plot(raster_elev)
raster_elev_05 <- get_elev_raster(county_schenectady,
z = 5,
clip = "locations")
terra::plot(raster_elev_05)
terra::plot(raster_elev)
raster_elev_05 <- get_elev_raster(county_schenectady,
z = 6,
clip = "locations")
terra::plot(raster_elev_05)
terra::plot(raster_elev)
library(patchwork)
terra::plot(raster_elev_05) + terra::plot(raster_elev)
terra::plot(raster_elev_05)
