r = terra::rast(hurricane_data)
r_inches <- r/25.4
tmap_mode("plot")
fig_map <- r_inches %>%
tm_shape() +
tm_raster(style = "cont") +
tm_shape(spData::us_states) +
tm_borders()
fig_map
tmap_mode("view")
fig_map
fig_map
tmap_mode("plot")
round(terra::global(x = r_inches, "max", na.rm = T),2) %>% as.data.frame()
sf::sf_use_s2(FALSE)
temperature_US = getGridMET(aoi_get(state = "conus"),
varname = "tmmn",
startDate = "2024-10-31", endDate = "2024-10-31")
#> Spherical geometry (s2) switched off
#> Spherical geometry (s2) switched on
temperature_US <- terra::rast(temperature_US)
temperature_US <- temperature_US - 273.15
temperature_US <- (temperature_US*9/5) + 32
tmap_mode("plot")
temperature_US %>%
tm_shape() +
tm_raster(style = "cont", palette = "-RdBu", midpoint = 32, title = "Min Temp (C)") +
tm_shape(spData::us_states) +
tm_borders() +
tm_layout(legend.outside.position = "right", legend.outside = T)
library(osmdata)
library(tigris)
library(sf)
#library(osmplotr)
library(tmaptools)
library(OpenStreetMap)
Sys.setenv(MAPBOX_API_KEY = "pk.eyJ1Ijoic3RhaGxtIiwiYSI6ImNrZnJiMDMxbDA0aGsyenFlajhvMzZ4bXUifQ.I7l7fJBAHCQWRwyYozq4ZQ")
loc2use <- "New Mexico"
bb_values <- getbb(loc2use)
bb_values
springs_data <- opq(bb_values) %>%
add_osm_feature(key = 'natural', value = 'spring') %>%
osmdata_sf()
View(springs_data)
loc_border <- spData::us_states %>%
filter(NAME == "New Mexico")
tmap_mode("view")
map_springs <-
tm_shape(loc_border) +
tm_borders(col = "black") +
tm_shape(springs_data$osm_points) +
tm_dots(col = "blue")
map_springs
library(dataRetrieval)
library(lubridate)
df_stream_data <- readNWISdv(siteNumbers = "09380000",
parameterCd = c("00060"),
statCd = "00003") %>%
renameNWISColumns()
df_stream_data %>%
ggplot(aes(x = Date, y = Flow)) +
geom_line() +
theme_classic()
table_flows <- df_stream_data %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarize(mean_flow = mean(Flow, na.rm= T),
min_flow = min(Flow, na.rm = T),
max_flow = max(Flow, na.rm = T),
n_meas = n()) %>%
filter(n_meas > 350)
table_flows
fig_max <- table_flows %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = max_flow), size = 1, color = "blue") +
#geom_line(aes(y = min_flow), size = 1, color = "red") +
#geom_line(aes(y = mean_flow), size = 1, color = "black") +
theme_classic()
fig_min <- table_flows %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = min_flow), size = 1, color = "red") +
#geom_line(aes(y = mean_flow), size = 1, color = "black") +
theme_classic()
fig_mean <- table_flows %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = mean_flow), size = 1, color = "black") +
theme_classic()
fig_mean/fig_max/fig_min
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(readxl)
library(ggthemes)
library(sf)
library(tmap)
library(AOI)
Heard_of <- read_xlsx("../../Data/Class_survey_2025.xlsx", sheet = "Heard_of")
Class_yr <- read_xlsx("../../Data/Class_survey_2025.xlsx", sheet = "Class_yr")
Class_yr$Year <- ordered(Class_yr$Year, levels = c("FR","SO","JR","SR","Other"))
Majors <- read_xlsx("../../Data/Class_survey_2025.xlsx", sheet = "Major")
States <- read_xlsx("../../Data/Class_survey_2025.xlsx", sheet = "Home_state")
locs_state <- aoi_get(state = c("NY",
"CA",
"NJ",
"CT",
"MA",
"VT",
"DC"
)
)
locs_state <- aoi_get(state = c("NY",
"CA",
"NJ",
"CT",
"MA",
"VT",
"Washington DC"
)
)
locs_state <- aoi_get(state = c("NY",
"CA",
"NJ",
"CT",
"MA",
"VT",
"District of Columbia"
)
)
locs_state <- aoi_get(state = c("NY",
"CA",
"NJ",
"CT",
"MA",
"VT"
)
)
locs_country <- aoi_get(country = c("India"
)
)
tmap_mode("view")
locs_country %>%
tm_shape() +
tm_polygons(col = "orange", border.col = "black") +
tm_shape(locs_state) +
tm_polygons(col = "orange", border.col = "black")
tmap_mode("view")
tm_shape(locs_state) +
tm_polygons(col = "orange", border.col = "black") +
tm_shape(locs_country) +
tm_polygons(col = "orange", border.col = "black") +
#loc_map
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(readxl)
library(ggthemes)
library(sf)
library(tmap)
library(AOI)
Heard_of <- read_xlsx("../../Data/Class_survey_2025.xlsx", sheet = "Heard_of")
Class_yr <- read_xlsx("../../Data/Class_survey_2025.xlsx", sheet = "Class_yr")
Class_yr$Year <- ordered(Class_yr$Year, levels = c("FR","SO","JR","SR","Other"))
Majors <- read_xlsx("../../Data/Class_survey_2025.xlsx", sheet = "Major")
States <- read_xlsx("../../Data/Class_survey_2025.xlsx", sheet = "Home_state")
locs_state <- aoi_get(state = c("NY",
"CA",
"NJ",
"CT",
"MA",
"VT"
)
)
locs_country <- aoi_get(country = c("India"
)
)
tmap_mode("view")
tm_shape(locs_state) +
tm_polygons(col = "orange", border.col = "black") +
tm_shape(locs_country) +
tm_polygons(col = "orange", border.col = "black") +
#loc_map
tmap_mode("view")
tm_shape(locs_state) +
tm_polygons(col = "orange", border.col = "black") +
tm_shape(locs_country) +
tm_polygons(col = "orange", border.col = "black")
locs_all <- locs_state %>%
bind_rows(locs_country)
library(tidyverse)
fuel_data <- mpg
fuel_data <- mpg
View(fuel_data)
View(fuel_data)
str(fuel_data)
?mpg
n_rows <- nrow(fuel_data)
n_rows <- nrow(fuel_data)
n_cols <- ncol(fuel_data)
dim(fuel_data)
dim(fuel_data)[1]
dim(fuel_data)[2]
summary(fuel_data)
fuel_data$manufacturer
fuel_data$hwy2cty <- fuel_data$hwy/fuel_data$cty
View(fuel_data)
fuel_data <- mutate(fuel_data, hwy2cty = hwy/cty)
min(fuel_data$hwy2cty)
min(fuel_data$hwy2cty)
max(fuel_data$hwy2cty)
ggplot(data = fuel_data)
ggplot(data = fuel_data) +
geom_point(aes(x = displ, y = hwy))
ggplot(data = fuel_data) +
geom_point(aes(x = displ, y = hwy, color = class))
ggplot(data = fuel_data) +
geom_point(aes(x = displ, y = hwy, color = year))
ggplot(data = fuel_data) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap(~class)
us_makes <- c("chevorlet","dodge","ford","jeep",
"lincoln","mercury","pontiac"
)
us_makes <- c("chevrolet","dodge","ford","jeep",
"lincoln","mercury","pontiac"
)
us_makes
fuel_data <- mutate(fuel_data,
region = if_else(manufacturer %in% us_makes, "US", "Foreign"))
fuel_data <- mutate(fuel_data,
regon = if_else(manufacturer %in% us_makes, "US", "Foreign"))
library(tidyverse)
fuel_data <- mpg
str(fuel_data)
n_rows <- nrow(fuel_data)
n_cols <- ncol(fuel_data)
dim(fuel_data)[2]
summary(fuel_data)
fuel_data$hwy2cty <- fuel_data$hwy/fuel_data$cty
fuel_data <- mutate(fuel_data, hwy2cty = hwy/cty)
min(fuel_data$hwy2cty)
max(fuel_data$hwy2cty)
ggplot(data = fuel_data) +
geom_point(aes(x = displ, y = hwy))
ggplot(data = fuel_data) +
geom_point(aes(x = displ, y = hwy, color = class))
ggplot(data = fuel_data) +
geom_point(aes(x = displ, y = hwy, color = year))
ggplot(data = fuel_data) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap(~class)
us_makes <- c("chevrolet","dodge","ford","jeep",
"lincoln","mercury","pontiac"
)
fuel_data <- mutate(fuel_data,
region = if_else(manufacturer %in% us_makes, "US", "Foreign"))
ggplot(data = fuel_data) +
geom_boxplot(x = region, y = hwy)
ggplot(data = fuel_data) +
geom_boxplot(aes(x = region, y = hwy))
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
View(df_met)
table_stats <- tibble(year = year_vec,
n_days = NA,
n_events = NA
)
year_vec <- seq(1939, 2021)
table_stats <- tibble(year = year_vec,
n_days = NA,
n_events = NA
)
View(table_stats)
threshold_min <- 32
for (i_year in year_vec) {
df_temp <- df_met[df_met$YEAR == i_year,]
i_count <- (sum(df_temp$TMIN <= threshold_min))
i_days <- nrow(df_temp)
table_stats$n_events[table_stats$year == i_year] <- i_count
table_stats$n_days[table_stats$year == i_year] <- i_days
}
View(table_stats)
table_stats %>%
ggplot(aes(x = year, y = n_events)) +
geom_point() + geom_smooth()
library(GSODR)
a<-GSODR::get_inventory()
View(a)
b <- get_GSOD(years = 2024, station = "725180-14735")
View(b)
b <- get_GSOD(years years = 2020:2024, station = "725180-14735")
b <- get_GSOD(years years = c(2020:2024), station = "725180-14735")
b <- get_GSOD(years years = seq(2020:2024), station = "725180-14735")
b <- get_GSOD(years = seq(2020:2024), station = "725180-14735")
b <- get_GSOD(years = 2020:2024, station = "725180-14735")
View(df_met)
b <- get_GSOD(years = 1939:1940, station = "725180-14735")
a <- c(1,2)
a <- c(1,2)
typeof(a)
class(a)
seq(10)
1:10
plot(cars)
plot(carz)
plot(car)
plot(cars)
a < 1
a <-1
b <-2
a1 <- "testdata"
a1 <- "test"
a <- "test"
rm(a1)
rm(a1)
a1 <- "test"
a <- "test"
rm(a1)
library(tidyverse)
dams_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Dams_FAO_SelectCols_LabData.csv")
library(tidyverse)
for(i in 1:10){
print(i)
}
majors_union <- c("Environmental Science","Geology","English",
"Chemistry","Math","History","Computer Science")
for(i_major in 1:7){
print(majors_union[i_major])
}
for(i_major in majors_union){
print(i_major)
}
counter_majors <- 0 # Initialize the variable to zero
for(i_major in majors_union){
print(i_major)
counter_majors <- counter_majors + 1 # add one to the counter everytime the loop is run
}
# Your code here
# below is a solution to the above exercise
month_list <- c("January","February","March","April","May",
"June","July","August","September","October","November","December")
day_list <- c(31,28,31,30,31,30,31,31,30,31,30,31)
for(i_mon in 1:length(month_list)){
print( paste(month_list[i_mon],"has",day_list[i_mon],"days") )
}
# Your code here
x_mat <- matrix(1:25, 5, 5, byrow = TRUE)
for(i_row in 1:5){
for(j_col in 1:5){
print(x_mat[i_row, j_col])
}
}
# Your code here
# Below is a solution to the above exercise
n_row <- nrow(x_mat)
n_col <- ncol(x_mat)
for(i_row in 1:n_row){
for(j_col in 1:n_col){
print(x_mat[i_row, j_col])
}
}
x_val <- 30  # initialize x_val
while(x_val > 10){
print(x_val)
x_val <- x_val - 1  # on each loop iteration, subtract 1 from x_val
}
# Your code here
library(readr)
Alb_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/Albany_Temperatures_Nov_2018.csv",
skip = 3)
num_days <- nrow(Alb_temps) # store the number of rows (days) to the num_days variable
freeze_temp <- 32 # water freezing temperature in degress F
for(i_day in 1:num_days){
if(Alb_temps$Avg[i_day] > freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Low risk of freezing"))
} else {
print(paste("On November", Alb_temps$Day[i_day], ": High risk of freezing"))
}
}
# Your code here
# Below is the solution to above exercise
for(i_day in 1:num_days){
if(Alb_temps$Avg[i_day] > freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Low risk of freezing"))
} else{
if(Alb_temps$Max[i_day] <= freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Extreme risk of freezing"))
} else{
print(paste("On November", Alb_temps$Day[i_day], ": High risk of freezing"))
}
}
}
# Below is the solution to above exercise
counter_extreme <- 0
counter_high <- 0
counter_low <- 0
for(i_day in 1:num_days){
if(Alb_temps$Avg[i_day] > freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Low risk of freezing"))
counter_low <- counter_low + 1 # count low risk days
} else{
if(Alb_temps$Max[i_day] <= freeze_temp){
print(paste("On November", Alb_temps$Day[i_day], ": Extreme risk of freezing"))
counter_extreme <- counter_extreme + 1 # count extreme risk days
} else{
print(paste("On November", Alb_temps$Day[i_day], ": High risk of freezing"))
counter_high <- counter_high + 1 # count high risk days
}
}
}
print(paste("Low risk days:", counter_low))
print(paste("High risk days:", counter_high))
print(paste("Extreme risk days:", counter_extreme))
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
View(df_met)
library(tidyverse)
library(gapminder)
gapminder
summary(gapminder)
gap_data <- gapminder
filter(gap_data, gdpPercap > 5000)
filter(gap_data, gdpPercap > 5000, year == 2007)
data_2007_highGDP <- filter(gap_data, gdpPercap > 5000, year == 2007)
filter(gap_data, gdpPercap > 5000, continent == "Asia")
# Your code here
filter(gap_data, country == "Canada" | country == "China")
filter(gap_data, country %in% c("Canada", "China"))
# Your code here
gap_data[gap_data$year == 2007 & gap_data$gdpPercap > 5000, ] # the old way in base R
filter(gap_data, year == 2007, gdpPercap > 5000) # with dplyr
gap_sorted <- arrange(gap_data, gdpPercap)
gap_sorted <- arrange(gap_data, desc(gdpPercap))
# Your code here
gap_sorted <- arrange(gap_data, continent, lifeExp)
# your code here
# Your code here
filter(gap_data, year == 2007, continent == "Asia") %>% arrange(gdpPercap)
gap_data %>% filter(year == 2007, continent == "Asia") %>% arrange(gdpPercap)
arrange(filter(gap_data, year == 2007, continent == "Asia"), gdpPercap) # without using pipe operator
select(gap_data, country, year, lifeExp, gdpPercap)
select(gap_data, country, year, lifeExp, GDP_percap = gdpPercap)
# Your code here
gap_data %>% select(-pop,-continent)
gap_data %>% filter(lifeExp <= 60, gdpPercap >= 10000)
gap_data %>% filter(lifeExp <= 60, gdpPercap >= 10000, year == 2007)
df_mpg <- mpg
df_mpg
View(df_mpg)
a <- df_mpg$manufacturer
a
a <- seq(0,99)
b <- seq(1,100)
c <- a/b
c
v1 <- c("a","b","c")
v2 <- c("d","e","f")
v3 <- paste(v1,v2)
v3
v4 <- c(v1,v2)
v4
vec_1 <- 0:99
vec_1
series_vector <- seq(99)
vec_sequence <- seq(0,99, by = 1)
vec_sequence
vec_seq <- seq(0,99, by = 1)
vec_num <- 0:99
vec_num <- 0:99
vec_denom <- 1:100
vec_fracs <- vec_num/vec_denom
print(vec_fracs)
seq(2,length(vec_fracs), by = 2)
vec_fracs[seq(2,length(vec_fracs), by = 2)]
vec_first <- c("a","b","c")
vec_last <- c("d","e","f")
vec_first
vec_last
vec_both <- c(vec_first, vec_last)
vec_both
paste(vec_last, vec_first, sep = ", ")
df_mpg <- mpg
library(tidyverse)
library(tidyverse)
df_mpg <- mpg
View(df_mpg)
library(tidyverse)
library(terra)
library(tmap)
library(sf)
dsm_raster <- rast("C:/Users/stahlm/Downloads/dsm.tif")
plot(dsm_raster)
tm_shape(dsm_raster) +
tm_raster(breaks = c(0,2.5,5,10,15,20))
tmap_mode("view")
tm_shape(dsm_raster) +
tm_raster(breaks = c(0,2.5,5,10,15,20))
tmap_mode("view")
tm_shape(dsm_raster) +
tm_raster(breaks = c(0,2.5,5,10,15,20), style = "cont") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
dsm_raster <- rast("C:/Users/stahlm/Downloads/dsm.tif")
ortho_raster <- rast("C:/Users/stahlm/Downloads/ortho.tif")
plot(dsm_raster)
plot(ortho_raster)
tmap_mode("view")
tm_shape(dsm_raster) +
tm_raster(breaks = c(0,2.5,5,10,15,20), style = "cont") +
tm_shape(ortho_raster) +
tm_rgb() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
tm_shape(ortho_raster, raster.downsample = F) +
tm_rgb() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief"))
terra::plot(ortho_raster)
terra::plot(dsm_raster)
dsm_raster
