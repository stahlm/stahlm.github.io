my_gap <- gapminder
dams_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Dams_FAO_SelectCols_LabData.csv")
dams_data <- rename(dams_data, country = Country)
my_gap <- filter(my_gap, year == 2007) %>%
select(-lifeExp, -continent, -year)
dams_enhanced <- left_join(dams_data, my_gap)
View(dams_enhanced)
library(tidyverse)
library(dataRetrieval)
CT_sites_gw <- readWQPsummary(
statecode = "CT",
siteType = "Stream"
)
View(CT_sites_gw)
CT_usgs_sites <- CT_sites_gw %>%
filter(Provider == "NWIS")
CT_usgs_sites <- CT_sites_gw %>%
filter(Provider == "NWIS", CharacteristicName == "Chloride")
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:10],
characteristicName = "Chloride",
service = "StationWQX3"
)
View(data_sites)
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:10],
characteristicName = "Chloride",
service = "ResultWQX3"
)
View(data_sites)
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:10],
characteristicName = "Chloride",
dataProfile = "narrow",
service = "ResultWQX3"
)
View(data_sites)
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:100],
characteristicName = "Chloride",
dataProfile = "narrow",
service = "ResultWQX3"
)
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:10],
characteristicName = "Chloride",
dataProfile = "narrow",
service = "ResultWQX3"
)
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:20],
characteristicName = "Chloride",
dataProfile = "narrow",
service = "ResultWQX3"
)
View(data_sites)
data_sites <- readWQPdata(siteid = CT_usgs_sites$MonitoringLocationIdentifier[1:40],
characteristicName = "Chloride",
dataProfile = "narrow",
service = "ResultWQX3"
)
View(data_sites)
sites_schdy <- whatNWISsites(countyCd = "36093",
parameterCd = c("00060","00065"),
service = "dv"
)
View(sites_schdy)
sites_what_data <- whatNWISdata(siteNumber = sites_schdy$site_no,
service = "dv",
parameterCd = c("00060","00065"),
statCd = "00003")
View(sites_what_data)
df_stream_data <- readNWISdv(siteNumbers = sites_what_data$site_no,
parameterCd = c("00060","00065"),
statCd = "00003")
View(df_stream_data)
df_stream_data <- df_stream_data %>%
renameNWISColumns()
df_stream_data %>%
filter(!is.na(Flow)) %>%
ggplot(aes(x =Date, y = Flow)) +
geom_line() +
facet_wrap(~ site_no, scales = "free")
df_stream_data %>%
filter(!is.na(Flow), year(Date) > 2020) %>%
ggplot(aes(x =Date, y = Flow)) +
geom_line() +
facet_wrap(~ site_no, scales = "free")
pCode <- c("00618")
NY_NO3_sites <- whatWQPdata(stateCd = "NY",
parameterCd = pCode,
startDate = "2015-01-01"
) %>%
pCode <- c("00618")
NY_NO3_sites <- whatWQPdata(stateCd = "NY",
parameterCd = pCode,
startDate = "2015-01-01"
) %>%
filter(ResolvedMonitoringLocationTypeName %in% c("Well", "Spring"))
View(NY_NO3_sites)
NY_NO3_recent_data <- readWQPqw(siteNumbers = NY_NO3_sites$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = "2015-01-01"
)
NY_NO3_recent_data <- readWQPqw(siteNumbers = NY_NO3_sites$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = "2015-01-01", legacy = F
)
NY_NO3_recent_data <- readWQPqw(siteNumbers = NY_NO3_sites$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = "2015-01-01", legacy = F
)
NY_NO3_recent_data <- readWQPqw(siteNumbers = NY_NO3_sites$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = "2015-01-01", legacy = T
)
View(NY_NO3_recent_data)
library(tidyverse)
library(lubridate)
library(leaflet)
# Let's also load in the `sf` and the `tmap` packages.  You will probably need to install these packages first.  FYI, both of these packages are used for spatial analysis and making maps.  We will learn much more about these topics in upcoming lectures.
library(sf)
library(tmap)
library(GSODR)
load(system.file("extdata", "isd_history.rda", package = "GSODR"))
library(leaflet)
map_gsod <- isd_history  %>% leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(~ LON, ~ LAT, popup = ~ STNID, clusterOptions = T)
map_gsod
map_gsod
met_df <- get_GSOD(years = 2023:2024, station = "681100-99999")
met_df %>%
ggplot() +
geom_line(aes(x = YEARMODA, y = MIN), color = "blue") +
geom_line(aes(x = YEARMODA, y = MAX), color = "red") +
labs(title = met_df$NAME[1],
x = "Date",
y = "Temperature (C)",
caption = paste("Data source GSOD station", met_df$STNID[1])
) +
theme_classic()
schdy_met_stations <- nearest_stations(LAT = 42.81,
LON = -73.94,
distance = 25)
schdy_met_stations
library(worldmet)
worldmet_site_df <- getMeta(plot = F)
getMeta(plot = T, returnMap = T)
getMeta(plot = T, returnMap = T)
worldmet_data <- importNOAA(code = "725180-14735",
year = 2024:2025)
worldmet_data %>%
ggplot(aes(x = date, y = air_temp)) +
geom_line() +
theme_bw()
worldmet_data %>%
ggplot(aes(x = date, y = RH)) +
geom_line() +
theme_bw()
library(dataRetrieval)
sites_schdy <- whatNWISsites(countyCd = "36093",
parameterCd = c("00060","00065"),
service = "dv"
)
sites_schdy
sites_what_data <- whatNWISdata(siteNumber = sites_schdy$site_no,
service = "dv",
parameterCd = c("00060","00065"),
statCd = "00003")
sites_what_data
fig_map <- sites_what_data %>%
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(~ dec_long_va, ~ dec_lat_va, popup = ~ station_nm)
fig_map
df_stream_data <- readNWISdv(siteNumbers = sites_what_data$site_no,
parameterCd = c("00060","00065"),
statCd = "00003")
df_stream_data <- df_stream_data %>%
renameNWISColumns()
df_stream_data %>%
filter(!is.na(GH)) %>% # remove NA gauge heights
ggplot(aes(x =Date, y = GH)) +
geom_line() +
facet_wrap(~ site_no, scales = "free")
df_stream_data %>%
filter(!is.na(Flow)) %>%
ggplot(aes(x =Date, y = Flow)) +
geom_line() +
facet_wrap(~ site_no, scales = "free")
parm_cd_df <- parameterCdFile
pCode <- c("00618")
NY_NO3_sites <- whatWQPdata(stateCd = "NY",
parameterCd = pCode,
startDate = "2015-01-01"
) %>%
filter(ResolvedMonitoringLocationTypeName %in% c("Well", "Spring"))
NY_NO3_recent_data <- readWQPqw(siteNumbers = NY_NO3_sites$MonitoringLocationIdentifier,
parameterCd = pCode,
startDate = "2015-01-01"
)
View(NY_NO3_sites)
View(NY_NO3_recent_data)
NY_NO3_recent_data_summary <- NY_NO3_recent_data %>%
filter(!is.na(ResultMeasureValue)) %>%  # remove rows with NA values for the measurement of interest
group_by(MonitoringLocationIdentifier) %>%
summarize(NO3_max = max(ResultMeasureValue, na.rm = T)) %>%
left_join(attr(NY_NO3_recent_data, "siteInfo")) # joining our water quality data with the data frame that contains site information
tmap_mode("view")
fig_map_NO3 <- NY_NO3_recent_data_summary %>%
filter(!is.na(LatitudeMeasure), !is.na(LongitudeMeasure)) %>%
st_as_sf(coords = c("LongitudeMeasure", "LatitudeMeasure")) %>%
tm_shape() +
tm_dots(col = "NO3_max", style = "quantile", size = 0.2, palette = "viridis")
fig_map_NO3
fig_map_NO3
earthquakes <- read_csv("https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2023-01-01%0000:00:00&endtime=2023-02-12%2023:59:59&minmagnitude=2.5&orderby=time")
earthquakes <- read_csv("https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2024-01-01%0000:00:00&endtime=2025-02-04%2023:59:59&minmagnitude=2.5&orderby=time")
earthquakes <- read_csv("https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2025-01-01%0000:00:00&endtime=2025-02-04%2023:59:59&minmagnitude=2.5&orderby=time")
head(earthquakes)
View(earthquakes)
map_world_data <- map_data("world")
earthquake_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 2.5 magnitude since the start of 2023",
subtitle = "Date window: 1-Jan to 12-Feb-2023",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
earthquake_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 2.5 magnitude since the start of 2025",
subtitle = "Date window: 1-Jan to 4-Feb-2025",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
library(tidyverse)
library(tmap)
library(sf)
library(elevatr)
library(tigris)
NY_counties <- counties(state = "NY",
cb = TRUE)
county_schenectady <- NY_counties %>%
filter(NAME == "Schenectady")
raster_elev <- get_elev_raster(county_schenectady,
z = 12,
clip = "locations")
terra::plot(raster_elev)
library(rnaturalearth)
borders_hires <- ne_countries(country = "Lesotho",
scale = "large",
returnclass = "sf")
raster_elev <- get_elev_raster(borders_hires,
z = 9,
clip = "locations")
raster_elev %>%
tm_shape() +
tm_raster(style = "cont", palette = terrain.colors(n = 10)) +
tm_shape(borders_hires) +
tm_borders()
library(climateR)
sf::sf_use_s2(FALSE)
border_NY <- ne_states(country = "United States of America", returnclass = "sf")
border_NY <- border_NY %>%
filter(name == "New York")
catalog %>%
filter(id == "prism_daily") %>%
select(varname, units, description)
p <- getPRISM(AOI = border_NY,
varname = c('tmin'),
startDate = "2023-02-04"
)
AOI = aoi_get(state = "NC")
library(AOI)
AOI = aoi_get(state = "NC")
plot(AOI$geometry)
system.time({
p = getGridMET(AOI,
varname = c('tmmx','tmmn'),
startDate = "2018-10-29")
})
plot(p)
plot(p$daily_minimum_temperature)
system.time({
p = getPRISM(AOI,
varname = c('tmin','tmax'),
startDate = "2018-10-29")
})
a<- catalog
View(a)
catalog %>%
filter(id == "gridmet") %>%
select(varname, units, description)
p <- getGridMET(AOI = border_NY,
varname = c("tmmn"),
startDate = "2023-02-04"
)
p <- p$daily_minimum_temperature
p <- terra::crop(p, border_NY)
p <- terra::mask(p, border_NY)
p %>%
tm_shape() +
tm_raster(palette = "Blues", n = 10) +
tm_shape(border_NY) +
tm_borders()
p
p
p <- p - 273.15
p %>%
tm_shape() +
tm_raster(palette = "Blues", n = 10) +
tm_shape(border_NY) +
tm_borders()
borders_hires <- rnaturalearth::ne_countries(country = "Lesotho",
scale = "large",
returnclass = "sf")
params %>%
filter(id == "terraclim_normals") %>%
select(varname, units, description)
catalog %>%
filter(id == "terraclim_normals") %>%
select(varname, units, description)
climate_raster <- getTerraClimNormals(
AOI = borders_hires,
varname = "ppt",
scenario = "19812010",
month = 1:12,
verbose = FALSE,
dryrun = FALSE
)
climate_raster <- climate_raster$ppt_19812010
climate_raster <- raster::crop(climate_raster, borders_hires)
climate_raster <- terra::crop(climate_raster, borders_hires)
climate_raster <- getTerraClimNormals(
AOI = borders_hires,
varname = "ppt",
scenario = "19812010",
month = 1:12,
verbose = T,
dryrun = FALSE
)
climate_raster <- climate_raster$ppt
climate_raster <- terra::crop(climate_raster, borders_hires)
climate_raster <- terra::mask(climate_raster, borders_hires)
climate_raster %>%
tm_shape() +
tm_raster(palette = "RdBu", n = 10) +
tm_shape(borders_hires) +
tm_borders()
lesotho_tot_prcp <- sum(climate_raster)
lesotho_tot_prcp$sum %>%
tm_shape() +
tm_raster(palette = "RdBu", n = 10) +
tm_shape(borders_hires) +
tm_borders()
climate_raster_monthly <- getTerraClim(AOI = borders_hires,
varname = "ppt",
startDate = "2021-01-01")
climate_raster_monthly <- climate_raster_monthly$ppt
climate_raster_monthly <- raster::crop(climate_raster_monthly, borders_hires)
climate_raster_monthly <- raster::mask(climate_raster_monthly, borders_hires)
climate_raster_monthly %>%
tm_shape() +
tm_raster(palette = "RdBu", n = 10) +
tm_shape(borders_hires) +
tm_borders()
## Basemaps
library(basemaps)
loc_path <- basemap_geotif(borders_hires,
map_service = "esri",
map_type = "world_imagery",
map_res = 1.0)
loc_path
loc_basemap <- raster::stack(loc_path)
loc_basemap
#raster::plotRGB(loc_basemap)
map_full <- tm_shape(loc_basemap) +
tm_rgb() +
tm_shape(borders_hires) +
tm_borders(col = "red")
map_full
loc_path <- basemap_geotif(border_NY,
map_service = "esri",
map_type = "world_imagery",
map_res = 1.0)
loc_path
loc_basemap <- raster::stack(loc_path)
loc_basemap
#raster::plotRGB(loc_basemap)
map_full <- tm_shape(loc_basemap) +
tm_rgb() +
tm_shape(border_NY) +
tm_borders(col = "red")
map_full
library(tidyverse)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(FactoMineR)
library(tmap)
library(sf)
set.seed(123)
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
table_cluster <- bangladesh_gw %>%
select(SAMPLE_ID,
Ba_mgL,
Ca_mgL,
Fe_mgL,
Mn_mgL,
K__mgL,
Mg_mgL,
Na_mgL,
Si_mgL,
SO4_mgL,
Sr_mgL) %>%
drop_na() # need to drop any samples with NA values since can't cluster sites with missing data
table_cluster <- column_to_rownames(table_cluster, var = "SAMPLE_ID")
table_cluster_scaled <- scale(table_cluster)
res.pca <- PCA(table_cluster_scaled,  graph = FALSE)
# Control variable colors using their contributions
fviz_pca_var(res.pca, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_nbclust(
table_cluster_scaled,
pam,
k.max = 10,
method = "wss",
diss = get_dist(table_cluster, method = "spearman")
#diss = get_dist(table_cluster, method = "euclidean")
)
n_clust = 6
#k_n <- kmeans(table_cluster_scaled, centers = n_clust, nstart = 100, iter.max = 15000)
k_n = cluster::pam(table_cluster_scaled, k = n_clust)
fig_cluster <- fviz_cluster(k_n, data = table_cluster_scaled, ellipse = T, palette = "Set2",
geom = "point") +
theme_classic()
fig_cluster
df_cluster_info <- tibble(SAMPLE_ID = row.names(table_cluster_scaled),
cluster_id = k_n$cluster)
bangladesh_gw <- bangladesh_gw %>%
left_join(df_cluster_info)
bangladesh_gw <- bangladesh_gw %>%
mutate(cluster_id = factor(cluster_id))
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = As_ugL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Fe_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = SO4_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Si_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = WELL_DEPTH_m, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
summary(bangladesh_gw$cluster_id)
sf_bangladesh_gw <- bangladesh_gw %>%
st_as_sf(coords = c("LONG_DEG", "LAT_DEG"))
tmap_mode("view")
sf_bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "cluster_id", palette = "Set2",
popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar()
sf_bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "cluster_id", palette = "Set2",
popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar()
