group_by(Month) %>%
summarise(month_mean = mean(Avg_Temp_F), month_max = max(Avg_Temp_F), month_min = min(Avg_Temp_F) )
table_annual <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(Year) %>%
summarise(annual_mean = mean(Avg_Temp_F))
fig_annual <- table_annual %>%
ggplot(aes(x = Year, y = annual_mean)) +
geom_line() +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Annual mean temperature:", state_to_select),
x = "",
y = "Annual Mean Temp (F)",
caption = "Data source: NOAA") +
theme_classic()
list(table_months, table_annual, fig_annual)
}
state_climate_summary(state_temps, "Massachusetts")
state_climate_summary <- function(climate_data, state_to_select){
table_months <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(MONTH) %>%
summarise(month_mean = mean(Avg_Temp_F), month_max = max(Avg_Temp_F), month_min = min(Avg_Temp_F) )
table_annual <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(Year) %>%
summarise(annual_mean = mean(Avg_Temp_F))
fig_annual <- table_annual %>%
ggplot(aes(x = Year, y = annual_mean)) +
geom_line() +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Annual mean temperature:", state_to_select),
x = "",
y = "Annual Mean Temp (F)",
caption = "Data source: NOAA") +
theme_classic()
list(table_months, table_annual, fig_annual)
}
state_climate_summary(state_temps, "Massachusetts")
state_climate_summary <- function(climate_data, state_to_select){
table_months <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(MONTH) %>%
summarise(month_mean = mean(Avg_Temp_F), month_max = max(Avg_Temp_F), month_min = min(Avg_Temp_F) )
table_annual <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(YEAR) %>%
summarise(annual_mean = mean(Avg_Temp_F))
fig_annual <- table_annual %>%
ggplot(aes(x = YEAR, y = annual_mean)) +
geom_line() +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Annual mean temperature:", state_to_select),
x = "",
y = "Annual Mean Temp (F)",
caption = "Data source: NOAA") +
theme_classic()
list(table_months, table_annual, fig_annual)
}
state_climate_summary(state_temps, "Massachusetts")
state_temps <- state_temps %>%
rename(Avg_Temp_F = Value) %>%
filter(YEAR < 2025)
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/noaa_cag_state_temperatures.csv")
state_temps <- state_temps %>%
rename(Avg_Temp_F = Value) %>%
filter(YEAR < 2025)
state_climate_summary <- function(climate_data, state_to_select){
table_months <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(MONTH) %>%
summarise(month_mean = mean(Avg_Temp_F), month_max = max(Avg_Temp_F), month_min = min(Avg_Temp_F) )
table_annual <- climate_data %>%
filter(STATE == state_to_select) %>%
group_by(YEAR) %>%
summarise(annual_mean = mean(Avg_Temp_F))
fig_annual <- table_annual %>%
ggplot(aes(x = YEAR, y = annual_mean)) +
geom_line() +
geom_point() +
geom_smooth(method = "lm") +
labs(title = paste("Annual mean temperature:", state_to_select),
x = "",
y = "Annual Mean Temp (F)",
caption = "Data source: NOAA") +
theme_classic()
list(table_months, table_annual, fig_annual)
}
state_climate_summary(state_temps, "Massachusetts")
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude = 2.5, start_time = "0000:00:00", end_time = "23:59:59"){
## Function info
#' @description this function queries and downloads earthquake data from the USGS Earthquakes Hazards Program real-time database of global earthquakes
#' @param start_date start date for your query.  Entered as a text string in the format "YYYY-MM-DD"
#'
## Function code
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?"
full_url <- paste0(base_url,"starttime=", start_date, "%", start_time, "&",
"endtime=", end_date, "%20", end_time, "&",
"minmagnitude=", min_magnitude, "&",
"orderby=time")
df_earthquakes <- read.csv(full_url)
}
a <- get_usgs_earthquakes(start_date = "2025-02-01", end_time = "2025-02-05")
a <- get_usgs_earthquakes(start_date = "2025-02-01", end_date = "2025-02-05")
library(worldmet)
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
worldmet_data_chicago <- worldmet_data_chicago %>%
filter(!is.na(RH), !is.na(air_temp))   # remove observations that are missing RH and/or air temp data
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
worldmet_data_samwawah <- importNOAA(code = "406740-99999",
year = 2015)
worldmet_data_samwawah <- worldmet_data_samwawah %>%
filter(!is.na(RH), !is.na(air_temp))   # remove observations that are missing RH and/or air temp data
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
worldmet_data_chicago <- worldmet_data_chicago %>%
filter(!is.na(RH), !is.na(air_temp))   # remove observations that are missing RH and/or air temp data
library(worldmet)
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
worldmet_data_chicago <- worldmet_data_chicago %>%
filter(!is.na(RH), !is.na(air_temp))   # remove observations that are missing RH and/or air temp data
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
library(tidyverse)
library(patchwork) # we'll use this for some figures in this class
library(worldmet)
worldmet_data_chicago <- importNOAA(code = "725300-94846",
year = 1995)
worldmet_data_chicago <- worldmet_data_chicago %>%
filter(!is.na(RH), !is.na(air_temp))   # remove observations that are missing RH and/or air temp data
library(tidyverse)
library(patchwork) # we'll use this for some figures in this class
cube_it <- function(cube_me){
# Function computes the cube of the input
# inputs: cube_me is the value to cube
# output: the cube of cube_me
cube_me^3 # take the cube of the input cube_me
}
cube_it(5)
cube_it(cube_me = 5)
pow_it <- function(base_val, exp_val){
# Raises an input value to a specified power
# inputs: base_val is the value to be raised to a power; exp_val is the exponent value
# output: base_val raised to the exp_val
base_val^exp_val
}
pow_it(base_val = 2, exp_val = 3)
pow_it(exp_val = 3, base_val = 2)
pow_it(2, 3)
F_to_C <- function(deg_F){
(deg_F - 32)*(5/9)
}
pow_it <- function(base_val, exp_val = 1){
base_val^exp_val
}
pow_it(base_val = 3)
pow_it(base_val = 3, exp_val = 3)
add_something <- function(my_number){
add_number <- 1
my_number + add_number
}
add_something(my_number = 5)
add_number <- 4
add_something(my_number = 5)
add_something <- function(my_number){
my_number + add_number
}
add_number <- 10
add_something(my_number = 5)
get_stats_bad <- function(input_data){
min(input_data)
max(input_data)
mean(input_data)
}
my_data <- tibble(x = runif(1000, min = 0, max = 50))  #generate a vector of 1000 random values between 0 and 50
get_stats_bad(my_data$x)
get_stats_good <- function(input_data){
# Computes basic statistics on a univariate dataset
# inputs: input_data is a vector of values
# outputs: list containing the min, max, and mean of the input_data
stat_min <- min(input_data)
stat_max <- max(input_data)
stat_mean <- mean(input_data)
c(stat_min, stat_max, stat_mean)
}
get_stats_good(my_data$x)
get_stats_good <- function(input_data){
stat_min <- min(input_data)
stat_max <- max(input_data)
stat_mean <- mean(input_data)
fig_hist <- ggplot() +
geom_histogram(aes(x = input_data)) +
theme_classic()
list(stat_min, stat_max, stat_mean, fig_hist)
}
get_stats_good(my_data$x)
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude = 2.5, start_time = "0000:00:00", end_time = "23:59:59"){
## Function info
# start_date: start date for your query.  Entered as a text string in the format "YYYY-MM-DD"
# end_date: end date for your query.  Entered as a text string in the format "YYYY-MM-DD"
# min_magnitude:
## Function code
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?"
full_url <- paste0(base_url,"starttime=", start_date, "%", start_time, "&",
"endtime=", end_date, "%20", end_time, "&",
"minmagnitude=", min_magnitude, "&",
"orderby=time")
df_earthquakes <- read.csv(full_url)
}
df_earthquakes <- get_usgs_earthquakes(start_date = "2025-02-01", end_date = "2025-02-25")
View(df_earthquakes)
head(df_earthquakes)
View(df_earthquakes)
get_stats_bad <- function(input_data){
min(input_data)
max(input_data)
mean(input_data)
}
x <- runif(1000, min = 0, max = 50)
get_stats_bad(x)
get_stats_good <- function(input_data){
# Computes basic statistics on a univariate dataset
# inputs: input_data is a vector of values
# outputs: list containing the min, max, and mean of the input_data
stat_min <- min(input_data)
stat_max <- max(input_data)
stat_mean <- mean(input_data)
c(stat_min, stat_max, stat_mean)
}
get_stats_good(x)
library(tidyverse)
cube_it <- function(cube_me){
# This function cubes the number you give it
# inputs: cube_me is a number that should be cubed
# output: is the cube of cube_me
cube_me^3
}
cube_it(5)
cube_it(cube_me = 5)
pow_it <- function(base_val, exp_val){
base_val^exp_val
}
pow_it(base_val = 2, exp_val = 3)
pow_it(base_val = 5, exp_val = 4)
pow_it(base_val = 5, exp_val = 4)
pow_it(5, 4)
pow_it(exp_val = 4, base_val = 5)
pow_it(base_val = 3)
pow_it <- function(base_val, exp_val = 1){
base_val^exp_val
}
pow_it(base_val = 3)
pow_it(base_val = 3, exp_val = 4)
test_num <- 5
add_something <- function(my_number){
add_number <- 1
my_number + add_number
}
get_stats_bad <- function(input_data){
min(input_data)
max(input_data)
mean(input_data)
}
x <- runif(n = 1000, min = 0, max = 50)
x <- runif(n = 1000, min = 0, max = 50)
x
get_stats_bad(x)
get_stats_good <- function(input_data){
stat_min <- min(input_data, na.rm = T)
stat_max <- max(input_data, na.rm = T)
stat_mean <- mean(input_data, na.rm = T)
c(stat_min, stat_max, stat_mean)
}
get_stats_good(x)
get_stats_very_good <- function(input_data){
stat_min <- min(input_data, na.rm = T)
stat_max <- max(input_data, na.rm = T)
stat_mean <- mean(input_data, na.rm = T)
fig_hist <- ggplot() +
geom_histogram(aes(x = input_data)) +
theme_classic()
list(stat_min, stat_max, stat_mean, fig_hist)
}
get_stats_very_good(x)
get_stats_very_good <- function(input_data){
stat_min <- paste("The min is:", min(input_data, na.rm = T) )
stat_max <- max(input_data, na.rm = T)
stat_mean <- mean(input_data, na.rm = T)
fig_hist <- ggplot() +
geom_histogram(aes(x = input_data)) +
theme_classic()
list(stat_min,
stat_max,
stat_mean,
fig_hist)
}
get_stats_very_good(x)
get_stats_very_good(x)
my_url <- paste0("www.google", ".com")
my_url
base_url <- "www.google"
my_url <- paste0(base_url, ".com")
my_url
base_url <- "www.google"
user_val <- ".com"
my_url <- paste0(base_url, user_val)
my_url
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude = 2.5, start_time = "0000:00:00", end_time = "23:59:59"){
## Function info
# start_date: start date for your query.  Entered as a text string in the format "YYYY-MM-DD"
# end_date: end date for your query.  Entered as a text string in the format "YYYY-MM-DD"
# min_magnitude:
## Function code
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?"
full_url <- paste0(base_url,"starttime=", start_date, "%", start_time, "&",
"endtime=", end_date, "%20", end_time, "&",
"minmagnitude=", min_magnitude, "&",
"orderby=time")
df_earthquakes <- read.csv(full_url)
}
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude = 2.5, start_time = "00:00:00", end_time = "23:59:59"){
## Function info
# start_date: start date for your query.  Entered as a text string in the format "YYYY-MM-DD"
# end_date: end date for your query.  Entered as a text string in the format "YYYY-MM-DD"
# min_magnitude:
## Function code
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?"
full_url <- paste0(base_url,"starttime=", start_date, "%20", start_time, "&",
"endtime=", end_date, "%20", end_time, "&",
"minmagnitude=", min_magnitude, "&",
"orderby=time")
df_earthquakes <- read.csv(full_url)
}
df_earthquakes <- get_usgs_earthquakes(start_date = "2025-02-01", end_date = "2025-02-25")
df_earthquakes <- get_usgs_earthquakes(start_date = "2024-02-01", end_date = "2024-02-25")
View(df_earthquakes)
df_earthquakes <- get_usgs_earthquakes(start_date = "2024-02-01", end_date = "2025-02-25")
df_earthquakes <- get_usgs_earthquakes(start_date = "2024-02-01", end_date = "2024-04-25")
df_earthquakes <- get_usgs_earthquakes(start_date = "2024-02-01", end_date = "2025-02-25", min_magnitude = 6)
View(df_earthquakes)
df_earthquakes <- get_usgs_earthquakes(start_date = "2020-02-01", end_date = "2025-02-25", min_magnitude = 6.5)
df_earthquakes <- get_usgs_earthquakes(start_date = "2000-02-01", end_date = "2025-02-25", min_magnitude = 6.5)
View(df_earthquakes)
df_earthquakes <- get_usgs_earthquakes(start_date = "1970-02-01", end_date = "2025-02-25", min_magnitude = 7.5)
df_earthquakes <- get_usgs_earthquakes(start_date = "1950-02-01", end_date = "2025-02-25", min_magnitude = 7.5)
df_earthquakes <- get_usgs_earthquakes(start_date = "1950-02-01", end_date = "2025-02-25", min_magnitude = 2.5)
df_earthquakes <- get_usgs_earthquakes(start_date = "2024-02-01", end_date = "2025-02-25", min_magnitude = 5)
library(tidyverse)
library(patchwork) # we'll use this for some figures in this class
cube_it <- function(cube_me){
# Function computes the cube of the input
# inputs: cube_me is the value to cube
# output: the cube of cube_me
cube_me^3 # take the cube of the input cube_me
}
cube_it(5)
cube_it(cube_me = 5)
pow_it <- function(base_val, exp_val){
# Raises an input value to a specified power
# inputs: base_val is the value to be raised to a power; exp_val is the exponent value
# output: base_val raised to the exp_val
base_val^exp_val
}
pow_it(base_val = 2, exp_val = 3)
pow_it(exp_val = 3, base_val = 2)
pow_it(2, 3)
F_to_C <- function(deg_F){
(deg_F - 32)*(5/9)
}
pow_it <- function(base_val, exp_val = 1){
base_val^exp_val
}
pow_it(base_val = 3)
pow_it(base_val = 3, exp_val = 3)
add_something <- function(my_number){
add_number <- 1
my_number + add_number
}
add_something(my_number = 5)
add_number <- 4
add_something(my_number = 5)
add_something <- function(my_number){
my_number + add_number
}
add_number <- 10
add_something(my_number = 5)
get_stats_bad <- function(input_data){
min(input_data)
max(input_data)
mean(input_data)
}
x = runif(1000, min = 0, max = 50) #generate a vector of 1000 random values between 0 and 50
get_stats_bad(x)
get_stats_good <- function(input_data){
# Computes basic statistics on a univariate dataset
# inputs: input_data is a vector of values
# outputs: list containing the min, max, and mean of the input_data
stat_min <- min(input_data)
stat_max <- max(input_data)
stat_mean <- mean(input_data)
c(stat_min, stat_max, stat_mean)
}
get_stats_good(x)
get_stats_good <- function(input_data){
stat_min <- min(input_data)
stat_max <- max(input_data)
stat_mean <- mean(input_data)
fig_hist <- ggplot() +
geom_histogram(aes(x = input_data)) +
theme_classic()
list(stat_min, stat_max, stat_mean, fig_hist)
}
get_stats_good(x)
base_url <- "www.google"
user_val <- ".com"
my_url <- paste0(base_url, user_val)
my_url
library(tidyverse)
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude){
}
paste("a", "b")
paste0("a", "b")
paste("a", "b", sep = "")
paste("a", "b", sep = "-")
paste("a", "b", sep = "")
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude){
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime="
full_url <- paste0(base_url,
start_date,
"%2000:00:00&endtime=",
end_date,
"2023:59:59&minmagnitude=",
min_magnitude,
"&orderby=time"
)
full_url
}
get_usgs_earthquakes(start_date = "2025-01-01",
end_date = "2025-01-20",
min_magnitude = 2.5)
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude){
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime="
full_url <- paste0(base_url,
start_date,
"%2000:00:00&endtime=",
end_date,
"%2023:59:59&minmagnitude=",
min_magnitude,
"&orderby=time"
)
full_url
}
get_usgs_earthquakes(start_date = "2025-01-01",
end_date = "2025-01-20",
min_magnitude = 2.5)
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude){
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime="
full_url <- paste0(base_url,
start_date,
"%2000:00:00&endtime=",
end_date,
"%2023:59:59&minmagnitude=",
min_magnitude,
"&orderby=time"
)
df_earthquakes <- read.csv(full_url)
}
get_usgs_earthquakes(start_date = "2025-01-01",
end_date = "2025-01-20",
min_magnitude = 2.5)
df_eq <- get_usgs_earthquakes(start_date = "2025-01-01",
end_date = "2025-01-20",
min_magnitude = 2.5)
View(df_eq)
df_eq <- get_usgs_earthquakes(start_date = "2010-01-01",
end_date = "2010-01-20",
min_magnitude = 2.5)
df_eq <- get_usgs_earthquakes(start_date = "2010-01-01",
end_date = "2010-01-20",
min_magnitude = 2.5)
df_eq
get_usgs_earthquakes <- function(start_date, end_date, min_magnitude = 2.5){
base_url <- "https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime="
full_url <- paste0(base_url,
start_date,
"%2000:00:00&endtime=",
end_date,
"%2023:59:59&minmagnitude=",
min_magnitude,
"&orderby=time"
)
df_earthquakes <- read.csv(full_url)
}
df_eq <- get_usgs_earthquakes(start_date = "2010-01-01",
end_date = "2010-01-20")
df_eq
df_eq <- get_usgs_earthquakes(start_date = "2010-01-01",
end_date = "2010-01-20",
min_magnitude = 4)
df_eq
aoi_get(x = list("Schenectady, NY", 10, 10, "lowerleft"))
library(AOI)
aoi_get(x = list("Schenectady, NY", 10, 10, "lowerleft"))
aoi_get(x = list("Saddleback Mountain, NY", 10, 10, "lowerleft"))
