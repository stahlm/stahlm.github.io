---
title: "In class examples (ENS-215)"
output: html_notebook
---

## 17-Jan-2025
```{r}
library(tidyverse)
```


```{r}
df_met <- read_csv("https://github.com/stahlm/stahlm.github.io/raw/master/ENS_215/Data/Albany_GHCND_2840632.csv")
```

Count in each year from 1939 through 2021, the number of days where TMIN <= 32
```{r}
year_vec <- seq(1939, 2021)
year_vec
```


```{r}
table_stats <- tibble(year = year_vec,
                      n_days = NA,
                      n_events = NA)
```


```{r}
threshold_min <- 32
```


```{r}
for (i_year in year_vec) {
  
  df_temp <- df_met[df_met$YEAR == i_year, ] # current year's data
  
  i_count <- sum(df_temp$TMIN <= threshold_min)
  #print(i_count)
  
  i_days <- nrow(df_temp)
  #print(i_days)
  
  table_stats$n_events[table_stats$year == i_year] <- i_count
  table_stats$n_days[table_stats$year == i_year] <- i_days
}
```

```{r}
table_stats %>%
  ggplot(aes(x = year, y = n_events)) + 
  geom_point() + geom_smooth()
```

```{r}
library(gapminder)
gap_data <- gapminder

```


```{r}
gap_data %>% 
  filter(country %in% c("China", "Spain"))
```


```{r}
filter(gap_data, country == "China"| country == "Spain")
```







## 20-Jan-2025
```{r}
library(tidyverse)
library(gapminder)
```

```{r}
gap_data <- gapminder
```


```{r}
gap_question1 <- gap_data %>% 
  arrange(continent, lifeExp) %>% 
  filter(year > 1980, 
         continent %in% c("Asia", "Africa")) 

gap_question1
  
```


```{r}
df_gap2 <- gap_data %>% 
  filter(year == 2007,
         lifeExp < 60,
         gdpPercap > 10000
         ) %>% 
  select(-continent)

df_gap2
```

```{r}
#mean_lifeExp <- mean(gap_data$lifeExp, na.rm = T)
#mean_lifeExp

df_q3 <- gap_data %>% 
  filter(lifeExp > mean(lifeExp), 
         pop > 20*10^6
         )


```

```{r}
df_q4 <- gap_data %>% 
  filter(year == 1977) %>% 
  select(-continent, -pop, -gdpPercap) 

df_q4
```


```{r}
gap_data %>% 
  filter(year == 1977) %>% 
  arrange(lifeExp) %>% 
  slice(1)
```

```{r}
gap_data %>% 
  filter(year == 1977) %>% 
  filter(lifeExp == min(lifeExp))
```

```{r}
df_q5 <- gap_data %>% 
  filter(year == 2007, continent == "Europe") %>% 
  arrange(lifeExp) %>% 
  select(-pop, -gdpPercap)

df_q5
```

```{r}
df_q6 <- gap_data %>% 
  mutate(tot_gdp = pop*gdpPercap) %>% 
  filter(year == 2007) %>% 
  arrange(desc(tot_gdp))

df_q6
```





## 24-Jan-2024
```{r}
library(tidyverse)
library(gapminder)
```

```{r}
gap_data <- gapminder
```







```{r}
gap_data %>% 
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point()
```


```{r}
gap_data %>% 
  filter(country == "China") %>% 
  ggplot(aes(x = year, y = pop)) +
  geom_line() +
  geom_point()

```

```{r}
gap_data %>% 
  filter(year == 2007) %>% 
  ggplot(aes(x = continent)) +
  geom_bar()
```



## 27-Jan-2025
```{r}
library(tidyverse)
library(gapminder)
```

```{r}
gap_data <- gapminder
```



```{r}
gap_data %>% 
  filter(country == "China") %>% 
  ggplot(aes(x = year, y = gdpPercap, linewidth = pop)) +
  geom_line(color = "blue")
```


```{r}
gap_data %>% 
  ggplot(aes(x = year, y = gdpPercap)) + 
  geom_point() +
  
  ylim(0,60000)
```


```{r}
gap_data %>% 
  ggplot(aes(x = factor(year), y = gdpPercap)) + 
  geom_boxplot() +
  geom_jitter(width = 0.7, height = 0) +
  
  coord_cartesian(ylim= c(0,60000))
```


## 29-Jan-2025
```{r}
library(tidyverse)
library(gapminder)
```

```{r}
gap_data <- gapminder
```


```{r}
gap_data %>% 
  ggplot(aes(x = year, y = lifeExp, 
             fill = continent, size = pop)) +
  geom_jitter(height = 0, width = 0.7, shape = 21)
```



```{r}
gap_data %>% 
  filter(year == 2007) %>% 
  ggplot(aes(x = continent, y = lifeExp)) +
  
  geom_boxplot(fill = "lightblue") +
  geom_jitter(alpha = 0.5, width = 0.2, height = 0)
```

```{r}
top_2 <- gap_data %>% 
  filter(year == 2007) %>% 
  top_n(2, lifeExp)

top_2

bottom_2 <- gap_data %>% 
  filter(year == 2007) %>% 
  top_n(-2, lifeExp)

bottom_2
```

```{r}
gap_data %>% 
  filter(country %in% top_2$country | country %in% bottom_2$country) %>% 
  ggplot(aes(x = year, y = lifeExp, color = country)) +
  geom_point() +
  geom_line()
```


## 31-Jan-2025 

```{r}
library(tidyverse)
library(gapminder)
```

```{r}
my_gap <- gapminder
```


```{r}
global_mean_gdp <- my_gap %>% 
  group_by(year) %>% 
  summarize(mean_gdp_percap = mean(gdpPercap))

global_mean_gdp
```


```{r}
my_gap %>% 
  # first plot all countries
  ggplot(aes(x = year, y = gdpPercap, group = country)) +
  geom_line(alpha = 0.4) +
  geom_point(alpha = 0.25) + 
  
  # now add global mean time-series
  geom_line(data = global_mean_gdp, 
            aes(x = year, y = mean_gdp_percap, group = NA),
            color = "blue"
            ) +
  
  geom_point(data = global_mean_gdp, 
            aes(x = year, y = mean_gdp_percap, group = NA),
            color = "blue"
            ) +
  
  coord_cartesian(ylim = c(0,50000)) +
  
  theme_bw() +
  
  facet_wrap(~continent)
```


## 3-Feb-2025 

```{r}
library(tidyverse)
library(gapminder)

library(scales)
```


```{r}
my_gap <- gapminder
```


```{r}
my_gap %>% 
  filter(continent == "Europe", year == 2007) %>% 
  ggplot(aes(x = reorder(country, pop), y = pop/10^6, color = pop/10^6)) +
  
  geom_point() +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
  
  labs(y = "Population (millions)", 
       x = "",
       title = "Population of European Countries",
       subtitle = "Year 2007",
       caption = "Data source: Gapminder",
       color = "Population"
       )
```


```{r}
my_table <- my_gap %>% 
  filter(year %in% c(1952,2007)) %>% 
  group_by(country) %>% 
  arrange(country, year) %>% 
  summarize(continent = first(continent),
            gdp_1952 = first(gdpPercap),
            gdp_2007 = last(gdpPercap)
            )
```


```{r}
my_table %>% 
  ggplot(aes(x = gdp_1952, y = gdp_2007)) +
  geom_point(alpha = 0.5) +
  
  geom_abline(slope = 1, intercept = 0, color = "red") +
  coord_equal(ratio = 1) +
  
  facet_wrap(~continent)
```

```{r}
my_table %>% 
    ggplot(aes(x = gdp_1952, y = gdp_2007, color = continent)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, color = "red") +
  theme_bw() +
  scale_x_log10(labels = trans_format('log10', math_format(10^.x)) ) +
  scale_y_log10(labels = trans_format('log10', math_format(10^.x)), breaks = c(10^3, 10^4, 10^5) ) +
  coord_equal(ratio = 1) +
  facet_wrap(~continent) +
  labs(x = "GDP per capita 1952 ($)",
       y = "GDP per capita 2007 ($)",
       title = "Per capita GDP over time",
       subtitle = "Change between 1952 and 2007",
       caption = "Data source: gapminder"
  ) +
  theme(legend.position = "none")
```


```{r}
my_gap %>% 
  filter(continent == "Asia", year %in% c(1952, 2007)) %>% 
  ggplot(aes(x = lifeExp,
             y = reorder(country, lifeExp, FUN = max),
             group = country,
             )) +
  
  geom_point(aes(color = year)) +
  geom_line() +
  
  scale_color_continuous(low = "darkgrey", high = "black") +
  
  theme_classic() +
  theme(legend.position = "none") + 
  labs(title = "Change in life expectancy in Asia ",
       subtitle = "1952 to 2007",
       x = "Life expectancy (yrs)",
       y = "",
       caption = "1952 data (grey) and 2007 data (black)") 
```














```{r}
library(tidyverse)
```

```{r}
precip_untidy_MA <- read_csv("https://stahlm.github.io/ENS_215/Data/precip_untidy_MA.csv")
```
```{r}
precip_tidy_MA <- precip_untidy_MA %>% 
  pivot_longer(cols = month.abb, 
               names_to = "Month",
               values_to = "Precip_inches"
               )

precip_tidy_MA
```







## 5-Feb-2025 and 7-Feb-2025
```{r}
library(tidyverse)
```


### Ex 1
```{r}
precip_untidy_MA <- read_csv("https://stahlm.github.io/ENS_215/Data/precip_untidy_MA.csv")

precip_untidy_MA
```

```{r}
precip_tidy_MA <- precip_untidy_MA %>% 
  pivot_longer(cols = month.abb, 
               names_to = "Month",
               values_to = "Precip_inches")

precip_tidy_MA
```



### Ex 2
```{r}
precip_temp_untidy_CA <- read_csv("https://stahlm.github.io/ENS_215/Data/CA_temp_precip_untidy.csv")

precip_temp_untidy_CA %>% arrange(Year, Month, state_cd)
```

```{r}
precip_temp_tidy_CA <- precip_temp_untidy_CA %>% 
  pivot_wider(names_from = measurement_type,
              values_from = measurement
              )

precip_temp_tidy_CA
```



### Ex 3
```{r}
precip_MA <- read_csv("https://stahlm.github.io/ENS_215/Data/precip_MA.csv")

precip_NY <- read_csv("https://stahlm.github.io/ENS_215/Data/precip_NY.csv")
```

```{r}
precip_combined <- bind_rows(precip_MA, precip_NY)
```



### Ex 4
```{r eval = FALSE}
library(gapminder) 

my_gap <- gapminder
dams_data <- read_csv("https://stahlm.github.io/ENS_215/Data/Dams_FAO_SelectCols_LabData.csv")
```

```{r}
my_gap <- my_gap %>% 
  filter(year == 2007)
```

```{r}
my_gap <- my_gap %>% 
  select(-year)
```

```{r}
my_gap <- my_gap %>% 
  rename(Country = country)

```


```{r}
gap_dams <- dams_data %>% 
  left_join(my_gap)
```





```{r eval=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
dams_data <- rename(dams_data, country = Country)

my_gap <- filter(my_gap, year == 2007) %>% 
  select(-lifeExp, -continent, -year)

dams_enhanced <- left_join(dams_data, my_gap)
```


## 10-Feb-2025
```{r}
library(tidyverse)
library(patchwork)

library(lubridate)
```

```{r}
map_data_usa <- map_data("state")
```


```{r}
map_us <- map_data_usa %>% 
  ggplot() +
  geom_polygon(aes(x = long, y = lat, group = group),
               color = "black", fill = "grey"
               )

map_us
```



## 12-Feb-2025

```{r}
library(tidyverse)
```

### Earthquake map
```{r}
earthquakes <- read_csv("https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2025-01-01%0000:00:00&endtime=2025-02-08%2023:59:59&minmagnitude=2.5&orderby=time")
```


```{r}
map_world_data <- map_data("world")
```


```{r}
earthquake_map <- map_world_data %>% 
  ggplot() +
  geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
  geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
             shape = 21, fill = "NA", stroke = 1.5) + 
  scale_color_gradient(low = "blue", high = "red") +
  
  labs(title = "Earthquakes > 2.5 magnitude since the start of 2025",
       subtitle = "Date window: 1-Jan to 8-Feb-2025",
       caption = "Data source: USGS") +
  
  theme_void() +
  coord_quickmap()

earthquake_map
```



### choropleth of state temperatures


#### Get the data we need
```{r message = FALSE}
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
```

```{r}
state_name_table = tibble(state_name = tolower(state.name), 
                          state_cd = state.abb, us_region = state.region)
```

```{r}
map_data_usa <- map_data("state") # get data frame with the spatial data for borders of lower 48 states
```


#### Perform data analysis 
```{r echo=T, message=FALSE}
state_mean_temps_pre <- state_temps %>% 
  filter(Year <= 1960) %>% 
  group_by(state_cd) %>% 
  summarize(mean_temp_pre = mean(Avg_Temp_F))

```


```{r echo=T, message=FALSE}
state_mean_temps_post <- state_temps %>% 
  filter(Year > 1960) %>% 
  group_by(state_cd) %>% 
  summarize(mean_temp_post = mean(Avg_Temp_F))

```



```{r echo=T, message=FALSE}
state_mean_temps_change <- left_join(state_mean_temps_post, state_mean_temps_pre) %>% 
  mutate(temp_change = mean_temp_post - mean_temp_pre)

```

```{r echo=T, message=FALSE}
state_mean_temps_change <- left_join(state_mean_temps_change, state_name_table) 
```


```{r echo=T, message=FALSE}
state_mean_temps_change <- state_mean_temps_change %>% 
  rename(region = state_name)
```


```{r echo=T, message=FALSE}
map_data_usa_temps_change <- left_join(map_data_usa, state_mean_temps_change)
```


Below is what my map looks like
```{r echo=T}
map_data_usa_temps_change %>% 
  ggplot() + 
  geom_polygon(aes(long, lat, group = group, fill = temp_change), color = "black") +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
  coord_map(projection = "bonne", lat0 = 50) +
  labs(title = "Changes in mean temperature",
       subtitle = "Difference between post and pre-1960 means",
       caption = "Data source: NOAA",
       fill = "Temp. increase (deg. F)") +
  theme_void() 
```



## 14-Feb-2025
```{r}
library(tmap)
library(terra)
library(tmap)
library(elevatr)
library(AOI)
```

```{r}
aoi2use <- AOI::aoi_get(state = "NY", county = "Schenectady")
```

```{r}
r_elev_08 <- get_elev_raster(locations = aoi2use, z = 8)

r_elev_08
```

```{r}
r_elev_13 <- get_elev_raster(locations = aoi2use, z = 13)

r_elev_13
```


```{r}
terra::plot(r_elev_08)
```

```{r}
terra::plot(r_elev_13)
```


```{r}
my_raster <- rast("./World_elev.tif")
```


```{r}
global(my_raster, fun = "mean", na.rm = T)
```



