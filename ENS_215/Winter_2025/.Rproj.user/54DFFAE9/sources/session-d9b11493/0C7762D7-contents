
## inputs
# data_in: data frame with data to map
# var2use: string referring to the variable to be mapped (e.g. "Sr__mM")

Make_interactive_map_any <- function(data_in, var2use){

  water_quality_data <- data_in
  
  water_quality_data <- water_quality_data %>% 
    filter(!is.na(get(var2use)))
  
  ## Define color scheme
  bgs_color_scheme_As = c("#003deeff",
                          "#2498ffff",
                          "#4cbeffff",
                          "#89ddffff",
                          "#67ff4dff",
                          "#ffb578ff",
                          "#ffb675ff",
                          "#ff9813ff",
                          "#ff1200ff",
                          "#d80000ff")
  
  var_value <- water_quality_data[var2use]
  var_quantiles <- stats::quantile(var_value, 
                                   probs = seq(0,1,0.1),
                                   na.rm = T)
  
  epsilon <- .Machine$double.eps
  
  ## Define colors for interactive map
  
  water_quality_data <- water_quality_data %>% 
    mutate(Var_fill_color_r = case_when(
      get(var2use)< var_quantiles[2]   ~ col2rgb(bgs_color_scheme_As[1])[1],
      between(get(var2use),  var_quantiles[2], var_quantiles[3]-epsilon)   ~ col2rgb(bgs_color_scheme_As[2])[1],
      between(get(var2use),  var_quantiles[3], var_quantiles[4]-epsilon)   ~ col2rgb(bgs_color_scheme_As[3])[1],
      between(get(var2use),  var_quantiles[4], var_quantiles[5]-epsilon)   ~ col2rgb(bgs_color_scheme_As[4])[1],
      between(get(var2use),  var_quantiles[5], var_quantiles[6]-epsilon)   ~ col2rgb(bgs_color_scheme_As[5])[1],
      between(get(var2use),  var_quantiles[6], var_quantiles[7]-epsilon)   ~ col2rgb(bgs_color_scheme_As[6])[1],
      between(get(var2use),  var_quantiles[7], var_quantiles[8]-epsilon)   ~ col2rgb(bgs_color_scheme_As[7])[1],
      between(get(var2use),  var_quantiles[8], var_quantiles[9]-epsilon)   ~ col2rgb(bgs_color_scheme_As[8])[1],
      between(get(var2use),  var_quantiles[9], var_quantiles[10]-epsilon)   ~ col2rgb(bgs_color_scheme_As[9])[1],
      between(get(var2use),  var_quantiles[10], var_quantiles[11]-epsilon)   ~ col2rgb(bgs_color_scheme_As[10])[1]
    ))
  
  water_quality_data <- water_quality_data %>% 
    mutate(Var_fill_color_g = case_when(
      get(var2use)< var_quantiles[2]   ~ col2rgb(bgs_color_scheme_As[1])[2],
      between(get(var2use),  var_quantiles[2], var_quantiles[3]-epsilon)   ~ col2rgb(bgs_color_scheme_As[2])[2],
      between(get(var2use),  var_quantiles[3], var_quantiles[4]-epsilon)   ~ col2rgb(bgs_color_scheme_As[3])[2],
      between(get(var2use),  var_quantiles[4], var_quantiles[5]-epsilon)   ~ col2rgb(bgs_color_scheme_As[4])[2],
      between(get(var2use),  var_quantiles[5], var_quantiles[6]-epsilon)   ~ col2rgb(bgs_color_scheme_As[5])[2],
      between(get(var2use),  var_quantiles[6], var_quantiles[7]-epsilon)   ~ col2rgb(bgs_color_scheme_As[6])[2],
      between(get(var2use),  var_quantiles[7], var_quantiles[8]-epsilon)   ~ col2rgb(bgs_color_scheme_As[7])[2],
      between(get(var2use),  var_quantiles[8], var_quantiles[9]-epsilon)   ~ col2rgb(bgs_color_scheme_As[8])[2],
      between(get(var2use),  var_quantiles[9], var_quantiles[10]-epsilon)   ~ col2rgb(bgs_color_scheme_As[9])[2],
      between(get(var2use),  var_quantiles[10], var_quantiles[11]-epsilon)   ~ col2rgb(bgs_color_scheme_As[10])[2]
    ))
  
  water_quality_data <- water_quality_data %>% 
    mutate(Var_fill_color_b = case_when(
      get(var2use)< var_quantiles[2]   ~ col2rgb(bgs_color_scheme_As[1])[3],
      between(get(var2use),  var_quantiles[2], var_quantiles[3]-epsilon)   ~ col2rgb(bgs_color_scheme_As[2])[3],
      between(get(var2use),  var_quantiles[3], var_quantiles[4]-epsilon)   ~ col2rgb(bgs_color_scheme_As[3])[3],
      between(get(var2use),  var_quantiles[4], var_quantiles[5]-epsilon)   ~ col2rgb(bgs_color_scheme_As[4])[3],
      between(get(var2use),  var_quantiles[5], var_quantiles[6]-epsilon)   ~ col2rgb(bgs_color_scheme_As[5])[3],
      between(get(var2use),  var_quantiles[6], var_quantiles[7]-epsilon)   ~ col2rgb(bgs_color_scheme_As[6])[3],
      between(get(var2use),  var_quantiles[7], var_quantiles[8]-epsilon)   ~ col2rgb(bgs_color_scheme_As[7])[3],
      between(get(var2use),  var_quantiles[8], var_quantiles[9]-epsilon)   ~ col2rgb(bgs_color_scheme_As[8])[3],
      between(get(var2use),  var_quantiles[9], var_quantiles[10]-epsilon)   ~ col2rgb(bgs_color_scheme_As[9])[3],
      between(get(var2use),  var_quantiles[10], var_quantiles[11]-epsilon)   ~ col2rgb(bgs_color_scheme_As[10])[3]
    ))
  
  
  ## Make interactive map
  
  map_pts <- water_quality_data %>% 
    dplyr::select(Lat, Long, Study_ID, 
                  Country, Category_As_many, As__ppb, Category_Depth, Depth__m, var2use,
                  Var_fill_color_r, Var_fill_color_g, Var_fill_color_b) %>% 
    filter(!is.na(Lat),
           !is.na(Long)) 
  
  map_pts <- map_pts %>% 
    mutate(As__ppb = round(As__ppb, 1),
           Info_string = paste("Depth (m) = ", round(Depth__m, 1),
                               "; ", var2use, " = ", get(var2use), sep = "") )
  
  map_colors <- dplyr::select(map_pts, 
                              Var_fill_color_r, Var_fill_color_g, Var_fill_color_b)
  
  map_colors <- data.matrix(map_colors/255)
  
  map_pts <- st_as_sf(map_pts, coords = c("Long","Lat"), crs = 4326)
  
  
  map_leaflet <- leaflet() %>% 
    addProviderTiles(providers$Esri.NatGeoWorldMap, group = "Map") %>%
    addProviderTiles(providers$Esri.WorldImagery, group = "Satellite") %>%
    addGlPoints(data = map_pts, group = "Locations",
                popup = "Info_string", color = map_colors) %>% 
    addLayersControl(baseGroups = c("Map", "Satellite"),
                     overlayGroups = "Locations"
    )
  
  
  fname <- paste("Powell_Database_", var2use,"_Map.html", sep = "")
  
  saveWidget(map_leaflet, file=fname, selfcontained=F)

}