---
title: "Brief foray into machine learning: Cluster analysis"
author: "ENS-215"
output:
  html_document:
    df_print: paged
    theme: journal
    toc: TRUE
    toc_float: TRUE
---

## Overview
Today were are going to scratch the surface of machine learning (ML) by learning about cluster analysis.  

Let's first briefly define **machine learning** is the use of algorithms (essentially a mathematical recipe) to recognize patterns in data and to make prediction based on input data.  The field of machine learning is very large and is continually growing, however you can broadly divide ML approaches into two categories, namely **supervised learning** and **unsupervised learning**.  

**Supervised learning** is...


**Unsupervised learning** is...


Today we will be conducting k-means clustering, which is a form of unsupervised learning.  


## Motivation 


## Load in packages
```{r}
library(tidyverse)

library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(FactoMineR)

library(tmap)
library(sf)
```

```{r}
set.seed(123)
```



## Load in data to use
```{r}
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
```
## Prepare data for clustering

### Select variables to use in clustering
```{r}
table_cluster <- bangladesh_gw %>% 
  select(SAMPLE_ID,
         Ba_mgL, 
         Ca_mgL, 
         Fe_mgL, 
         Mn_mgL,
         K__mgL, 
         Mg_mgL, 
         Na_mgL, 
         Si_mgL, 
         SO4_mgL, 
         Sr_mgL) %>% 
  
  drop_na() # need to drop any samples with NA values since can't cluster sites with missing data
```


### Name the rows with the SAMPLE_ID variable 
```{r}
table_cluster <- column_to_rownames(table_cluster, var = "SAMPLE_ID")

```

```{r}
head(table_cluster)
```



### Rescale the data
```{r}
table_cluster_scaled <- scale(table_cluster)
```

```{r}
head(table_cluster_scaled)
```

 

## PCA
```{r}
res.pca <- PCA(table_cluster_scaled,  graph = FALSE)
```

```{r}
# Control variable colors using their contributions
fviz_pca_var(res.pca, col.var="contrib",
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE # Avoid text overlapping
             )
```


## Cluster the data
```{r}
fviz_nbclust(
  table_cluster_scaled,
  pam,
  k.max = 10,
  method = "wss",
  diss = get_dist(table_cluster, method = "spearman")
) 
```



```{r}
n_clust = 6

k_n = cluster::pam(table_cluster_scaled, k = n_clust)
```


```{r}
fig_cluster <- fviz_cluster(k_n, data = table_cluster_scaled, 
                            ellipse = T, palette = "Set2",
                            geom = "point") +
  theme_classic()
```


```{r}
fig_cluster
```



```{r}
df_cluster_info <- tibble(SAMPLE_ID = row.names(table_cluster_scaled),
                          cluster_id = k_n$cluster)
```


```{r}
bangladesh_gw <- bangladesh_gw %>% 
  left_join(df_cluster_info)
```



```{r}
bangladesh_gw <- bangladesh_gw %>% 
  mutate(cluster_id = factor(cluster_id))
```



```{r fig.width= 4}
bangladesh_gw %>% 
  filter(!is.na(cluster_id)) %>% 
  
  ggplot(aes(x = cluster_id, y = As_ugL, fill = cluster_id)) +
  geom_boxplot() +
  scale_fill_brewer(type = "qual", palette = "Set2") +
  
  scale_y_log10() +
  
  theme_classic() +
  theme(legend.position = "none")



bangladesh_gw %>% 
  filter(!is.na(cluster_id)) %>% 
  
  ggplot(aes(x = cluster_id, y = Fe_mgL, fill = cluster_id)) +
  geom_boxplot() +
  scale_fill_brewer(type = "qual", palette = "Set2") +
  
  scale_y_log10() +
  
  theme_classic() +
  theme(legend.position = "none")


bangladesh_gw %>% 
  filter(!is.na(cluster_id)) %>% 
  
  ggplot(aes(x = cluster_id, y = SO4_mgL, fill = cluster_id)) +
  geom_boxplot() +
  scale_fill_brewer(type = "qual", palette = "Set2") +
  
  scale_y_log10() +
  
  theme_classic() +
  theme(legend.position = "none")


bangladesh_gw %>% 
  filter(!is.na(cluster_id)) %>% 
  
  ggplot(aes(x = cluster_id, y = Si_mgL, fill = cluster_id)) +
  geom_boxplot() +
  scale_fill_brewer(type = "qual", palette = "Set2") +
  
  scale_y_log10() +
  
  theme_classic() +
  theme(legend.position = "none")




bangladesh_gw %>% 
  filter(!is.na(cluster_id)) %>% 
  
  ggplot(aes(x = cluster_id, y = WELL_DEPTH_m, fill = cluster_id)) +
  geom_boxplot() +
  scale_fill_brewer(type = "qual", palette = "Set2") +
  
  scale_y_log10() +
  
  theme_classic() +
  theme(legend.position = "none")
```

```{r}
summary(bangladesh_gw$cluster_id)
```


```{r}
sf_bangladesh_gw <- bangladesh_gw %>% 
  st_as_sf(coords = c("LONG_DEG", "LAT_DEG"))
```


```{r}
tmap_mode("view")

sf_bangladesh_gw %>% 
  filter(!is.na(cluster_id)) %>% 
  
  tm_shape() +
  tm_dots(col = "cluster_id", palette = "Set2",
          popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
          ) +

  tm_mouse_coordinates() +
  
  tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
  
  tm_scale_bar() 
```


```{r}
sf_bangladesh_gw %>% 
  filter(!is.na(cluster_id)) %>% 
  
  tm_shape() +
  tm_dots(col = "As_ugL", palette = "viridis", breaks = c(0,5,10,50,100,200),
          popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
          ) +

  tm_mouse_coordinates() +
  
  tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
  
  tm_scale_bar() + 
  tm_facets(by = "cluster_id", sync = T)
```


