---
title: "Lecture overview notes"
author: "ENS-215"
date: "Winter 2025"
output:
  html_document:
    theme: journal
    toc: TRUE
    toc_float: TRUE
---


Outlines below highlight some key topics to cover prior to beginning with the coding/analysis portion of the day's lecture.  
<br/>

## Lectures

### Course introduction
- Go over syllabus and course logistics
- Present in-class examples to highlight what you can do with R

### Diving into R
- Go over RStudio/R basics, panes in R studio (begin with slides)
- Have students set up folder for this course and create a "lectures" project   
- Describe what a function is
- Help them open a new R Notebook and save the notebook to the appropriate folder prior to getting started with the lesson
- Work through the first few lines of code together and view the `met_data` data frame together.  
- Once students have viewed the data frame, have a "think-pair-share" where they discuss (1) what the data consists of, (2) potential issues with the data, (3) any additional info they might need in order to interpret the data, (4) consider how the data may have been collected/measured and what potential issues/considerations that might raise.
- Remind students to always keep an eye out for questionable/incorrect data.  

### R Programming and Markdown Basics
- Refresh students on the RStudio/R basics, console in R, R studio panes
- Remind students to clear their environment and hit Session -> Restart R and clear all output prior to beginning for the day
- Remind students that code should be run from top to bottom.  
- Highlight to students how you "knit" documents and point out the difference between an ".Rmd" and ".html" file  
- Go over the basic data types and data structures.  Emphasize the importance of properly structuring/organizing data (highlight that we will cover this topic in much greater detail in coming lectures)  


### Relational and logical operators, if/else/else if 
- Go over exercises at the end of the previous lecture  
- Functions and objects (functions have parenthesis around their arguments, index objects with brackets)
- Go over indexing of data objects (e.g., data frames, lists, vectors,...)
- Relational operators (equal to, less than, greater than,...)
- Logical operators (and, or, not) and combinations of logical operators
- if/else statements  


### Loops (for, while)
- Go over exercises from last lecture.  In particular focus on how to index data frames based on data criteria  
- Overview of looping.  Discuss the structure of loops and the looping variable  
- Overview of counter variables
- In the middle of class it is useful to go over the loop that prints the days in each month

### Data wrangling (intro)
- Remind class about the need for discussion in their lab reports  
- When writing text in Rmd after a figure you should put in two line breaks.  This prevent the text from wrapping around the side of the figure  
- Remind class that when submitting the HTML files they should submit the *.html* and not the *.nb.html*  
- Go over `filter()` and piping  
- Give an example of why `filter(Country == "China", Country == "Spain")` would not return any rows


### Data wrangling (continued)
- HW reminder  
- Go over the exercises from last class  
- Review dplyr verbs we've learned thus far `filter()`, `arrange()`, `select()` and also piping `%>%`  
- Introduce new verbs `mutate()`, `rename()`, `top_n()`, `summarize()`  
- Introduce `if_else()` and  `case_when()` which are very useful with `mutate()`  
- Remind class that when you apply a function it will only permanently alter the data frame if you overwrite the original object (i.e., use the `<-` operator to save the object) 

### group_by() and summarize()
- Revisit the looping challenge from the end of the lecture on (2025-01-15) and demonstrate how easy this same analysis is using `group_by()` and `summarize()`  
- Review all of the "verbs" in dplyr that we have seen thus far.  Have the gapminder data frame open in viewer, pose questions to students about each verb, and then in my console carry out an example with that verb (saving output to a new df) and examine the new df to highlight the steps we've taken.  

- **FIX:** `summarize_at()` has been replaced with a newer implementation, which is `summarize()` with the `across()` function nested within.  Update this lecture and update the line telling students to refer the the dplyr cheatsheet, which no longer shows `summarize_at()`.  

<br/> 


### Data Visualization: additional topics
- Review exercises from last class
- Check with class if anyone tried anything interesting with respect to geoms (i.e., exercise 4 from prior lecture)  
- Group aesthetic in figures
- Reordering axes with categorical variables 
- geom_smooth(), explanation/discussion 
- Faceting
- After ~25 min review today's faceting challenge with the class  
- **FIX:** On the reordered scatter plot example, I suggest students switch the x-y axes.  However they have not yet learned to rotate axis text and thus the figure is not readable with the countries on the x-axis.  


### Data Visualization: Presentation quality graphics  
- Remind students that grades are posted to Nexus site  
- Reminder that ESPE winter seminar series 1st event is on Monday (extra credit) 
- Review challenge from last class.
- Go over a concept of 1:1 line (which was introduced last class)  
- 

## Labs  



```{r echo = F, eval = F}
`r Hmisc::hidingTOC(hidden=F,levels=0, posCollapse= "margin",tocSide = "left", buttonSide = "left")`
```


