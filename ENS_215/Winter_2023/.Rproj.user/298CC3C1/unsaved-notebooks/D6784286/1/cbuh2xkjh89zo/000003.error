{"frames":[{"func":"get_niveaux_nappes_chroniques(list(code_bss = c(\"05506X0032/PUITS\", \n    \"06256X0188/PZ\"), date_debut_mesure = \"2020-01-01\", date_fin_mesure = \"2022-12-31\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doApiQuery(api = \"niveaux_nappes\", endpoint = \"chroniques\", params = params)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"urltools::param_set(query, key = paramName, value = params[[paramName]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(structure(list(message = \"'value' must be the same length as 'urls', or of length 1\", \n    call = urltools::param_set(query, key = paramName, value = params[[paramName]]), \n    cppstack = NULL), class = c(\"std::range_error\", \"C++Error\", \n\"error\", \"condition\")))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in urltools::param_set(query, key = paramName, value = params[[paramName]]) : \n  'value' must be the same length as 'urls', or of length 1\n"}