ny_precip %>%
ggplot(aes(Precip_inches, group = time_period, fill = time_period)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("grey", "blue")) +
theme_classic()
View(ny_precip)
View(ny_precip)
med_pre <- ny_precip %>% filter(time_period == "Pre-1950") %>% summarize(med_ppt = median(Precip_inches))
View(med_pre)
med_post <- ny_precip %>% filter(time_period == "Post-1950") %>% summarize(med_ppt = median(Precip_inches))
View(med_pre)
View(med_post)
med_pre <- ny_precip %>%
filter(time_period == "Pre-1950") %>%
summarize(med_ppt = median(Precip_inches))
med_post <- ny_precip %>%
filter(time_period == "Post-1950") %>%
summarize(med_ppt = median(Precip_inches))
ny_precip %>%
ggplot(aes(Precip_inches, group = time_period, fill = time_period)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("grey", "blue")) +
geom_vline(xintercept = med_pre$med_ppt, color = "blue") +
geom_vline(xintercept = med_post$med_ppt, color = "grey") +
theme_classic()
med_pre <- ny_precip %>%
filter(time_period == "Pre-1950") %>%
summarize(med_ppt = median(Precip_inches))
med_post <- ny_precip %>%
filter(time_period == "Post-1950") %>%
summarize(med_ppt = median(Precip_inches))
ny_precip %>%
ggplot(aes(Precip_inches, group = time_period, fill = time_period)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("grey", "blue")) +
geom_vline(xintercept = med_pre$med_ppt, color = "blue") +
geom_vline(xintercept = med_post$med_ppt, color = "black") +
theme_classic()
library(sf)
library(tidyverse)
library(leaflet)
library(elevatr)
pct_sf <- read_sf("./Data/pct/PacificCrestTrail.shp")
pct_sf <- read_sf("./Data/pct/PacificCrestTrail.shp")
pct_sf <- read_sf("./Data/pct/PacificCrestTrail.shp")\
pct_sf <- read_sf("./Data/pct/PacificCrestTrail.shp")
View(pct_sf)
pct_sf <- st_transform(pct_sf, "EPSG:4326")
View(pct_sf)
get_elev_point(pct_sf[1,], src = "epqs")
get_elev_point(pct_sf[1,], src = "epqs", prj = "EPSG:4326")
unlist(pct_sf[1,])
st_coordinates(pct_sf[1,])
test_df <- st_coordinates(pct_sf[1,])
test_df_1$lat <- test_df$X
View(test_df)
test_df <- as.data.frame(test_df)
View(test_df)
test_df_use$lat <- test_df$Y
test_df_use <- test_df %>%
select(lat = Y, lon = X)
get_elev_point(test_df_use, src = "epqs", prj = "EPSG:4326")
a <- get_elev_point(test_df_use, src = "epqs", prj = "EPSG:4326")
View(a)
test_df_use <- test_df %>%
select(lon = X, lat = Y)
a <- get_elev_point(test_df_use, src = "epqs", prj = "EPSG:4326")
View(a)
a$elevation
test_df <- st_coordinates(pct_sf)
test_df <- as.data.frame(test_df)
test_df <- as.data.frame(test_df)
test_df_use <- test_df %>%
select(lon = X, lat = Y)
a <- get_elev_point(test_df_use[1:1000,], src = "epqs", prj = "EPSG:4326")
a$elevation
View(a)
a %>% tm_shape() +
tm_dots()
View(pct_sf)
library(tidyverse)
library(patchwork)
library(lubridate)
map_data_usa <- map_data("state") # load in US states map data from the maps package and convert it to a compatible format for plotting in with ggplot()
head(map_data_usa) # take a look at the first few rows of map_data_usa
map_us <- map_data_usa %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), color = "black", fill = "gray")
map_us
map_us + coord_quickmap()
map_us_bonne <- map_us +
coord_map(projection = "bonne", lat0 = 50) +
theme_bw() +
labs(title = "Bonne projection")
map_us_conic <- map_us +
coord_map(projection = "conic", lat0 = 30) +
theme_bw() +
labs(title = "Conic projection")
map_us_bonne + map_us_conic  # making use of the patchwork package to nicely arrange the two maps
state_cap_locs <- read_csv("https://stahlm.github.io/ENS_215/Data/us_capitals_locs.csv", skip = 2)
state_cap_locs <- state_cap_locs %>%
filter(state_cd %in% state.abb) %>% # remove locations that aren't US state list (e.g. Puerto Rico, Guam, ...)
filter(state_cd != "AK", state_cd != "HI") # remove capitals of Alaska and Hawaii (our basemap only has the lower 48 states)
map_us +
geom_point(data = state_cap_locs, aes(x = long_deg, y = lat_deg), color = "blue") +
coord_map(projection = "bonne", lat0 = 50) +
theme_minimal()
map_data_usa <- map_data("state") # get data frame with the spatial data for borders of lower 48 states
head(map_data_usa)
map_data_ne <- map_data_usa %>%
filter(region %in% c("massachusetts", "new york", "connecticut", "rhode island", "maine",
"vermont","new hampshire"))
map_data_ne %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), color = "black", fill = "gray") +
coord_map(projection = "bonne", lat0 = 50) +
theme_minimal()
state_temps <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Temp_Lab_Data.csv")
state_mean_temps <- state_temps %>%
group_by(state_cd) %>%
summarize(mean_temp = mean(Avg_Temp_F))
state_mean_temps
state_name_table = tibble(state_name = tolower(state.name),
state_cd = state.abb, us_region = state.region)
state_mean_temps <- left_join(state_mean_temps, state_name_table)
head(state_mean_temps)
state_mean_temps <- state_mean_temps %>%
rename(region = state_name)
map_data_usa_temps <- left_join(map_data_usa, state_mean_temps)
head(map_data_usa_temps)
map_data_usa_temps %>%
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_map(projection = "bonne", lat0 = 50) +
theme_void()
map_data_usa_temps %>%
drop_na(us_region) %>% # there are some NA rows that we will drop
ggplot() +
geom_polygon(aes(long, lat, group = group, fill = mean_temp), color = "black") +
scale_fill_gradient(low = "blue", high = "red") +
coord_quickmap() +
theme_void() +
facet_wrap(~ us_region, scales = "free")
earthquakes <- read_csv("https://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2023-01-01%0000:00:00&endtime=2023-02-12%2023:59:59&minmagnitude=2.5&orderby=time")
head(earthquakes)
map_world_data <- map_data("world")
View(map_world_data)
world_map_data <- spData::world # save the world data from the spData package to our own R object
world_map_data %>%
geom_sf()
world_map_data %>%
ggplot() +
geom_sf()
world_map_data %>%
ggplot() +
geom_sf() +
coord_map(projection = projection= "+proj=moll")
world_map_data %>%
ggplot() +
geom_sf() +
coord_map(projection = "+proj=moll")
world_map_data %>%
ggplot() +
geom_sf() +
coord_map("gilbert")
world_map_data %>%
ggplot() +
geom_sf() +
coord_sf("gilbert")
world_map_data %>%
ggplot() +
geom_sf() +
coord_sf(projection= "+proj=moll")
world_map_data %>%
ggplot() +
geom_sf() +
coord_sf("+proj=moll")
world_map_data %>%
ggplot() +
geom_sf()
map_world_data <- map_data("world")
map_ME_data <- map_world_data %>%
filter(region %in% c("Turkey", "Syria"))
earthquake_map <- map_ME_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 2.5 magnitude since the start of 2023",
subtitle = "Date window: 1-Jan to 12-Feb-2023",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
map_ME_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black")
map_ME_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red")
View(earthquakes)
earthquake_map <- map_ME_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 2.5 magnitude since the start of 2023",
subtitle = "Date window: 1-Jan to 12-Feb-2023",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap() +
xlim(0,50)
earthquake_map
earthquake_map <- map_ME_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 2.5 magnitude since the start of 2023",
subtitle = "Date window: 1-Jan to 12-Feb-2023",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
earthquake_map <- map_ME_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 2.5 magnitude since the start of 2023",
subtitle = "Date window: 1-Jan to 12-Feb-2023",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
earthquake_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 2.5 magnitude since the start of 2023",
subtitle = "Date window: 1-Jan to 12-Feb-2023",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
earthquake_map <- map_world_data %>%
ggplot() +
geom_polygon(aes(long, lat, group = group), fill = "lightgray", color = "black") +
geom_point(data = earthquakes, aes(longitude, latitude,  color = mag),
shape = 21, fill = "NA", stroke = 1.5) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Earthquakes > 2.5 magnitude since the start of 2023",
subtitle = "Date window: 1-Jan to 12-Feb-2023",
caption = "Data source: USGS") +
theme_void() +
coord_quickmap()
earthquake_map
View(map_ME_data)
source('~/.active-rstudio-document', echo=TRUE)
library(tidyverse)
library(patchwork)
library(lubridate)
library(tidyverse)
library(lubridate)
library(leaflet)
# Let's also load in the `sf` and the `tmap` packages.  You will probably need to install these packages first.  FYI, both of these packages are used for spatial analysis and making maps.  We will learn much more about these topics in upcoming lectures.
library(sf)
library(tmap)
library(rebird)
species_code('Accipiter cooperii')
new_tax <- ebirdtaxonomy()
a <- ebirdgeo(species = species_code('Accipiter cooperii'), lat = 42.8, lng = -73.9, back = 30, dist = 50,
key = ebird_key)
## ebird
https://cran.r-project.org/web/packages/rebird/vignettes/rebird_vignette.html
ebird_key <-  c2jlhls8h84c
## ebird
#https://cran.r-project.org/web/packages/rebird/vignettes/rebird_vignette.html
ebird_key <-  "c2jlhls8h84c" #your key here
a <- ebirdgeo(species = species_code('Accipiter cooperii'), lat = 42.8, lng = -73.9, back = 30, dist = 50,
key = ebird_key)
fig_map <- a %>%
leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(~ lng, ~ lat, popup = ~ paste(comName, "; n:", howMany))
View(a)
fig_map
library(tidyverse)
library(tidyverse)
library(tmap)
library(climateR)
borders_hires <- rnaturalearth::ne_countries(country = "Argentina", scale = "large")
tm_shape(borders_hires) +
tm_borders()
library(AOI)
library(climateR)
library(sf)
param_meta$terraclim
AOI2 = aoi_get(country = "Ethiopia")
plot(AOI2$geometry)
NY_climate <- getTerraClimNormals(AOI = AOI2, param = "prcp", period = "19812010", month = 1:12)
sf::sf_use_s2(FALSE)
NY_climate <- getTerraClimNormals(AOI = AOI2, param = "prcp", period = "19812010", month = 1:12)
ny_stack <- raster::stack(NY_climate)
ny_stack <- raster::mask(ny_stack, AOI)
ny_stack <- raster::mask(ny_stack, AOI2)
ny_stack <- raster::crop(ny_stack, AOI2)
raster::plot(ny_stack)
AOI = aoi_get(state = "NC")
p = getPRISM(AOI, param = c('tmax','tmin'), startDate = "2018-10-29")
raster::plot(p)
raster::plot(p$prism_tmax)
p = getPRISM(AOI, param = c('tmax','tmin'), startDate = "2022-10-29")
raster::plot(p$prism_tmax)
AOI = aoi_get(state = "NY")
p = getPRISM(AOI, param = c('tmax','tmin'), startDate = "2023-02-04")
raster::plot(p$prism_tmin)
library(elevatr)
NY_counties <- counties(state = "NY",
cb = TRUE)
library(elevatr)
library(tigris)
NY_counties <- counties(state = "NY",
cb = TRUE)
county_schenectady <- NY_counties %>%
filter(NAME == "Schenectady")
raster_elev <- get_elev_raster(county_schenectady, z = 7, clip = "locations")
raster::plot(raster_elev)
raster_elev <- get_elev_raster(county_schenectady, z = 9, clip = "locations")
raster::plot(raster_elev)
raster_elev <- get_elev_raster(county_schenectady, z = 12, clip = "locations")
raster::plot(raster_elev)
borders_hires <- rnaturalearth::ne_countries(country = "Lesotho",
scale = "large",
returnclass = "sf")
raster_elev <- get_elev_raster(borders_hires,
z = 9,
clip = "locations")
raster::plot(raster_elev)
raster_elev %>%
tm_shape() +
tm_raster()
raster_elev %>%
tm_shape() +
tm_raster() +
tm_shape(borders_hires) +
tm_borders()
raster_elev %>%
tm_shape() +
tm_raster(style = "cont") +
tm_shape(borders_hires) +
tm_borders()
raster_elev %>%
tm_shape() +
tm_raster(style = "cont", palette = "terrain") +
tm_shape(borders_hires) +
tm_borders()
raster_elev %>%
tm_shape() +
tm_raster(style = "cont", palette = terrain.colors(n = 10)) +
tm_shape(borders_hires) +
tm_borders()
library(climateR)
p = getPRISM(county_schenectady,
param = c('tmax','tmin'), startDate = "2023-02-04")
p %>%
tm_shape() +
tm_raster()
p$prism_tmax %>%
tm_shape() +
tm_raster()
p$prism_tmax %>%
tm_shape() +
tm_raster() +
tm_shape(county_schenectady) +
tm_borders()
borders_state <- states()
View(borders_state)
borders_state$NAME
borders_NY <- borders_state %>%
filter(NAME == "New York")
p = getPRISM(borders_NY,
param = c('tmax','tmin'), startDate = "2023-02-04")
p$prism_tmax %>%
tm_shape() +
tm_raster() +
tm_shape(borders_NY) +
tm_borders()
border_NY <- USAboundaries::us_states(states = "NY")
p = getPRISM(borders_NY,
param = c('tmax','tmin'), startDate = "2023-02-04")
p$prism_tmax %>%
tm_shape() +
tm_raster() +
tm_shape(borders_NY) +
tm_borders()
border_NY <- USAboundaries::us_states(states = "NY")
border_NY <- USAboundaries::us_states(states = "NY", resolution = "high")
p$prism_tmax %>%
tm_shape() +
tm_raster() +
tm_shape(borders_NY) +
tm_borders()
install.packages("USAboundaries")
border_NY <- USAboundaries::us_states(states = "NY", resolution = "high")
tm_shape(borders_NY) +
tm_borders()
library(tidyverse)
library(tmap)
library(sf)
tm_shape(borders_NY) +
tm_borders()
tm_shape(border_NY) +
tm_borders()
p = getPRISM(border_NY,
param = c('tmax','tmin'), startDate = "2023-02-04")
library(climateR)
sf::sf_use_s2(FALSE)
p = getPRISM(border_NY,
param = c('tmax','tmin'), startDate = "2023-02-04")
p$prism_tmax %>%
tm_shape() +
tm_raster() +
tm_shape(border_NY) +
tm_borders()
borders_hires <- rnaturalearth::ne_countries(country = "Lesotho",
scale = "large",
returnclass = "sf")
climate_raster <- getTerraClimNormals(AOI = borders_hires,
param = "prcp",
period = "19812010", month = 1:12)
climate_raster %>%
tm_shape() +
tm_border() +
tm_shape(borders_hires) +
tm_borders()
climate_raster %>%
tm_shape() +
tm_raster() +
tm_shape(borders_hires) +
tm_borders()
climate_raster$terraclim_19812010_prcp %>%
tm_shape() +
tm_raster() +
tm_shape(borders_hires) +
tm_borders()
climate_raster$terraclim_19812010_prcp %>%
tm_shape() +
tm_raster() +
tm_shape(borders_hires) +
tm_borders()
a <- sum(climate_raster$terraclim_19812010_prcp)
a$layer %>%
tm_shape() +
tm_raster() +
tm_shape(borders_hires) +
tm_borders()
loc_path <- basemap_geotif(borders_hires, map_service = "esri", map_type = "world_imagery", map_res = 0.7)
library(basemaps)
loc_path <- basemap_geotif(borders_hires, map_service = "esri", map_type = "world_imagery", map_res = 0.7)
loc_path
loc_basemap <- raster::stack(loc_path)
loc_basemap
#raster::plotRGB(loc_basemap)
map_full <- tm_shape(loc_basemap) +
tm_rgb() +
tm_shape(borders_hires) +
tm_borders(col = "red")
map_full
loc_path <- basemap_geotif(borders_hires,
map_service = "esri",
map_type = "world_imagery",
map_res = 1.0)
loc_path
loc_basemap <- raster::stack(loc_path)
loc_basemap
#raster::plotRGB(loc_basemap)
map_full <- tm_shape(loc_basemap) +
tm_rgb() +
tm_shape(borders_hires) +
tm_borders(col = "red")
map_full
NY_counties <- counties(state = "NY",
cb = TRUE)
library(elevatr)
library(tigris)
NY_counties <- counties(state = "NY",
cb = TRUE)
county_schenectady <- NY_counties %>%
filter(NAME == "Schenectady")
loc_path <- basemap_geotif(county_schenectady,
map_service = "osm",
map_type = "streets",
map_res = 1.0)
loc_path
loc_basemap <- raster::stack(loc_path)
loc_basemap
map_full <- tm_shape(loc_basemap) +
tm_rgb() +
tm_shape(county_schenectady) +
tm_borders(col = "red")
map_full
