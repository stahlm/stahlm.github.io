filter(NAME == "Columbiana") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_dots() +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
ep_map
tmap_mode("plot")
ep_map <- OH_counties %>%
filter(NAME == "Columbiana") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_markers() +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
ep_map
OH_counties <- counties(state = c("OH", "PA"),
cb = TRUE) # cb = TRUE specifies to download a lower resolution file (faster download)
tmap_mode("plot")
ep_map <- EP_counties %>%
filter(NAME %in% c("Columbiana", "Beaver")) %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_markers() +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
EP_counties <- counties(state = c("OH", "PA"),
cb = TRUE) # cb = TRUE specifies to download a lower resolution file (faster download)
tmap_mode("plot")
ep_map <- EP_counties %>%
filter(NAME %in% c("Columbiana", "Beaver")) %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_markers() +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
ep_map
library(splitr)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
library(splitr)
library(here)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = "./met",
exec_dir = "./out"
)
getwd()
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = "met",
exec_dir = "out"
)
trajectory <-
hysplit_trajectory(
lat = 42.83752,
lon = -80.30364,
height = 50,
duration = 24,
days = "2012-03-12",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = 42.83752,
lon = -80.30364,
height = 50,
duration = 24,
days = "2012-03-12",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = "met",
exec_dir = "out"
)
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "backward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "backward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "backward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "backward",
met_type = "reanalysis",
met_dir = "met",
exec_dir = "out"
) %>%
run_model()
# Get a data frame containing the model results
trajectory_tbl <- trajectory_model %>% get_output_tbl()
trajectory_tbl
# Get a data frame containing the model results
trajectory_tbl <- trajectory_model %>% run_model()
trajectory_tbl
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 2,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "backward",
met_type = "reanalysis",
met_dir = "met",
exec_dir = "out"
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 2,
days = "2015-07-01",
daily_hours = c(0, 10),
direction = "backward",
met_type = "reanalysis",
met_dir = "met",
exec_dir = "out"
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 2,
days = "2015-07-01",
daily_hours = c(0, 10),
direction = "backward",
met_type = "reanalysis",
met_dir = "./met",
exec_dir = "./out"
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 24,
days = "2015-07-01",
daily_hours = c(0, 10),
direction = "backward",
met_type = "reanalysis",
met_dir = "./met",
exec_dir = "./out"
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 24,
days = "2015-07-01",
daily_hours = c(0, 10),
direction = "backward",
met_type = "reanalysis",
met_dir = "./met",
exec_dir = "./out"
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 24,
days = "2015-07-01",
daily_hours = c(0, 10),
direction = "forward",
met_type = "reanalysis",
met_dir = "./met",
exec_dir = "./out"
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 24,
days = "2015-07-01",
daily_hours = c(0, 10),
direction = "forward",
met_type = "reanalysis",
met_dir = "met",
exec_dir = "out"
) %>%
run_model()
nwis_ep_sites <- whatNWISsites(countyCd = "39029",
parameterCd = c("00060","00065"),
service = "dv"
)
library(dataRetrieval)
nwis_ep_sites <- whatNWISsites(countyCd = "39029",
parameterCd = c("00060","00065"),
service = "dv"
)
View(nwis_ep_sites)
nwis_ep_sites <- whatNWISsites(countyCd = c("39029","40007"),
parameterCd = c("00060","00065"),
service = "dv"
)
View(nwis_ep_sites)
nwis_ep_sites <- whatNWISsites(countyCd = c("39029","42007"),
parameterCd = c("00060","00065"),
service = "dv"
)
nwis_ep_sites_sw <- whatNWISsites(countyCd = c("39029","42007"),
parameterCd = c("00060","00065"),
service = "dv"
)
tmap_mode("plot")
ep_map <- EP_counties %>%
#filter(NAME %in% c("Columbiana", "Beaver")) %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_markers() +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
ep_map
tmap_mode("plot")
ep_map <- EP_counties %>%
filter(NAME %in% c("Columbiana", "Beaver")) %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_markers() +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
ep_map
source("https://raw.githubusercontent.com/stahlm/stahlm.github.io/master/ENS_215/Winter_2022/Lectures/compute_seasonality_indices.R")
#source("compute_seasonality_indices.R")
View(compute_seasonality_indices)
install.packages("rivnet")
library(tidyverse)
library(tmap)
library(sf)
library(maps)
library(raster)
library(AOI)
library(elevatr)
loc2use <- aoi_get(x = list("Schenectady, NY",5,5) )
elevation <- get_elev_raster(loc2use, z = 14, clip = "bbox")
elevation %>%
tm_shape() +
tm_raster(style = "cont", palette = terrain.colors(10)) +
tm_layout(legend.outside = T,
main.title = "Schenectady elevation map")
4
1/0.7
1/0.5
1/0.25
G20_countries <- c("US",
"China",
"Germany",
"Canada"
)
library(tidyverse)
library(lubridate)
library(moderndive)
precip_data <- read_csv("https://stahlm.github.io/ENS_215/Data/NOAA_State_Precip_LabData.csv")
precip_data %>%
filter(Year >= 1980,
state_cd == "CA") %>%
mutate(date = ymd(paste(Year,Month,15)) ) %>%
ggplot(aes(x = date, y = Precip_inches)) +
geom_line() +
geom_point() +
theme_classic() +
labs(x = "Year",
y = "Precip (inches)")
precip_data %>%
filter(Year >= 1980,
state_cd == "CA") %>%
ggplot(aes(x = Year, y = Precip_inches)) +
geom_point() +
geom_smooth(se = F, method = "lm") +
facet_wrap(~ Month, ncol = 12) +
theme_classic() +
theme(axis.text.x = element_blank()) +
labs(x = "",
y = "Precip (inches)",
title = "California Monthly Precipitation",
subtitle = "1980-2017",
caption = "Data source: NOAA")
flow <- read_csv("https://stahlm.github.io/ENS_215/Data/USGS_flow_01351500.csv") %>%
drop_na() %>%
filter(Year >= 1940 & Year <= 2016) %>%  # select years 1940 through 2016
mutate(date = make_date(Year, Month, Day)) # create a Date column that has the dates as an R date object
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv") %>%
drop_na()
Dhaka_gw <- bangladesh_gw %>%
filter(DIVISION == "Dhaka", WELL_DEPTH_m < 40)
Dhaka_gw %>%
ggplot(aes(x = P__mgL, y = As_ugL)) +
geom_point(alpha = 0.5) +
theme_classic()
Dhaka_gw %>%
ggplot(aes(x = P__mgL, y = As_ugL)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm") +
theme_classic()
lm(data = Dhaka_gw, formula = As_ugL ~ P__mgL)
lm_1 <- lm(data = Dhaka_gw, formula = As_ugL ~ P__mgL)
mauna_loa <- read_csv("https://stahlm.github.io/ENS_215/Data/Mauna_Loa_CO2.csv", skip = 2) %>%
mutate(Date = decimal_date(make_date(Year, Month, 15)))  # add a column that has the date information in decimal date format
mauna_loa %>%
ggplot(aes(x = Date, y = CO2_ppm)) +
geom_line() +
geom_smooth(method = "lm") +
theme_classic()
lm_mauna_loa <- lm(CO2_ppm ~ Date, data = mauna_loa)
get_regression_table(lm_mauna_loa, digits = 5)
get_regression_summaries(lm_mauna_loa)
lm_mauna_loa_points <- get_regression_points(lm_mauna_loa)
head(lm_mauna_loa_points)
lm_mauna_loa_points %>%
ggplot(aes(x = Date, y = residual)) +
geom_point() +
theme_classic()
mauna_loa %>%
ggplot(aes(x = Date, y = CO2_ppm)) +
geom_line() +
geom_smooth(method = "loess", span = 1/4) +
theme_classic()
loess_mauna_loa <- loess(CO2_ppm ~ Date, data = mauna_loa, span = 1/4)
get_regression_summaries(loess_mauna_loa)
var_ml <- var(mauna_loa$CO2_ppm)
sum(loess_mauna_loa$residuals^2)
loess_mauna_loa$residuals
ss_tot_ml = sum((mauna_loa$CO2_ppm - mean(mauna_loa$CO2_ppm))^2)
ssr_ml <- sum(loess_mauna_loa$residuals^2)
ssr_ml/ss_tot_ml
45/82
97/173
