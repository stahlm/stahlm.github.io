startDate = "2022-01-01",
endDate = "2022-12-01")
library(tidyverse)
library(stationaRy)
library(sf)
library(tmap)
library(spData)
library(AOI)
library(climateR)
library(raster)
library(rasterVis)
library(patchwork)
spData::world
df_stations <- get_station_metadata()
# Get the data
#loc2use <- 'Death Valley National Park'
loc2use <- 'Union College'
AOI = AOI::geocode(loc2use,
pt = TRUE)
ts  = getGridMET(AOI, param = c("tmax","tmin", "prcp"),
startDate = "2022-01-01",
endDate = "2022-12-31")
# convert units
ts <- ts %>%
mutate(tmax = ((tmax - 273.15)*(9/5) +32),
tmin = ((tmin - 273.15)*(9/5) +32),
prcp = prcp/25.4
)
# Summary table
ts %>%
summarize(pcrp_max = max(prcp),
temp_max = max(tmax),
temp_min = min(tmin),
temp_mean = mean((tmin+tmax)/2),
temp_max_change = max(tmax - tmin)
)
# Summary table
ts %>%
summarize(pcrp_max = max(prcp),
temp_max = max(tmax),
temp_min = min(tmin),
temp_mean = mean((tmin+tmax)/2),
temp_max_change = max(tmax - tmin),
n_days = n()
)
# Make the figures
fig_01 <- ts %>%
ggplot() +
geom_line(aes(x = date, y = tmax), color = "red") +
geom_line(aes(x = date, y = tmin), color = "blue") +
labs(x = "",
y = "Temperature (F)"
) +
geom_hline(yintercept = 32, linetype = "dashed") +
theme_bw()
fig_02 <- ts %>%
ggplot() +
geom_col(aes(x = date, y = prcp), color = "black") +
labs(y = "Precipitation (inches)") +
theme_bw()
# Make the figures
(fig_01 / fig_02) +
plot_annotation(title = paste(loc2use,": Temperature and precipitation", sep = ""),
caption = "Data source: GridMET",
tag_levels = "a"
)
henri = getGridMET(aoi_get(state = c("NY")),
param = "prcp",
startDate = "2021-08-16", endDate = "2021-08-24")
r = raster::stack(henri)
r_inches <- r/25.4
tmap_mode("plot")
fig_map <- r_inches %>%
tm_shape() +
tm_raster(style = "cont") +
tm_shape(spData::us_states) +
tm_borders()
fig_map
tmap_mode("view")
fig_map
tmap_mode("plot")
fig_map
tmap_mode("view")
fig_map
tmap_mode("plot")
round(raster::maxValue(r_inches),2) %>% as.data.frame()
sf::sf_use_s2(FALSE)
temperature_US = getGridMET(aoi_get(state = "conus"),
param = "tmin",
startDate = "2022-12-24", endDate = "2022-12-24")
#> Spherical geometry (s2) switched off
#> Spherical geometry (s2) switched on
temperature_US <- raster::stack(temperature_US)
temperature_US <- temperature_US - 273.15
temperature_US <- (temperature_US*9/5) + 32
tmap_mode("plot")
temperature_US %>%
tm_shape() +
tm_raster(style = "cont", palette = "-RdBu", midpoint = 32) +
tm_shape(spData::us_states) +
tm_borders()
library(osmdata)
library(tigris)
library(sf)
library(osmplotr)
library(tmaptools)
library(OpenStreetMap)
Sys.setenv(MAPBOX_API_KEY = "pk.eyJ1Ijoic3RhaGxtIiwiYSI6ImNrZnJiMDMxbDA0aGsyenFlajhvMzZ4bXUifQ.I7l7fJBAHCQWRwyYozq4ZQ")
loc2use <- "New Mexico"
bb_values <- getbb(loc2use)
bb_values
springs_data <- opq(bb_values) %>%
add_osm_feature(key = 'natural', value = 'spring') %>%
osmdata_sf()
loc_border <- spData::us_states %>%
filter(NAME == "New Mexico")
tmap_mode("view")
map_springs <-
tm_shape(loc_border) +
tm_borders(col = "black") +
tm_shape(springs_data$osm_points) +
tm_dots(col = "blue")
map_springs
library(dataRetrieval)
library(lubridate)
df_stream_data <- readNWISdv(siteNumbers = "09380000",
parameterCd = c("00060"),
statCd = "00003") %>%
renameNWISColumns()
df_stream_data %>%
ggplot(aes(x = Date, y = Flow)) +
geom_line() +
theme_classic()
table_flows <- df_stream_data %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarize(mean_flow = mean(Flow, na.rm= T),
min_flow = min(Flow, na.rm = T),
max_flow = max(Flow, na.rm = T),
n_meas = n()) %>%
filter(n_meas > 350)
table_flows
fig_max <- table_flows %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = max_flow), size = 1, color = "blue") +
#geom_line(aes(y = min_flow), size = 1, color = "red") +
#geom_line(aes(y = mean_flow), size = 1, color = "black") +
theme_classic()
fig_min <- table_flows %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = min_flow), size = 1, color = "red") +
#geom_line(aes(y = mean_flow), size = 1, color = "black") +
theme_classic()
fig_mean <- table_flows %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = mean_flow), size = 1, color = "black") +
theme_classic()
fig_mean/fig_max/fig_min
library(tidycensus)
census_example_df <- get_acs(geography = "county",
variables = c(medincome = "B19013_001"),
state = "NY",
year = 2021)
census_example_df %>%
arrange(-estimate)
census_example_df %>%
mutate(NAME = gsub(" County, New York", "", NAME)) %>%
ggplot(aes(x = estimate, y = reorder(NAME, estimate))) +
geom_errorbarh(aes(xmin = estimate - moe, xmax = estimate + moe)) +
geom_point(color = "red", size = 3) +
labs(title = "Household income by county in New York",
subtitle = "2021 American Community Survey",
y = "",
x = "ACS estimate (bars represent margin of error)") +
theme_bw()
Schdy <- get_acs(
state = "NY",
county = "Schenectady",
geography = "tract",
variables = "B19013_001",
geometry = TRUE,
year = 2020
)
tmap_mode("plot")
map_income <- tm_shape(Schdy) +
tm_polygons(col = "estimate", alpha = 1)
map_income
map_income_interactive <- tm_shape(Schdy) +
tm_polygons(col = "estimate", alpha = 0.6)
tmap_mode("view")
tmap_mode("view")
map_income_interactive
map_income_interactive
library(tidyverse)
library(stationaRy)
library(sf)
library(tmap)
library(spData)
library(AOI)
library(climateR)
library(raster)
library(rasterVis)
library(patchwork)
# Get the data
#loc2use <- 'Death Valley National Park'
loc2use <- 'Union College'
AOI = AOI::geocode(loc2use,
pt = TRUE)
ts  = getGridMET(AOI, param = c("tmax","tmin", "prcp"),
startDate = "2022-01-01",
endDate = "2022-12-31")
# convert units
ts <- ts %>%
mutate(tmax = ((tmax - 273.15)*(9/5) +32),
tmin = ((tmin - 273.15)*(9/5) +32),
prcp = prcp/25.4
)
# Summary table
ts %>%
summarize(pcrp_max = max(prcp),
temp_max = max(tmax),
temp_min = min(tmin),
temp_mean = mean((tmin+tmax)/2),
temp_max_change = max(tmax - tmin),
n_days = n()
)
# Make the figures
fig_01 <- ts %>%
ggplot() +
geom_line(aes(x = date, y = tmax), color = "red") +
geom_line(aes(x = date, y = tmin), color = "blue") +
labs(x = "",
y = "Temperature (F)"
) +
geom_hline(yintercept = 32, linetype = "dashed") +
theme_bw()
fig_02 <- ts %>%
ggplot() +
geom_col(aes(x = date, y = prcp), color = "black") +
labs(y = "Precipitation (inches)") +
theme_bw()
# Make the figures
(fig_01 / fig_02) +
plot_annotation(title = paste(loc2use,": Temperature and precipitation", sep = ""),
caption = "Data source: GridMET",
tag_levels = "a"
)
henri = getGridMET(aoi_get(state = c("NY")),
param = "prcp",
startDate = "2021-08-16", endDate = "2021-08-24")
r = raster::stack(henri)
r_inches <- r/25.4
tmap_mode("plot")
fig_map <- r_inches %>%
tm_shape() +
tm_raster(style = "cont") +
tm_shape(spData::us_states) +
tm_borders()
fig_map
tmap_mode("view")
fig_map
tmap_mode("plot")
round(raster::maxValue(r_inches),2) %>% as.data.frame()
library(tidyverse)
library(stationaRy)
library(sf)
library(tmap)
library(spData)
library(AOI)
library(climateR)
library(raster)
library(rasterVis)
library(patchwork)
loc2use <- 'Union College'
AOI = AOI::geocode(loc2use,
pt = TRUE)
View(AOI)
ts  = getGridMET(AOI, param = c("tmax","tmin", "prcp"),
startDate = "2022-01-01",
endDate = "2022-12-31")
View(ts)
# convert units
ts <- ts %>%
mutate(tmax = ((tmax - 273.15)*(9/5) +32),
tmin = ((tmin - 273.15)*(9/5) +32),
prcp = prcp/25.4
)
# Summary table
ts %>%
summarize(pcrp_max = max(prcp),
temp_max = max(tmax),
temp_min = min(tmin),
temp_mean = mean((tmin+tmax)/2),
temp_max_change = max(tmax - tmin),
n_days = n()
)
# Make the figures
fig_01 <- ts %>%
ggplot() +
geom_line(aes(x = date, y = tmax), color = "red") +
geom_line(aes(x = date, y = tmin), color = "blue") +
labs(x = "",
y = "Temperature (F)"
) +
geom_hline(yintercept = 32, linetype = "dashed") +
theme_bw()
fig_02 <- ts %>%
ggplot() +
geom_col(aes(x = date, y = prcp), color = "black") +
labs(y = "Precipitation (inches)") +
theme_bw()
# Make the figures
(fig_01 / fig_02) +
plot_annotation(title = paste(loc2use,": Temperature and precipitation", sep = ""),
caption = "Data source: GridMET",
tag_levels = "a"
)
henri = getGridMET(aoi_get(state = c("NY")),
param = "prcp",
startDate = "2021-08-16", endDate = "2021-08-24")
r = raster::stack(henri)
r_inches <- r/25.4
tmap_mode("plot")
fig_map <- r_inches %>%
tm_shape() +
tm_raster(style = "cont") +
tm_shape(spData::us_states) +
tm_borders()
fig_map
tmap_mode("view")
fig_map
tmap_mode("plot")
round(raster::maxValue(r_inches),2) %>% as.data.frame()
sf::sf_use_s2(FALSE)
temperature_US = getGridMET(aoi_get(state = "conus"),
param = "tmin",
startDate = "2022-12-24", endDate = "2022-12-24")
#> Spherical geometry (s2) switched off
#> Spherical geometry (s2) switched on
temperature_US <- raster::stack(temperature_US)
temperature_US <- temperature_US - 273.15
temperature_US <- (temperature_US*9/5) + 32
tmap_mode("plot")
temperature_US %>%
tm_shape() +
tm_raster(style = "cont", palette = "-RdBu", midpoint = 32) +
tm_shape(spData::us_states) +
tm_borders()
library(osmdata)
library(tigris)
library(sf)
library(osmplotr)
library(tmaptools)
library(OpenStreetMap)
Sys.setenv(MAPBOX_API_KEY = "pk.eyJ1Ijoic3RhaGxtIiwiYSI6ImNrZnJiMDMxbDA0aGsyenFlajhvMzZ4bXUifQ.I7l7fJBAHCQWRwyYozq4ZQ")
loc2use <- "New Mexico"
bb_values <- getbb(loc2use)
bb_values
springs_data <- opq(bb_values) %>%
add_osm_feature(key = 'natural', value = 'spring') %>%
osmdata_sf()
loc_border <- spData::us_states %>%
filter(NAME == "New Mexico")
tmap_mode("view")
map_springs <-
tm_shape(loc_border) +
tm_borders(col = "black") +
tm_shape(springs_data$osm_points) +
tm_dots(col = "blue")
map_springs
library(dataRetrieval)
library(lubridate)
df_stream_data <- readNWISdv(siteNumbers = "09380000",
parameterCd = c("00060"),
statCd = "00003") %>%
renameNWISColumns()
df_stream_data %>%
ggplot(aes(x = Date, y = Flow)) +
geom_line() +
theme_classic()
table_flows <- df_stream_data %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarize(mean_flow = mean(Flow, na.rm= T),
min_flow = min(Flow, na.rm = T),
max_flow = max(Flow, na.rm = T),
n_meas = n()) %>%
filter(n_meas > 350)
table_flows
fig_max <- table_flows %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = max_flow), size = 1, color = "blue") +
#geom_line(aes(y = min_flow), size = 1, color = "red") +
#geom_line(aes(y = mean_flow), size = 1, color = "black") +
theme_classic()
fig_min <- table_flows %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = min_flow), size = 1, color = "red") +
#geom_line(aes(y = mean_flow), size = 1, color = "black") +
theme_classic()
fig_mean <- table_flows %>%
ggplot(aes(x = Year)) +
geom_line(aes(y = mean_flow), size = 1, color = "black") +
theme_classic()
fig_mean/fig_max/fig_min
library(tidycensus)
census_example_df <- get_acs(geography = "county",
variables = c(medincome = "B19013_001"),
state = "NY",
year = 2021)
census_example_df %>%
arrange(-estimate)
census_example_df %>%
mutate(NAME = gsub(" County, New York", "", NAME)) %>%
ggplot(aes(x = estimate, y = reorder(NAME, estimate))) +
geom_errorbarh(aes(xmin = estimate - moe, xmax = estimate + moe)) +
geom_point(color = "red", size = 3) +
labs(title = "Household income by county in New York",
subtitle = "2021 American Community Survey",
y = "",
x = "ACS estimate (bars represent margin of error)") +
theme_bw()
library(tidyverse)
library(lubridate)
## Load in data
met_data <- read_csv('http://stahlm.github.io/ENS_215/Data/Blue_Hills_MA_Precip_Temp_Data_1.csv')
met_data <- mutate(met_data, DATE = parse_date_time(DATE,"mdy")) # convert date into computable format
met_data <- select(met_data, -c(TOBS)) # remove the TOBS column, since we won't use it
View(met_data)
head(met_data) # shows us the first few rows and provides info about data types
tail(met_data) # shows us the last few rows and provides info about data types
summary(met_data)
ggplot(met_data) +
geom_line(aes(x = DATE, y = PRCP),color = "blue")
met_data_2000_2010 <- filter(met_data, year(DATE) >= 2000, year(DATE) <= 2010) # new data frame
ggplot(met_data_2000_2010) +
geom_line(aes(x = yday(DATE), y = PRCP), color = "blue") +
facet_wrap(~year(DATE)) # plot the data
met_data <- mutate(met_data,year_val = year(DATE), month_val = month(DATE), day_val = day(DATE)) # add columns for year, month, and day
annual_precip <- group_by(met_data,year_val) # group the data by year
annual_precip<- summarise(annual_precip,tot_precip = sum(PRCP,na.rm = TRUE)) # create a new data frame that has the total annual precipitation (inches)
ggplot(annual_precip) +
geom_line(aes(x = year_val, y = tot_precip),color = "blue") +
geom_point(aes(x = year_val, y = tot_precip),color = "black")
filter(annual_precip, year_val == 1965)
# Group the data by year and month
monthly_precip <- group_by(met_data, year_val, month_val) %>%
summarise(tot_precip = sum(PRCP, na.rm = TRUE))
# Create a box plot of the monthly precipitation data
fig_box <- ggplot(monthly_precip, aes(x=factor(month_val), y=tot_precip)) +
geom_boxplot()
fig_box
library(plotly)
ggplotly(fig_box)
remotes::install_github("inrae/hubeau")
library(hubeau)
get_niveaux_nappes_stations(list(code_departement = "10"))
df <- get_niveaux_nappes_chroniques(list(code_bss = "07548X0009/F",
date_debut_mesure = "2020-01-01",
date_fin_mesure = "2020-12-31"))
View(df)
df %>% ggplot(aes(x = as.POSIXct(date_mesure), y = niveau_nappe_eau)) + geom_line()
a <- get_niveaux_nappes_stations(list(code_departement = "10"))
View(a)
df <- get_niveaux_nappes_chroniques(list(code_bss = "BSS001NWDT",
date_debut_mesure = "2020-01-01",
date_fin_mesure = "2020-12-31"))
df <- get_niveaux_nappes_chroniques(list(code_bss = "BSS001NWDT",
date_debut_mesure = "2020-01-01",
date_fin_mesure = "2022-12-31"))
df <- get_niveaux_nappes_chroniques(list(code_bss = "BSS001PZGD",
date_debut_mesure = "2020-01-01",
date_fin_mesure = "2022-12-31"))
df <- get_niveaux_nappes_chroniques(list(code_bss = "06256X0188/PZ",
date_debut_mesure = "2020-01-01",
date_fin_mesure = "2022-12-31"))
View(df)
df <- get_niveaux_nappes_chroniques(list(code_bss = "06256X0188/PZ",
date_debut_mesure = "2020-01-01",
date_fin_mesure = "2022-12-31"))
df2 <- get_niveaux_nappes_chroniques(list(code_bss = "05506X0032/PUITS",
date_debut_mesure = "2020-01-01",
date_fin_mesure = "2022-12-31"))
df3 <- get_niveaux_nappes_chroniques(list(code_bss = c("05506X0032/PUITS","06256X0188/PZ"),
date_debut_mesure = "2020-01-01",
date_fin_mesure = "2022-12-31"))
View(df)
View(df2)
View(a)
2+2
2*10
2 +
2+2
library(tidyverse)
library(lubridate)
## Load in data
met_data <- read_csv('http://stahlm.github.io/ENS_215/Data/Blue_Hills_MA_Precip_Temp_Data_1.csv')
met_data <- mutate(met_data, DATE = parse_date_time(DATE,"mdy")) # convert date into computable format
met_data <- select(met_data, -c(TOBS)) # remove the TOBS column, since we won't use it
library(tidyverse)
library(lubridate)
library(tidyverse)
library(lubridate)
## Load in data
met_data <- read_csv('http://stahlm.github.io/ENS_215/Data/Blue_Hills_MA_Precip_Temp_Data_1.csv')
met_data <- mutate(met_data, DATE = parse_date_time(DATE,"mdy")) # convert date into computable format
met_data <- select(met_data, -c(TOBS)) # remove the TOBS column, since we won't use it
head(met_data) # shows us the first few rows and provides info about data types
a <- read.csv("https://www.fueleconomy.gov/feg/epadata/vehicles.csv")
View(a)
2+2
my_data <- 2
