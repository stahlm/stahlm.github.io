"Esri.WorldImagery","https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}"))
tmap_mode("view")
base_usgs_topo <- "https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}"
ep_site %>%
tm_shape() +
tm_markers() +
tm_basemap(c("OpenStreetMap.Mapnik", "Stamen.Terrain",
"Esri.WorldImagery", base_usgs_topo))
tmap_mode("view")
base_usgs_topo <- "https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}"
ep_site %>%
tm_shape() +
tm_markers() +
tm_basemap(c("OpenStreetMap.Mapnik", "Stamen.Terrain",
"Esri.WorldImagery", base_usgs_topo))
library(worldmet)
library(GSODR)
ep_lat <- 40.8360
ep_lon <- -80.5227
ep_met_stations <- nearest_stations(LAT = ep_lat,
LON = -ep_lon,
distance = 25)
ep_met_stations <- nearest_stations(LAT = ep_lat,
LON = -ep_lon,
distance = 25)
ep_met_stations
ep_met_stations <- nearest_stations(LAT = ep_lat,
LON = -ep_lon,
distance = 50)
ep_met_stations
ep_met_stations <- nearest_stations(LAT = ep_lat,
LON = -ep_lon,
distance = 100)
ep_met_stations
GSODR::update_station_list()
load(system.file("extdata", "isd_history.rda", package = "GSODR"))
map_gsod <- isd_history  %>% leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(~ LON, ~ LAT, popup = ~ STNID, clusterOptions = T)
library(tidyverse)
library(tigris)
library(USAboundaries)
library(elevatr)
library(sf)
library(tmap)
library(leaflet)
map_gsod <- isd_history  %>% leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(~ LON, ~ LAT, popup = ~ STNID, clusterOptions = T)
map_gsod
map_gsod
isd_history %>%
filter(STNID %in% ep_met_stations)
ep_met_stations <- nearest_stations(LAT = ep_lat,
LON = ep_lon,
distance = 25)
ep_met_stations
isd_history %>%
filter(STNID %in% ep_met_stations)
ep_met_stations <- nearest_stations(LAT = ep_lat,
LON = ep_lon,
distance = 50)
ep_met_stations
isd_history %>%
filter(STNID %in% ep_met_stations)
ep_met_stations <- nearest_stations(LAT = ep_lat,
LON = ep_lon,
distance = 50, return.full = T)
ep_met_stations <- nearest_stations(LAT = ep_lat,
LON = ep_lon,
distance = 50, return_full = T)
met_df <- get_GSOD(years = 2023, station = "725124-64705")
View(met_df)
OH_counties <- counties(state = "OH",
cb = TRUE) # cb = TRUE specifies to download a lower resolution file (faster download)
ep_map <- OH_counties %>%
filter(NAME == "Columbiana") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("RIGHT", "BOTTOM"))     # add a scale bar
ep_map
tmap_mode("plot")
ep_map <- OH_counties %>%
filter(NAME == "Columbiana") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("RIGHT", "BOTTOM"))     # add a scale bar
ep_map
tmap_mode("plot")
ep_map <- OH_counties %>%
filter(NAME == "Columbiana") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
ep_map
tmap_mode("plot")
ep_map <- OH_counties %>%
filter(NAME == "Columbiana") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_dots()
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
tmap_mode("plot")
ep_map <- OH_counties %>%
filter(NAME == "Columbiana") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_dots() +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
ep_map
tmap_mode("plot")
ep_map <- OH_counties %>%
filter(NAME == "Columbiana") %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_markers() +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
ep_map
OH_counties <- counties(state = c("OH", "PA"),
cb = TRUE) # cb = TRUE specifies to download a lower resolution file (faster download)
tmap_mode("plot")
ep_map <- EP_counties %>%
filter(NAME %in% c("Columbiana", "Beaver")) %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_markers() +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
EP_counties <- counties(state = c("OH", "PA"),
cb = TRUE) # cb = TRUE specifies to download a lower resolution file (faster download)
tmap_mode("plot")
ep_map <- EP_counties %>%
filter(NAME %in% c("Columbiana", "Beaver")) %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_markers() +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
ep_map
library(splitr)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
library(splitr)
library(here)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = "./met",
exec_dir = "./out"
)
getwd()
trajectory <-
hysplit_trajectory(
lat = ep_lat,
lon = ep_lon,
height = 10,
duration = 24,
days = "2023-02-03",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = "met",
exec_dir = "out"
)
trajectory <-
hysplit_trajectory(
lat = 42.83752,
lon = -80.30364,
height = 50,
duration = 24,
days = "2012-03-12",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
trajectory <-
hysplit_trajectory(
lat = 42.83752,
lon = -80.30364,
height = 50,
duration = 24,
days = "2012-03-12",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = "met",
exec_dir = "out"
)
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "backward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "backward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "backward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "backward",
met_type = "reanalysis",
met_dir = "met",
exec_dir = "out"
) %>%
run_model()
# Get a data frame containing the model results
trajectory_tbl <- trajectory_model %>% get_output_tbl()
trajectory_tbl
# Get a data frame containing the model results
trajectory_tbl <- trajectory_model %>% run_model()
trajectory_tbl
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 2,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "backward",
met_type = "reanalysis",
met_dir = "met",
exec_dir = "out"
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 2,
days = "2015-07-01",
daily_hours = c(0, 10),
direction = "backward",
met_type = "reanalysis",
met_dir = "met",
exec_dir = "out"
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 2,
days = "2015-07-01",
daily_hours = c(0, 10),
direction = "backward",
met_type = "reanalysis",
met_dir = "./met",
exec_dir = "./out"
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 24,
days = "2015-07-01",
daily_hours = c(0, 10),
direction = "backward",
met_type = "reanalysis",
met_dir = "./met",
exec_dir = "./out"
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 24,
days = "2015-07-01",
daily_hours = c(0, 10),
direction = "backward",
met_type = "reanalysis",
met_dir = "./met",
exec_dir = "./out"
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 24,
days = "2015-07-01",
daily_hours = c(0, 10),
direction = "forward",
met_type = "reanalysis",
met_dir = "./met",
exec_dir = "./out"
) %>%
run_model()
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 24,
days = "2015-07-01",
daily_hours = c(0, 10),
direction = "forward",
met_type = "reanalysis",
met_dir = "met",
exec_dir = "out"
) %>%
run_model()
nwis_ep_sites <- whatNWISsites(countyCd = "39029",
parameterCd = c("00060","00065"),
service = "dv"
)
library(dataRetrieval)
nwis_ep_sites <- whatNWISsites(countyCd = "39029",
parameterCd = c("00060","00065"),
service = "dv"
)
View(nwis_ep_sites)
nwis_ep_sites <- whatNWISsites(countyCd = c("39029","40007"),
parameterCd = c("00060","00065"),
service = "dv"
)
View(nwis_ep_sites)
nwis_ep_sites <- whatNWISsites(countyCd = c("39029","42007"),
parameterCd = c("00060","00065"),
service = "dv"
)
nwis_ep_sites_sw <- whatNWISsites(countyCd = c("39029","42007"),
parameterCd = c("00060","00065"),
service = "dv"
)
tmap_mode("plot")
ep_map <- EP_counties %>%
#filter(NAME %in% c("Columbiana", "Beaver")) %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_markers() +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
ep_map
tmap_mode("plot")
ep_map <- EP_counties %>%
filter(NAME %in% c("Columbiana", "Beaver")) %>%
tm_shape() +
tm_polygons(col = "lightgrey", border.col = "black") +
tm_shape(ep_site) +
tm_markers() +
tm_scale_bar(breaks = c(0, 5, 10), size = 1, position = c("LEFT", "BOTTOM"))     # add a scale bar
ep_map
