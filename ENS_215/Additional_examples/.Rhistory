fig_map
q <- opq(bbox = 'Namibia') %>%
add_osm_feature(key = 'natural', value = 'spring')
q_sf <- osmdata_sf(q)
tmap_mode("view")
fig_map <- q_sf$osm_points %>%
tm_shape() +
tm_dots(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
q <- opq(bbox = 'Australia') %>%
add_osm_feature(key = 'natural', value = 'spring')
q_sf <- osmdata_sf(q)
tmap_mode("view")
fig_map <- q_sf$osm_points %>%
tm_shape() +
tm_dots(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
q1 <- opq(bbox = 'Spain') %>%
add_osm_feature(key = 'waterway', value = 'pressurized')
q_sf1 <- osmdata_sf(q1)
View(q1)
tmap_mode("view")
fig_map <- q_sf1$osm_lines %>%
tm_shape() +
tm_lines(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
q1 <- opq(bbox = 'Saudi Arabia') %>%
add_osm_feature(key = 'waterway', value = 'pressurized')
q_sf1 <- osmdata_sf(q1)
q1 <- opq(bbox = 'United States') %>%
add_osm_feature(key = 'waterway', value = 'pressurized')
q_sf1 <- osmdata_sf(q1)
tmap_mode("view")
fig_map <- q_sf1$osm_lines %>%
tm_shape() +
tm_lines(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
q1 <- opq(bbox = 'United States') %>%
add_osm_feature(key = 'waterway', value = 'pressurized')
q_sf1 <- osmdata_sf(q1)
tmap_mode("view")
fig_map <- q_sf1$osm_lines %>%
tm_shape() +
tm_lines(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
View(q_sf1)
q1 <- opq(bbox = 'United States') %>%
add_osm_feature(key = 'waterway', value = 'pressurized')
q_sf1 <- osmdata_sf(q1)
tmap_mode("view")
fig_map <- q_sf1$osm_lines %>%
tm_shape() +
tm_lines(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
q1 <- opq(bbox = 'Charleston, NC') %>%
add_osm_feature(key = 'historic')
q_sf1 <- osmdata_sf(q1)
tmap_mode("view")
fig_map <- q_sf1$osm_points %>%
tm_shape() +
tm_lines(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
q1 <- opq(bbox = 'Charleston, NC') %>%
add_osm_feature(key = 'historic', value = "building")
q_sf1 <- osmdata_sf(q1)
tmap_mode("view")
fig_map <- q_sf1$osm_points %>%
tm_shape() +
tm_lines(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
View(q_sf1)
q1 <- opq(bbox = 'Charleston, SC') %>%
add_osm_feature(key = 'historic', value = "building")
q_sf1 <- osmdata_sf(q1)
tmap_mode("view")
fig_map <- q_sf1$osm_points %>%
tm_shape() +
tm_lines(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
tmap_mode("view")
fig_map <- q_sf1$osm_points %>%
tm_shape() +
tm_dots(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
View(q_sf1)
tmap_mode("view")
fig_map <- q_sf1$osm_points %>%
tm_shape() +
tm_polygons(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
tmap_mode("view")
fig_map <- q_sf1$osm_points %>%
tm_shape() +
tm_polygons(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
tmap_mode("view")
fig_map <- q_sf1$osm_polygons %>%
tm_shape() +
tm_polygons(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
q1 <- opq(bbox = 'Boston, MA') %>%
add_osm_feature(key = 'historic', value = "building")
q_sf1 <- osmdata_sf(q1)
tmap_mode("view")
fig_map <- q_sf1$osm_polygons %>%
tm_shape() +
tm_polygons(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
q1 <- opq('Charleston, SC') %>%
add_osm_feature(key = 'highway', value = 'cycleway')
cway_sev <- osmdata_sp(q1)
sp::plot(cway_sev$osm_lines)
sp::plot(cway_sev$osm_lines)
q1 <- opq('Charleston, SC') %>%
add_osm_feature(key = 'highway', value = 'cycleway')
cway_sev <- osmdata_sf(q1)
sp::plot(cway_sev$osm_lines)
q1 <- opq('Charleston, SC') %>%
add_osm_feature("highway",
c("motorway", "primary", "secondary", "tertiary")) %>%
osmdata_sf()
cway_sev <- osmdata_sf(q1)
cway_sev <- osmdata_sf(q1)
View(q1)
tmap_mode("plot")
q1$osm_lines %>%
tm_shape() +
tm_lines()
bbox_charleston <- opq(bbox = 'Charleston, SC')
# retrieving data of streets in Charleston
SC_streets <- bbox_charleston %>%
opq() %>%
add_osm_feature("highway", c("motorway", "primary", "secondary", "tertiary")) %>%
osmdata_sf()
bbox_charleston <- opq(bbox = 'Charleston, SC')
# retrieving data of streets in Charleston
SC_streets <- bbox_charleston %>%
opq() %>%
add_osm_feature("highway", c("motorway", "primary", "secondary", "tertiary")) %>%
osmdata_sf()
bbox_charleston <- getbb("Charleston, SC")
# retrieving data of streets in Charleston
SC_streets <- bbox_charleston %>%
opq() %>%
add_osm_feature("highway", c("motorway", "primary", "secondary", "tertiary")) %>%
osmdata_sf()
# retrieving data of small streets in Charleston
SC_small_streets <- bbox_charleston %>%
opq() %>%
add_osm_feature(key = "highway", value = c("residential", "living_street", "unclassified", "service", "footway")) %>%
osmdata_sf()
tmap_mode("plot")
SC_streets$osm_lines %>%
tm_shape() +
tm_lines()
tmap_mode("plot")
SC_streets$osm_lines %>%
tm_shape() +
tm_lines(lwd = 1)
tmap_mode("plot")
SC_streets$osm_lines %>%
tm_shape() +
tm_lines(lwd = 1) +
tm_shape(SC_small_streets$osm_lines) +
tm_lines(lwd = 0.25)
tmap_mode("plot")
SC_streets$osm_lines %>%
tm_shape() +
tm_lines(lwd = 1) +
tm_shape(SC_small_streets$osm_lines) +
tm_lines(lwd = 0.25, col = "grey")
tmap_mode("plot")
SC_streets$osm_lines %>%
tm_shape() +
tm_lines(lwd = 1, col = "white") +
tm_shape(SC_small_streets$osm_lines) +
tm_lines(lwd = 0.25, col = "white") +
tm_layout(bg.color = "black")
tmap_mode("plot")
SC_streets$osm_lines %>%
tm_shape() +
tm_lines(lwd = 1, col = "white") +
tm_shape(SC_small_streets$osm_lines) +
tm_lines(lwd = 0.1, col = "white") +
tm_layout(bg.color = "black")
tmap_mode("plot")
SC_streets$osm_lines %>%
tm_shape() +
tm_lines(lwd = 1, col = "white") +
tm_shape(SC_small_streets$osm_lines) +
tm_lines(lwd = 0.1, col = "orange") +
tm_layout(bg.color = "black")
tmap_mode("plot")
SC_streets$osm_lines %>%
tm_shape() +
tm_lines(lwd = 1, col = "white") +
tm_shape(SC_small_streets$osm_lines) +
tm_lines(lwd = 0.1, col = "white") +
tm_layout(bg.color = "black")
q <- opq(bbox = 'United States') %>%
add_osm_feature(key = 'natural', value = 'spring')
q_sf <- osmdata_sf(q)
q <- opq(bbox = 'Arizona') %>%
add_osm_feature(key = 'natural', value = 'spring')
q_sf <- osmdata_sf(q)
tmap_mode("view")
fig_map <- q_sf$osm_points %>%
tm_shape() +
tm_dots(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
q <- opq(bbox = 'Massachusetts') %>%
add_osm_feature(key = 'natural', value = 'spring')
q_sf <- osmdata_sf(q)
tmap_mode("view")
fig_map <- q_sf$osm_points %>%
tm_shape() +
tm_dots(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
q <- opq(bbox = 'South Dakota') %>%
add_osm_feature(key = 'natural', value = 'spring')
q_sf <- osmdata_sf(q)
tmap_mode("view")
fig_map <- q_sf$osm_points %>%
tm_shape() +
tm_dots(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
q <- opq(bbox = 'Nebraska') %>%
add_osm_feature(key = 'natural', value = 'spring')
q_sf <- osmdata_sf(q)
tmap_mode("view")
fig_map <- q_sf$osm_points %>%
tm_shape() +
tm_dots(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
q <- opq(bbox = 'Florida') %>%
add_osm_feature(key = 'natural', value = 'spring')
q_sf <- osmdata_sf(q)
tmap_mode("view")
fig_map <- q_sf$osm_points %>%
tm_shape() +
tm_dots(col = "purple") +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap.Mapnik",
"Esri.WorldShadedRelief"),
group = c("Satellite","OSM", "Topo"))
fig_map
library(tidyverse)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(FactoMineR)
library(tmap)
library(sf)
set.seed(123)
usgs_soil <- readxl::read_xlsx(path = "C:/Users/stahlm/Desktop/soil_usgs/Appendix_4a_Chorizon_18Sept2013.xlsx",
sheet = "C_Horizon_formatted", skip = 12
)
table_cluster <- usgs_soil %>%
select(SiteID,
C_Al, C_Ba, C_Ca, C_C_Org, C_Fe, C_K, C_Mg, C_Na, C_Ti, C_S
)
table_cluster <- column_to_rownames(table_cluster, var = "SiteID")
table_cluster <- table_cluster %>% mutate_all(as.numeric)
table_cluster <- table_cluster %>%
drop_na()
table_cluster_scaled <- scale(table_cluster)
res.pca <- PCA(table_cluster_scaled,  graph = FALSE)
# Control variable colors using their contributions
fviz_pca_var(res.pca, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_nbclust(
table_cluster_scaled,
pam,
k.max = 15,
method = "wss",
diss = get_dist(table_cluster, method = "spearman")
#diss = get_dist(table_cluster, method = "euclidean")
)
View(usgs_soil)
n_clust = 6
#k_n <- kmeans(table_cluster_scaled, centers = n_clust, nstart = 100, iter.max = 15000)
k_n = cluster::pam(table_cluster_scaled, k = n_clust)
fig_cluster <- fviz_cluster(k_n, data = table_cluster_scaled, ellipse = T, palette = "Set2",
geom = "point") +
theme_classic()
n_clust = 6
#k_n <- kmeans(table_cluster_scaled, centers = n_clust, nstart = 100, iter.max = 15000)
k_n = cluster::pam(table_cluster_scaled, k = n_clust)
fig_cluster <- fviz_cluster(k_n, data = table_cluster_scaled, ellipse = T, palette = "Set2",
geom = "point") +
theme_classic()
fig_cluster
df_cluster_info <- tibble(SiteID = row.names(table_cluster_scaled),
cluster_id = k_n$cluster) %>%
mutate(SiteID = as.numeric(SiteID))
usgs_soil <- usgs_soil %>%
left_join(df_cluster_info)
usgs_soil <- usgs_soil %>%
mutate(cluster_id = factor(cluster_id))
usgs_soil <- usgs_soil %>%
mutate(across(starts_with("C_"), as.numeric))
usgs_soil %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = C_As, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
usgs_soil %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = C_Fe, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
usgs_soil %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = C_S, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
usgs_soil %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = C_Ca, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
usgs_soil %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = C_Tot_Carb, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
usgs_soil %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = C_Tot_Clay, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
usgs_soil %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = C_Tot_Carb, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
usgs_soil %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = C_Amorph, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
usgs_soil %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = C_Pb, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
usgs_soil %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = C_U, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
usgs_soil %>%
filter(!is.na(cluster_id)) %>%
mutate(C_C_Org = as.numeric(C_C_Org)) %>%
ggplot(aes(x = cluster_id, y = C_U, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
sf_usgs_soil <- usgs_soil %>%
st_as_sf(coords = c("Longitude", "Latitude"))
tmap_mode("view")
sf_usgs_soil %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "cluster_id", palette = "Set2",
popup.vars = c("cluster_id")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar()
sf_usgs_soil
tmap_mode("view")
fig_map <- sf_usgs_soil %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "cluster_id", palette = "Set2",
popup.vars = c("cluster_id")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar()
fig_map
install.packages("hubeau")
library(tidyverse)
library(hubeau)
library(tidyverse)
library(hubeau)
library(mapview)
library(sf)
my_water_table_code <- "GG063"
list_endpoints(api = "niveaux_nappes")
list_params(api = "niveaux_nappes",
endpoint = "stations")
stations <- get_niveaux_nappes_stations(
codes_masse_eau_edl = my_water_table_code
)
View(stations)
param_chroniques <- paste(
list_params(api = "niveaux_nappes",
endpoint = "chroniques"),
collapse = ","
)
water_table_level <- map_df(
.x = stations$code_bss,
.f = function(x)
get_niveaux_nappes_chroniques(code_bss = x,
date_debut_mesure = "2015-01-01")
)
View(water_table_level)
water_table_level <- water_table_level %>%
mutate(date_mesure = lubridate::ymd(date_mesure),
year = lubridate::year(date_mesure),
month = lubridate::month(date_mesure))
water_table_level %>%
ggplot(aes(x = date_mesure, y = niveau_nappe_eau)) +
geom_line() +
facet_wrap(~code_bss)
water_table_level %>%
ggplot(aes(x = date_mesure, y = niveau_nappe_eau)) +
geom_line() +
facet_wrap(~code_bss, scales = "free_y")
unique(water_table_level$qualification)
water_table_level %>%
filter(qualification == "Correcte") %>%
ggplot(aes(x = date_mesure, y = niveau_nappe_eau)) +
geom_line() +
facet_wrap(~code_bss, scales = "free_y")
