## Map the function over the collection.
ndviCollection <- collection$map(addNDVI)
ndviCollection[1]
ndviCollection$getInfo
ndviCollection$first
Map$addLayer(ndviCollection$first)
Map$addLayer(ndviCollection)
## This function gets NDVI from Landsat 8 imagery.
addNDVI <- function(image) {
ndvi <- (image[["B5"]] - image[["B4"]])/(image[["B5"]] + image[["B4"]])
image$addBands(ndvi)
}
## Load the Landsat 8 raw data, filter by location and date.
ee_geom <- ee$Geometry$Point(-122.262, 37.8719)
collection <- ee$ImageCollection('LANDSAT/LC08/C01/T1') %>%
ee$ImageCollection$filterBounds(ee_geom) %>%
ee$ImageCollection$filterDate("2014-06-01", "2014-10-01")
## Map the function over the collection.
ndviCollection <- collection$map(addNDVI)
ndviCollection
Map$addLayers(ndviCollection)
## This function gets NDVI from Landsat 5 imagery.
getNDVI <- function(image) {
return(image$normalizedDifference('B4', 'B3'))
}
## Load two Landsat 5 images, 20 years apart.
image1 = ee$Image('LANDSAT/LT05/C01/T1_TOA/LT05_044034_19900604')
image2 = ee$Image('LANDSAT/LT05/C01/T1_TOA/LT05_044034_20100611')
## Compute NDVI from the scenes.
ndvi1 = getNDVI(image1)
## Instantiate an image with the Image constructor.
image <- ee$Image("CGIAR/SRTM90_V4")
## Zoom to a location.
Map$setCenter(-112.8598, 36.2841, 9) ## Center on the Grand Canyon.
## Display the image on the map.
Map$addLayer(image)
Map$addLayer(image)
## Load the SRTM image.
srtm <- ee$Image("CGIAR/SRTM90_V4")
## Apply an algorithm to an image.
slope <- ee$Terrain$slope(srtm)
## Display the result.
Map$setCenter(-112.8598, 36.2841, 9) ## Center on the Grand Canyon.
Map$addLayer(
slope,
list(min = 0, max = 60),
"slope"
)
Map$addLayer(
slope,
list(min = 0, max = 60),
"slope"
)
install.packages("gapminder")
library(gapminder)
library(gapminder)
library(tidyverse)
my_gap <- gapminder
nested_data <- my_gap %>%
group_by(continent) %>%
nest() %>%
ungroup()
my_gap <- gapminder
nested_data <- my_gap %>%
group_by(continent) %>%
nest() %>%
ungroup()
View(nested_data)
View(nested_data[[2]][[1]])
nested_data %>%
mutate(
lin_mod = map(
data,
function(x) lm(data = x, lifeExp ~ year)
),
coefs <- map(lin_mod, coefficients)
)
nested_data |>
mutate(
lin_mod = map(
data,
function(x) lm(data = x, lifeExp ~ year)
),
coefficients = map(lin_mod, coefficients),
slope = map_dbl(coefficients, \(x) x[2]),
slope_short = map_dbl(coefficients, 2)
)
View(nested_data)
View(nested_data[[2]][[1]])
a <- nested_data |>
mutate(
lin_mod = map(
data,
function(x) lm(data = x, lifeExp ~ year)
),
coefficients = map(lin_mod, coefficients),
slope = map_dbl(coefficients, \(x) x[2]),
slope_short = map_dbl(coefficients, 2)
)
View(a)
View(a[[3]][[1]])
library(splitr)
library(here)
trajectory <-
hysplit_trajectory(
lat = 42.83752,
lon = -80.30364,
height = 50,
duration = 24,
days = "2018-03-12",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "reanalysis",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
library(splitr)
library(here)
trajectory <-
hysplit_trajectory(
lat = 42.83752,
lon = -80.30364,
height = 50,
duration = 24,
days = "2018-03-12",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "reanalysis",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
library(splitr)
library(here)
trajectory <-
hysplit_trajectory(
lat = 42.83752,
lon = -80.30364,
height = 50,
duration = 24,
days = "2018-03-12",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
library(splitr)
library(here)
trajectory <-
hysplit_trajectory(
lat = 42.83752,
lon = -80.30364,
height = 50,
duration = 24,
days = "2012-03-12",
daily_hours = c(0, 6, 12, 18),
direction = "forward",
met_type = "gdas1",
extended_met = TRUE,
met_dir = here::here("met"),
exec_dir = here::here("out")
)
library(splitr)
library(here)
# Create the `trajectory_model` object, add
# various parameters with `add_trajectory_params()`,
# and execute the model runs
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "backward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
library(splitr)
library(here)
# Create the `trajectory_model` object, add
# various parameters with `add_trajectory_params()`,
# and execute the model runs
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-01-01"),
lubridate::ymd("2023-01-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-01-01"),
lubridate::ymd("2023-01-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
getOption('timeout')
options(timeout=10000)
#Build the model
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-01-01"),
lubridate::ymd("2023-01-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
trajectory_model_complete <-trajectory_model[complete.cases(trajectory_model), ]
trajectory_plot(trajectory_model_complete)
View(trajectory)
getOption('timeout')
options(timeout=10000)
#Build the model
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-01-01"),
lubridate::ymd("2023-01-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
warnings()
getOption('timeout')
options(timeout=20000)
#Build the model
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-01-01"),
lubridate::ymd("2023-01-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
library(splitr)
library(here)
getOption('timeout')
options(timeout=20000)
# Create the `trajectory_model` object, add
# various parameters with `add_trajectory_params()`,
# and execute the model runs
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "backward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
# Create the `trajectory_model` object, add
# various parameters with `add_trajectory_params()`,
# and execute the model runs
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "forward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
# Create the `trajectory_model` object, add
# various parameters with `add_trajectory_params()`,
# and execute the model runs
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "forward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
# Create the `trajectory_model` object, add
# various parameters with `add_trajectory_params()`,
# and execute the model runs
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "forward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
# Create the `trajectory_model` object, add
# various parameters with `add_trajectory_params()`,
# and execute the model runs
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "forward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-01-01"),
lubridate::ymd("2023-01-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-01-01"),
lubridate::ymd("2023-01-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
getOption('timeout')
options(timeout=20000)
#Build the model
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-01-01"),
lubridate::ymd("2023-01-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
warnings()
#HYSPLIT Backtrajectory Analysis
library(splitr)
library(lubridate)
#library(devtools)
#install_github("rich-iannone/splitr")
#Prevent timing out
getOption('timeout')
options(timeout=20000)
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-01-01"),
lubridate::ymd("2023-01-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-08-01"),
lubridate::ymd("2023-08-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
trajectory_model_complete <-trajectory_model[complete.cases(trajectory_model), ]
trajectory_plot(trajectory_model_complete)
warnings()
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-01-01"),
lubridate::ymd("2023-01-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-08-01"),
lubridate::ymd("2023-08-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
trajectory_model <-hysplit_trajectory(
lat = 9.99645,
lon = 76.3427,
height = 30,
duration = 48,
met_type = "reanalysis",
direction	= "forward",
days = seq(
lubridate::ymd("2023-10-01"),
lubridate::ymd("2023-10-10"),
by = "1 day"
),
daily_hours = c(8,16,24)
)
# Create the `trajectory_model` object, add
# various parameters with `add_trajectory_params()`,
# and execute the model runs
trajectory_model <-
create_trajectory_model() %>%
add_trajectory_params(
lat = 43.45,
lon = -79.70,
height = 50,
duration = 6,
days = "2015-07-01",
daily_hours = c(0, 12),
direction = "forward",
met_type = "reanalysis",
met_dir = here::here("met"),
exec_dir = here::here("out")
) %>%
run_model()
