endpoint = "chroniques"),
collapse = ","
)
water_table_level <- map_df(
.x = stations$code_bss,
.f = function(x)
get_niveaux_nappes_chroniques(code_bss = x,
date_debut_mesure = "2015-01-01")
)
View(water_table_level)
water_table_level <- water_table_level %>%
mutate(date_mesure = lubridate::ymd(date_mesure),
year = lubridate::year(date_mesure),
month = lubridate::month(date_mesure))
water_table_level %>%
ggplot(aes(x = date_mesure, y = niveau_nappe_eau)) +
geom_line() +
facet_wrap(~code_bss)
water_table_level %>%
ggplot(aes(x = date_mesure, y = niveau_nappe_eau)) +
geom_line() +
facet_wrap(~code_bss, scales = "free_y")
unique(water_table_level$qualification)
water_table_level %>%
filter(qualification == "Correcte") %>%
ggplot(aes(x = date_mesure, y = niveau_nappe_eau)) +
geom_line() +
facet_wrap(~code_bss, scales = "free_y")
library(tidyverse)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(FactoMineR)
library(tmap)
library(sf)
set.seed(123)
bangladesh_gw <- read_csv("https://stahlm.github.io/ENS_215/Data/NationalSurveyData_DPHE_BGS_LabData.csv")
View(bangladesh_gw)
table_cluster <- bangladesh_gw %>%
select(SAMPLE_ID,
Ba_mgL,
Ca_mgL,
Fe_mgL,
Mn_mgL,
K__mgL,
Mg_mgL,
Na_mgL,
Si_mgL,
SO4_mgL,
Sr_mgL) %>%
drop_na() # need to drop any samples with NA values since can't cluster sites with missing data
table_cluster <- column_to_rownames(table_cluster, var = "SAMPLE_ID")
table_cluster_scaled <- scale(table_cluster)
res.pca <- PCA(table_cluster_scaled,  graph = FALSE)
# Control variable colors using their contributions
fviz_pca_var(res.pca, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_nbclust(
table_cluster_scaled,
pam,
k.max = 10,
method = "wss",
diss = get_dist(table_cluster, method = "spearman")
#diss = get_dist(table_cluster, method = "euclidean")
)
fviz_nbclust(
table_cluster_scaled,
pam,
k.max = 10,
method = "wss",
diss = get_dist(table_cluster, method = "spearman")
#diss = get_dist(table_cluster, method = "euclidean")
)
n_clust = 6
#k_n <- kmeans(table_cluster_scaled, centers = n_clust, nstart = 100, iter.max = 15000)
k_n = cluster::pam(table_cluster_scaled, k = n_clust)
fig_cluster <- fviz_cluster(k_n, data = table_cluster_scaled, ellipse = T, palette = "Set2",
geom = "point") +
theme_classic()
fig_cluster
df_cluster_info <- tibble(SAMPLE_ID = row.names(table_cluster_scaled),
cluster_id = k_n$cluster)
bangladesh_gw <- bangladesh_gw %>%
left_join(df_cluster_info)
bangladesh_gw <- bangladesh_gw %>%
mutate(cluster_id = factor(cluster_id))
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = As_ugL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Fe_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = SO4_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = Si_mgL, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
ggplot(aes(x = cluster_id, y = WELL_DEPTH_m, fill = cluster_id)) +
geom_boxplot() +
scale_fill_brewer(type = "qual", palette = "Set2") +
scale_y_log10() +
theme_classic() +
theme(legend.position = "none")
summary(bangladesh_gw$cluster_id)
sf_bangladesh_gw <- bangladesh_gw %>%
st_as_sf(coords = c("LONG_DEG", "LAT_DEG"))
tmap_mode("view")
sf_bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "cluster_id", palette = "Set2",
popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar()
sf_bangladesh_gw %>%
filter(!is.na(cluster_id)) %>%
tm_shape() +
tm_dots(col = "cluster_id", palette = "Set2",
popup.vars = c("cluster_id", "WELL_DEPTH_m", "As_ugL")
) +
tm_mouse_coordinates() +
tm_basemap(server = c("Esri.WorldImagery", "OpenStreetMap", "Esri.WorldShadedRelief")) +
tm_scale_bar()
library(randomForest)
df_rf <- bangladesh_gw
set.seed(123)
rf_classifier = randomForest(rf_formula, data = df_rf, ntree= 1000, keep.forest = T,
localImp = T,
mtry = 4
)
rf_formula <- as.formula(As_ugL ~
Ca_mgL +
Ba_mgL +
Fe_mgL +
Mn_mgL +
SO4_mgL +
Sr_mgL +
Na_mgL
)
set.seed(123)
rf_classifier = randomForest(rf_formula, data = df_rf, ntree= 1000, keep.forest = T,
localImp = T,
mtry = 4
)
df_rf <- bangladesh_gw %>%
drop_na()
set.seed(123)
rf_classifier = randomForest(rf_formula, data = df_rf, ntree= 1000, keep.forest = T,
localImp = T,
mtry = 4
)
rf_classifier
plot(rf_classifier)
df_rf_importance <- importance(rf_classifier)
df_rf_importance <- importance(rf_classifier)
df_rf_importance
View(df_rf_importance)
df_rf_importance <- importance(rf_classifier, scale = T)
df_rf_importance
varImpPlot(rf_classifier)
library(AOI)
library(tidyverse)
library(tidygeocoder)
library(leaflet)
a <- c("807 Union Street, Schenectady, NY",
"2151 River Road, Niskayuna, NY")
b <- c("loc 1", "loc 2")
c <- data.frame(name = b, addr = a)
View(c)
df_coords <- geocode(.tbl = c, address = addr, method = 'census')
View(df_coords)
df_coords %>%
leaflet() %>%
addTiles() %>%
addMarkers(lng = ~long, lat = ~lat)
df_locations <- read_xlsx("./Geocoding.xlsx", sheet = "Without Coordinates")
library(AOI)
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(readxl)
df_locations <- read_xlsx("./Geocoding.xlsx", sheet = "Without Coordinates")
View(df_locations)
df_test <- df_locations[1:10,]
View(df_test)
df_locations <- df_locations %>%
rename(Full_Address = `Full Address`)
df_test <- df_locations[1:10,]
df_coords <- geocode(.tbl = df_test, address = Full_Address, method = 'census')
View(df_test)
View(df_coords)
df_test <- df_locations[1:100,]
df_coords <- geocode(.tbl = df_test, address = Full_Address, method = 'census')
View(df_coords)
df_locations <- df_locations %>%
rename(Full_Address = `Full Address`) %>%
filter(Address == "Unknown")
library(AOI)
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(readxl)
df_locations <- read_xlsx("./Geocoding.xlsx", sheet = "Without Coordinates")
df_locations <- df_locations %>%
rename(Full_Address = `Full Address`) %>%
filter(Address == "Unknown")
library(AOI)
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(readxl)
df_locations <- read_xlsx("./Geocoding.xlsx", sheet = "Without Coordinates")
df_locations <- df_locations %>%
rename(Full_Address = `Full Address`) %>%
filter(Address != "Unknown")
library(AOI)
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(readxl)
df_locations <- read_xlsx("./Geocoding.xlsx", sheet = "Without Coordinates")
df_locations <- df_locations %>%
rename(Full_Address = `Full Address`) %>%
filter(Address != "Unknown")
library(AOI)
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(readxl)
df_locations <- read_xlsx("./Geocoding.xlsx", sheet = "Without Coordinates")
df_locations <- df_locations %>%
rename(Full_Address = `Full Address`)
df_test <- df_locations[1:100,]
df_coords_test <- geocode(.tbl = df_test, address = Full_Address, method = 'census')
df_coords_test <- geocode(.tbl = df_test, address = Full_Address, method = 'census')
df_location_01 <- df_locations[1:5000,]
df_location_02 <- df_locations[5001:nrow(df_locations),]
library(AOI)
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(readxl)
df_locations <- read_xlsx("./Geocoding.xlsx", sheet = "Without Coordinates")
df_locations <- df_locations %>%
rename(Full_Address = `Full Address`)
df_test <- df_locations[1:100,]
df_coords_test <- geocode(.tbl = df_test, address = Full_Address, method = 'census')
library(AOI)
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(readxl)
df_locations <- read_xlsx("./Geocoding.xlsx", sheet = "Without Coordinates")
df_locations <- df_locations %>%
rename(Full_Address = `Full Address`)
df_test <- df_locations[1:100,]
df_coords_test <- geocode(.tbl = df_test, address = Full_Address, method = 'census')
df_location_01 <- df_locations[1:5000,]
df_location_02 <- df_locations[5001:nrow(df_locations),]
df_coords_01 <- geocode(.tbl = df_location_01, address = Full_Address, method = 'census')
View(df_coords_01)
df_coords_02 <- geocode(.tbl = df_location_02, address = Full_Address, method = 'census')
df_coords <- df_coords_01 %>%
bind_rows(df_coords_02)
df_coords_with_lat_long <- df_coords %>%
filter(!is.na(lat), !is.na(long))
df_coords_with_lat_long %>%
leaflet() %>%
addTiles() %>%
addMarkers(lng = ~long, lat = ~lat)
fig_map <- df_coords_with_lat_long %>%
leaflet() %>%
addTiles() %>%
addMarkers(lng = ~long, lat = ~lat)
fig_map
write_csv(x = df_coords_with_lat_long, file = "./geocoding_results_for_emmett.csv")
View(df_coords_test)
library(AOI)
library(tidyverse)
library(tidygeocoder)
library(leaflet)
library(readxl)
df_locations <- read_xlsx("./Geocoding.xlsx", sheet = "Without Coordinates")
library(tidyverse)
library(terra)
library(climateR)
library(AOI)
aoi2use <- AOI::aoi_get(country = "Cambodia")
precip_raster <- climateR::getTerraClimNormals(AOI = aoi2use, varname = "prcp")
precip_raster <- climateR::getTerraClimNormals(AOI = aoi2use, varname = "ppt")
precip_raster <- precip_raster$ppt
library(tidyverse)
library(terra)
library(climateR)
library(AOI)
library(supercells)
library(tidyverse)
library(terra)
library(climateR)
library(AOI)
library(sf)
library(rgeoda)
supercell_raster <- supercells(x = precip_raster, k = 5, dist_fun = "dtw")
supercell_raster <- supercells(x = precip_raster, k = 5, dist_fun = "dtw", compactness = 1)
View(supercell_raster)
library(tidyverse)
library(terra)
library(climateR)
library(AOI)
library(sf)
#library(rgeoda)
library(supercells)
library(tmap)
tmap_mode("view")
tm_shape(supercell_raster) +
tm_polygons()
View(supercell_raster)
tmap_mode("view")
tm_shape(supercell_raster) +
tm_polygons(col = "supercells")
tmap_mode("view")
tm_shape(supercell_raster) +
tm_polygons(col = "supercells")
tm_shape(supercell_raster) +
tm_polygons(col = "supercells")
tm_shape(supercell_raster) +
tm_polygons(col = "supercells", style = "cat")
tm_shape(supercell_raster) +
tm_polygons(col = "supercells", style = "cat") +
tm_shape(aoi2use) +
tm_borders()
tm_shape(supercell_raster) +
tm_polygons(col = "supercells", style = "cat") +
tm_shape(aoi2use) +
tm_borders(col = "red")
supercell_raster <- supercells(x = precip_raster, k = 5, dist_fun = "dtw", compactness = 0.1)
tm_shape(supercell_raster) +
tm_polygons(col = "supercells", style = "cat") +
tm_shape(aoi2use) +
tm_borders(col = "red")
supercell_raster <- supercells(x = precip_raster, k = 7, dist_fun = "dtw", compactness = 0.1)
tm_shape(supercell_raster) +
tm_polygons(col = "supercells", style = "cat") +
tm_shape(aoi2use) +
tm_borders(col = "red")
supercell_raster <- supercells(x = precip_raster, k = 7,
dist_fun = "dtw", compactness = 0.1, clean = F)
tm_shape(supercell_raster) +
tm_polygons(col = "supercells", style = "cat") +
tm_shape(aoi2use) +
tm_borders(col = "red")
supercell_raster <- supercells(x = precip_raster, k = 7,
dist_fun = "dtw", compactness = 0.5, clean = F)
tm_shape(supercell_raster) +
tm_polygons(col = "supercells", style = "cat") +
tm_shape(aoi2use) +
tm_borders(col = "red")
supercell_raster <- supercells(x = precip_raster, k = 7,
dist_fun = "dtw", compactness = 10, clean = F)
tm_shape(supercell_raster) +
tm_polygons(col = "supercells", style = "cat") +
tm_shape(aoi2use) +
tm_borders(col = "red")
supercell_raster <- supercells(x = precip_raster, k = 7,
dist_fun = "dtw", compactness = 0.1, clean = F)
tm_shape(supercell_raster) +
tm_polygons(col = "supercells", style = "cat") +
tm_shape(aoi2use) +
tm_borders(col = "red")
View(supercell_raster)
supercell_raster <- supercells(x = precip_raster, k = 7,
dist_fun = "dtw", compactness = 0.01, clean = F)
tm_shape(supercell_raster) +
tm_polygons(col = "supercells", style = "cat") +
tm_shape(aoi2use) +
tm_borders(col = "red")
library(MODIStsp)
MODIStsp_get_prodlayers("MCD12Q1")
rnaturalearth::ne_countries(scale = "medium", country = "Cambodia", returnclass = "sf")
map_boundary <- rnaturalearth::ne_countries(scale = "medium",
country = "Cambodia", returnclass = "sf")
a<-climateR::params
View(a)
MODIStsp(gui             = FALSE,
out_folder      = "LandCoverData",
out_folder_mod  = "LandCoverData",
selprod         = "LandCover_Type_Yearly_500m (MCD12Q1)",
bandsel         = "LC1",
user            = "stahlm" ,
password        = "@THF$73rZUv8cx!",
start_date      = "2019.01.01",
end_date        = "2019.12.31",
verbose         = FALSE,
spatmeth        = "file",
spafile         = map_boundary,
out_format      = "GTiff")
MODIStsp(gui             = FALSE,
out_folder      = "LandCoverData",
out_folder_mod  = "LandCoverData",
selprod         = "LandCover_Type_Yearly_500m (MCD12Q1)",
bandsel         = "LC1",
user            = "stahlm" ,
password        = "@THF$73rZUv8cx!",
start_date      = "2019.01.01",
end_date        = "2019.12.31",
verbose         = FALSE,
spatmeth        = "file",
spafile         = "map_boundary",
out_format      = "GTiff")
map_boundary <- rnaturalearth::ne_countries(scale = "medium",
country = "Cambodia", returnclass = "shp")
map_boundary <- rnaturalearth::ne_countries(scale = "medium",
country = "Cambodia", returnclass = "sf")
sf::st_write("./data/map_boundary.shp")
sf::st_write(obj = map_boundary,"./data/map_boundary.shp")
MODIStsp(gui             = FALSE,
out_folder      = "LandCoverData",
out_folder_mod  = "LandCoverData",
selprod         = "LandCover_Type_Yearly_500m (MCD12Q1)",
bandsel         = "LC1",
user            = "stahlm" ,
password        = "@THF$73rZUv8cx!",
start_date      = "2019.01.01",
end_date        = "2019.12.31",
verbose         = FALSE,
spatmeth        = "file",
spafile         = "./data/map_boundary",
out_format      = "GTiff")
MODIStsp(gui             = FALSE,
out_folder      = "LandCoverData",
out_folder_mod  = "LandCoverData",
selprod         = "LandCover_Type_Yearly_500m (MCD12Q1)",
bandsel         = "LC1",
user            = "stahlm" ,
password        = "@THF$73rZUv8cx!",
start_date      = "2019.01.01",
end_date        = "2019.12.31",
verbose         = FALSE,
spatmeth        = "file",
spafile         = "./data/map_boundary.shp",
out_format      = "GTiff")
MODIStsp(gui             = FALSE,
out_folder      = "data",
out_folder_mod  = "data",
selprod         = "LandCover_Type_Yearly_500m (MCD12Q1)",
bandsel         = "LC1",
user            = "stahlm" ,
password        = "@THF$73rZUv8cx!",
start_date      = "2019.01.01",
end_date        = "2019.12.31",
verbose         = FALSE,
spatmeth        = "file",
spafile         = "./data/map_boundary.shp",
out_format      = "GTiff")
MODIStsp(gui             = FALSE,
out_folder      = "data",
out_folder_mod  = "data",
selprod         = "LandCover_Type_Yearly_500m (MCD12Q1)",
bandsel         = "LC1",
user            = "stahlm" ,
password        = "@THF$73rZUv8cx!",
start_date      = "2019.01.01",
end_date        = "2019.12.31",
verbose         = FALSE,
spatmeth        = "file",
spafile         = "./data/map_boundary.shp",
out_format      = "GTiff")
MODIStsp(gui             = FALSE,
out_folder      = "data",
out_folder_mod  = "data",
selprod         = "LandCover_Type_Yearly_500m (MCD12Q1)",
bandsel         = "LC1",
user            = "stahlm" ,
password        = "@THF$73rZUv8cx!",
start_date      = "2020.01.01",
end_date        = "2020.12.31",
verbose         = FALSE,
spatmeth        = "file",
spafile         = "./data/map_boundary.shp",
out_format      = "GTiff")
install.packages("geodata")
library(geodata)
source("C:/Users/stahlm/Documents/Teaching_UnionCollege/Environmental_Data_Analysis/stahlm.github.io/ENS_215/Additional_examples/data_resources.Rmd")
source("C:/Users/stahlm/Documents/Teaching_UnionCollege/Environmental_Data_Analysis/stahlm.github.io/ENS_215/Additional_examples/data_resources.Rmd")
source("C:/Users/stahlm/Documents/Teaching_UnionCollege/Environmental_Data_Analysis/stahlm.github.io/ENS_215/Additional_examples/data_resources.Rmd")
source("C:/Users/stahlm/Documents/Teaching_UnionCollege/Environmental_Data_Analysis/stahlm.github.io/ENS_215/Additional_examples/data_resources.Rmd")
