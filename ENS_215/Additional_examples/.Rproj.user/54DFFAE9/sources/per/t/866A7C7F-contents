---
title: "R Notebook"
output: html_notebook
---


```{r}
library(rgee)
library(reticulate)
```

```{r}
ee_Initialize()
#ee_install_upgrade()
```
```{r}
## Load an image.
image <- ee$Image('LANDSAT/LC08/C01/T1/LC08_044034_20140318')

## Center the map on the image.
Map$centerObject(image, 9)

## Display the image.
Map$addLayer(image)
```


```{r}
## Load the image from the archive.
image <- ee$Image('LANDSAT/LC08/C01/T1/LC08_044034_20140318')

## Define visualization parameters in an object literal.
vizParams <- list(
  bands = c('B5', 'B4', 'B3'),
  min = 5000, 
  max = 15000, 
  gamma = 1.3
)

## Center the map on the image and display.
Map$centerObject(image, 9)
Map$addLayer(image, vizParams, 'Landsat 8 false color')
```

```{r}
counties <- ee$FeatureCollection('TIGER/2016/Counties')
Map$addLayer(counties, {},'counties')
```


```{r}
" lon: -118.12500 | lat: 63.52866 | zoom: 1 "
point <- ee$Geometry$Point(-118.12500, 63.52866)
```
```{r}
start <- ee$Date('2014-06-01')
finish <- ee$Date('2014-10-01')
```


```{r}
filteredCollection <- ee$ImageCollection("LANDSAT/LC08/C01/T1") %>% 
  ee$ImageCollection$filterDate(start, finish) %>% 
  ee$ImageCollection$filterBounds(point) %>% 
  ee$ImageCollection$sort('CLOUD_cOVER')
```

```{r}
first <- filteredCollection$first()
```


```{r}
## Define visualization parameters in an object literal.
vizParams <- list(
  bands = c('B5', 'B4', 'B3'),
  min = 5000, 
  max = 15000, 
  gamma = 1.3
)

## Center the map on the image and display.
Map$centerObject(first, 9)
Map$addLayer(first, vizParams, 'Landsat 8 false color')
```

```{r}
getNDVI <- function(image) {
  return(image$normalizedDifference('B4', 'B3'))
}

```

```{r}
ndvi1 = getNDVI(first)
```

```{r}
a <- first$normalizedDifference('B4','B3')
```
```{r}
## This function gets NDVI from Landsat 5 imagery.
getNDVI <- function(image) {
  (image[["B4"]] - image[["B3"]])/(image[["B4"]] + image[["B3"]])
}

## Load two Landsat 5 images, 20 years apart.
image1 <- ee$Image('LANDSAT/LT05/C01/T1_TOA/LT05_044034_19900604')
image2 <- ee$Image('LANDSAT/LT05/C01/T1_TOA/LT05_044034_20100611')

## Compute NDVI from the scenes.
ndvi1 <- getNDVI(image1)
ndvi2 <- getNDVI(image2)

## Compute the difference in NDVI.
ndviDifference = ndvi2 - ndvi1
```

```{r}
## This function gets NDVI from Landsat 5 imagery.
getNDVI <- function(image) {
  return(image$normalizedDifference('B4', 'B3'))
}

## Load two Landsat 5 images, 20 years apart.
image1 = ee$Image('LANDSAT/LT05/C01/T1_TOA/LT05_044034_19900604')
image2 = ee$Image('LANDSAT/LT05/C01/T1_TOA/LT05_044034_20100611')

## Compute NDVI from the scenes.
ndvi1 = getNDVI(image1)
ndvi2 = getNDVI(image2)

## Compute the difference in NDVI.
ndviDifference = ndvi2$subtract(ndvi1)
```
```{r}
## This function gets NDVI from Landsat 5 imagery.
getNDVI <- function(image) {
  (image[["B4"]] - image[["B3"]])/(image[["B4"]] + image[["B3"]])
}

## Load two Landsat 5 images, 20 years apart.
image1 <- ee$Image('LANDSAT/LT05/C01/T1_TOA/LT05_044034_19900604')
image2 <- ee$Image('LANDSAT/LT05/C01/T1_TOA/LT05_044034_20100611')

## Compute NDVI from the scenes.
ndvi1 <- getNDVI(image1)
ndvi2 <- getNDVI(image2)

## Compute the difference in NDVI.
ndviDifference = ndvi2 - ndvi1
```


```{r}
Map$centerObject(ndviDifference,zoom=12)
Map$addLayer(ndviDifference)
```



```{r}
## Load a Landsat 8 collection.
collection <- ee$ImageCollection('LANDSAT/LC08/C01/T1') %>% 
  ## Filter by date and location.
  ee$ImageCollection$filterBounds(ee$Geometry$Point(-122.262, 37.8719)) %>% 
  ee$ImageCollection$filterDate('2014-01-01', '2014-12-31') %>% 
  ## Sort by increasing cloudiness.
  ee$ImageCollection$sort('CLOUD_COVER')
```


```{r}
## Compute the median of each pixel for each band of the 5 least cloudy scenes.
median <- collection[[1:5]]$reduce(ee$Reducer$median())
```


```{r}
## This function gets NDVI from Landsat 5 imagery.
getNDVI <- function(image) {
  (image[["B4"]] - image[["B3"]])/(image[["B4"]] + image[["B3"]])
}

## Load two Landsat 5 images, 20 years apart.
image1 <- ee$Image('LANDSAT/LT05/C01/T1_TOA/LT05_044034_19900604')
image2 <- ee$Image('LANDSAT/LT05/C01/T1_TOA/LT05_044034_20100611')

## Compute NDVI from the scenes.
ndvi1 <- getNDVI(image1)
ndvi2 <- getNDVI(image2)

## Compute the difference in NDVI.
ndviDifference <- ndvi2 - ndvi1

## Load the land mask from the SRTM DEM.
landMask <- ee$Image('CGIAR/SRTM90_V4')$mask()

## Update the NDVI difference mask with the land mask.
maskedDifference <- ndviDifference$updateMask(landMask)

## Display the masked result.
vizParams <- list(
  min = -0.5, 
  max = 0.5, 
  palette = c('FF0000', 'FFFFFF', '0000FF')
)
Map$setCenter(-122.2531, 37.6295, 9)
Map$addLayer(maskedDifference, vizParams, 'NDVI difference')
```
```{r}
## This function gets NDVI from Landsat 8 imagery.
addNDVI <- function(image) {
  ndvi <- (image[["B5"]] - image[["B4"]])/(image[["B5"]] + image[["B4"]])
  image$addBands(ndvi)
}

## Load the Landsat 8 raw data, filter by location and date.
ee_geom <- ee$Geometry$Point(-122.262, 37.8719)
collection <- ee$ImageCollection('LANDSAT/LC08/C01/T1') %>% 
  ee$ImageCollection$filterBounds(ee_geom) %>% 
  ee$ImageCollection$filterDate("2014-06-01", "2014-10-01")

## Map the function over the collection.
ndviCollection <- collection$map(addNDVI)
```


```{r}
## Instantiate an image with the Image constructor.
image <- ee$Image("CGIAR/SRTM90_V4")

## Zoom to a location.
Map$setCenter(-112.8598, 36.2841, 9) ## Center on the Grand Canyon.

## Display the image on the map.
Map$addLayer(image)
```

```{r}
## Load the SRTM image.
srtm <- ee$Image("CGIAR/SRTM90_V4")

## Apply an algorithm to an image.
slope <- ee$Terrain$slope(srtm)

## Display the result.
Map$setCenter(-112.8598, 36.2841, 9) ## Center on the Grand Canyon.
Map$addLayer(
  slope,
  list(min = 0, max = 60),
  "slope"
)
```

```{r}
library(gapminder)
library(tidyverse)
```

```{r}
my_gap <- gapminder
nested_data <- my_gap %>% 
  group_by(continent) %>% 
  nest() %>% 
  ungroup()
```

```{r}
a <- nested_data |> 
  mutate(
    lin_mod = map(
      data,
      function(x) lm(data = x, lifeExp ~ year)
    ),
    coefficients = map(lin_mod, coefficients),
    slope = map_dbl(coefficients, \(x) x[2]),
    slope_short = map_dbl(coefficients, 2)
  )
```

