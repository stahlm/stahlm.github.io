{"frames":[{"func":"plot(reg_cube, date = sits_timeline(reg_cube)[4], band = \"NDVI\", \n    palette = \"RdYlGn\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"plot.raster_cube(reg_cube, date = sits_timeline(reg_cube)[4], \n    band = \"NDVI\", palette = \"RdYlGn\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".check_cube_bands(tile, bands = band)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".check_chr_within(bands, within = .cube_bands(cube = cube, add_cloud = add_cloud), \n    case_sensitive = FALSE, msg = \"invalid 'bands' parameter\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".check_that(all(x %in% within), local_msg = local_msg, msg = msg)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(sprintf(msg, local_msg), call. = FALSE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error: plot: invalid 'bands' parameter (invalid condition)\n"}